<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js封装方法整合01</title>
      <link href="/posts/5ae4b622/"/>
      <url>/posts/5ae4b622/</url>
      
        <content type="html"><![CDATA[<h2 id="节流与防抖"><a href="#节流与防抖" class="headerlink" title="节流与防抖"></a>节流与防抖</h2><ul><li>节流：限制触发方法的频率。</li><li>防抖：限制方法的触发频率。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 节流：触发func方法后的一段时间(1s)内，不能再次触发</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, delay = <span class="number">1000</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> lastTime</span><br><span class="line">    <span class="keyword">let</span> nowTime</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        nowTime = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">        <span class="keyword">if</span> (!lastTime || nowTime - lastTime &gt; delay) &#123;</span><br><span class="line">            <span class="title function_">func</span>()</span><br><span class="line">            lastTime = nowTime</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 防抖：触发事件后，1秒后执行func方法，1秒内再次出发时间，重置为1秒后执行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, delay = <span class="number">1000</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123; <span class="built_in">clearTimeout</span>(timer) &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">            timer = <span class="literal">null</span></span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数据处理整合</title>
      <link href="/posts/7ea37d09/"/>
      <url>/posts/7ea37d09/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hetong对fapiao 1对多</span></span><br><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">    &#123; <span class="attr">hetong</span>: <span class="string">&#x27;x&#x27;</span>, <span class="attr">fapiao</span>: <span class="number">11</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">hetong</span>: <span class="string">&#x27;y&#x27;</span>, <span class="attr">fapiao</span>: <span class="number">22</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">hetong</span>: <span class="string">&#x27;x&#x27;</span>, <span class="attr">fapiao</span>: <span class="number">33</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 转换成</span></span><br><span class="line">[</span><br><span class="line">    &#123; <span class="attr">hetong</span>: <span class="string">&#x27;x&#x27;</span>, <span class="attr">fapiao</span>: [<span class="number">11</span>, <span class="number">33</span>] &#125;,</span><br><span class="line">    &#123; <span class="attr">hetong</span>: <span class="string">&#x27;y&#x27;</span>, <span class="attr">fapiao</span>: [<span class="number">22</span>] &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> finalArr = []</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (finalArr.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; finalArr.<span class="title function_">find</span>(<span class="function">(<span class="params">val</span>)=&gt;</span> val.<span class="property">hetong</span> == item.<span class="property">hetong</span> )) &#123;</span><br><span class="line">        finalArr.<span class="title function_">find</span>(<span class="function">(<span class="params">val</span>)=&gt;</span> val.<span class="property">hetong</span> == item.<span class="property">hetong</span> ).<span class="property">fapiao</span>.<span class="title function_">push</span>(item.<span class="property">fapiao</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        finalArr.<span class="title function_">push</span>(&#123;<span class="attr">hetong</span>:item.<span class="property">hetong</span>,<span class="attr">fapiao</span>:[item.<span class="property">fapiao</span>]&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(finalArr);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序异步与并行异步技巧</title>
      <link href="/posts/95baf4d4/"/>
      <url>/posts/95baf4d4/</url>
      
        <content type="html"><![CDATA[<h2 id="1、异步操作顺序执行"><a href="#1、异步操作顺序执行" class="headerlink" title="1、异步操作顺序执行"></a>1、异步操作顺序执行</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">uploadArray</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    fileList.<span class="property">value</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">previousValue, currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> previousValue.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">upload</span>(currentValue)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">upload</span>(currentValue)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, <span class="title class_">Promise</span>.<span class="title function_">resolve</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">upload</span> = (<span class="params">fileItem</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 异步操作（接口等）</span></span><br><span class="line">        <span class="title function_">uploadFile</span>(fileItem).<span class="title function_">then</span>(<span class="function">(<span class="params">res: any</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">state</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>reduce()</code>方法对数组中的每个元素按序执行一个的回调函数，每一次运行回调函数会将先前元素的计算结果作为参数传入<br>详细参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">Array.prototype.reduce()</a>  </p><h2 id="2、并行执行完所有异步操作后，再继续其他内容"><a href="#2、并行执行完所有异步操作后，再继续其他内容" class="headerlink" title="2、并行执行完所有异步操作后，再继续其他内容"></a>2、并行执行完所有异步操作后，再继续其他内容</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">delPic</span> = (<span class="params">file</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">s3DelImg</span>(&#123; <span class="attr">fileName</span>: file.<span class="property">fileName</span>, <span class="attr">fileId</span>: file.<span class="property">fileId</span>&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res: any</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">state</span> == <span class="number">200</span>) &#123;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                message.<span class="title function_">error</span>(res.<span class="property">message</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">resolve</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">delList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> delList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">let</span> proResList = delList.<span class="title function_">map</span>(<span class="function">(<span class="params">item: any</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="title function_">delPic</span>(item) &#125;)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">all</span>(proResList).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">getImgList</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Promise.all()</code>,对传入的promise组成的数组进行检测，数组中promise全部成功resolve()后,<code>.then()</code>执行后续操作</p>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bz-view，backblaze图床管理工具</title>
      <link href="/posts/5951a346/"/>
      <url>/posts/5951a346/</url>
      
        <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/recreyed/bz-view">bz-view</a></p><h2 id="1、存储桶配置，参考这个文档"><a href="#1、存储桶配置，参考这个文档" class="headerlink" title="1、存储桶配置，参考这个文档"></a>1、存储桶配置，参考<a href="https://blazeb2.js.org/guide/prepare.html">这个文档</a></h2><h3 id="1-1、注册并登录Backblaze存储桶"><a href="#1-1、注册并登录Backblaze存储桶" class="headerlink" title="1.1、注册并登录Backblaze存储桶"></a>1.1、<a href="https://www.backblaze.com/b2/sign-up.html">注册</a>并<a href="https://secure.backblaze.com/user_signin.htm">登录</a>Backblaze存储桶</h3><h3 id="1-2、创建一个桶，并修改桶设定，生成Key"><a href="#1-2、创建一个桶，并修改桶设定，生成Key" class="headerlink" title="1.2、创建一个桶，并修改桶设定，生成Key"></a>1.2、创建一个桶，并修改桶设定，生成Key</h3><h3 id="1-3、查看存储桶友好url"><a href="#1-3、查看存储桶友好url" class="headerlink" title="1.3、查看存储桶友好url"></a>1.3、查看存储桶友好url</h3><h3 id="1-4、cloudflare配置，参考这篇文章"><a href="#1-4、cloudflare配置，参考这篇文章" class="headerlink" title="1.4、cloudflare配置，参考这篇文章"></a>1.4、cloudflare配置，参考<a href="https://www.ivu4e.com/blog/cld-services/2022-06-18/1249.html">这篇文章</a></h3><h2 id="2、图床管理工具开发"><a href="#2、图床管理工具开发" class="headerlink" title="2、图床管理工具开发"></a>2、图床管理工具开发</h2><h3 id="2-1、前端vue3，参考github代码"><a href="#2-1、前端vue3，参考github代码" class="headerlink" title="2.1、前端vue3，参考github代码"></a>2.1、前端vue3，参考<a href="https://github.com/recreyed/bz-view">github代码</a></h3><h3 id="2-2、中间件express代理请求"><a href="#2-2、中间件express代理请求" class="headerlink" title="2.2、中间件express代理请求"></a>2.2、中间件express代理请求</h3><p>因backblaze存储桶api有动态变化，采用个人比较熟悉的express来进行接口代理请求。</p><h3 id="2-3-、vercel部署express，并用cloudflare加速"><a href="#2-3-、vercel部署express，并用cloudflare加速" class="headerlink" title="2.3*、vercel部署express，并用cloudflare加速"></a>2.3*、vercel部署express，并用cloudflare加速</h3><p>写好的<a href="https://github.com/recreyed/bz-view/tree/main/serve">express代码</a>部署到vercel：</p><ol><li><p>新建<code>vercel.json</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;builds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;use&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@vercel/node&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;routes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/(.*)&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>选择部署仓库，<a href="https://vercel.com/new/clone?s=https://github.com/recreyed/bz-view/tree/serve">链接</a></p></li><li><p>最为关键的，在前端打包好，放到expres静态文件中时，<code>.js</code>后缀改为<code>.mjs</code>。html中的引用路径也修改。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> express </tag>
            
            <tag> vue </tag>
            
            <tag> blog </tag>
            
            <tag> vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电子杂物分类测试文章</title>
      <link href="/posts/f402307/"/>
      <url>/posts/f402307/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 电子杂物 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活分类文章测试</title>
      <link href="/posts/a1cc686/"/>
      <url>/posts/a1cc686/</url>
      
        <content type="html"><![CDATA[<p>没有生活</p>]]></content>
      
      
      <categories>
          
          <category> 生活相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂言帐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css伪类选择器</title>
      <link href="/posts/ebd9ab17/"/>
      <url>/posts/ebd9ab17/</url>
      
        <content type="html"><![CDATA[<h2 id="has选择器"><a href="#has选择器" class="headerlink" title=":has选择器"></a><code>:has</code>选择器</h2><p>选择某元素下，符合条件的元素。例如</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.box</span>) &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择包含类名为<code>.box</code>的div元素</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">P</span> <span class="attr">class</span>=<span class="string">&#x27;box&#x27;</span>&gt;</span>我是蓝色的<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">P</span>&gt;</span>我也是<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="is选择器"><a href="#is选择器" class="headerlink" title=":is选择器"></a><code>:is</code>选择器</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d65f4a032f24920b8fc149fb8e91359~tplv-k3u1fbpfcp-zoom-1.image" alt="alt"><br>包装共性选择器。例如</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:is</span>(<span class="selector-tag">div</span>, <span class="selector-tag">p</span>) <span class="selector-pseudo">:is</span>(<span class="selector-tag">span</span>, <span class="selector-tag">i</span>) &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择div和p标签下的span和i标签</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>我们都被选中了<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>我们都被选中了<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>我们都被选中了<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>我们都被选中了<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意:不支持选中伪元素，优先级为选择器本身的优先级</strong></p><h2 id="where选择器"><a href="#where选择器" class="headerlink" title=":where选择器"></a><code>:where</code>选择器</h2><p>与<code>is</code>选择器相同，区别在于<code>:where</code>选择器的优先级总是0。</p><h2 id="not选择器"><a href="#not选择器" class="headerlink" title=":not选择器"></a><code>:not</code>选择器</h2><p>匹配不符合指定选择器的元素。例如</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.box</span>) &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择class不是.box的div元素</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>我没被选中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我们被选中了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;yi&quot;</span>&gt;</span>我们被选中了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意:未指定<code>:not</code>前边的宿主选择器，<code>:not</code>会选中body；<code>:not</code>不能嵌套</strong></p><p>参考文章：<a href="https://www.cnblogs.com/coco1s/p/16283836.html">浅谈逻辑选择器</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue封装插件</title>
      <link href="/posts/18273814/"/>
      <url>/posts/18273814/</url>
      
        <content type="html"><![CDATA[<p>参考内容：<a href="https://blog.csdn.net/qq_46038620/article/details/119205367">vue的组件插件化封装</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//toast/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Toast</span> <span class="keyword">from</span> <span class="string">&#x27;./toast.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> toast = &#123;&#125;</span><br><span class="line">toast.<span class="property">install</span> = <span class="keyword">function</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;use了toast插件&#x27;</span>)</span><br><span class="line">  <span class="comment">// 1. 创建组件构造器</span></span><br><span class="line"><span class="keyword">const</span> toastConstructor = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(<span class="title class_">Toast</span>)</span><br><span class="line"><span class="comment">// 2. 使用组件构造器创建一个组件</span></span><br><span class="line"> <span class="keyword">const</span> toast = <span class="keyword">new</span> <span class="title function_">toastConstructor</span>()</span><br><span class="line"><span class="comment">// 3. 将组件手动挂载到一个元素上</span></span><br><span class="line">toast.$mount(<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>))</span><br><span class="line"><span class="comment">// 4. 将节点插入到页面中，$el就是改组件的节点</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(toast.<span class="property">$el</span>)</span><br><span class="line"><span class="comment">// 5. 将组件加入到vue实例上</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$toast</span> = toast</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> toast</span><br></pre></td></tr></table></figure><p>toast/toast.vue  </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toast&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123;massage&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;Toast&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">massage</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isShow</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">show</span>(<span class="params">msg=<span class="string">&#x27;默认文字&#x27;</span>,durations=<span class="number">2000</span></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">massage</span> = msg</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">isShow</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">isShow</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,durations)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.toast</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">7px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">8</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">z-index</span>: <span class="number">9999</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>入口文件，一般为<code>main.js</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> toast <span class="keyword">from</span> <span class="string">&#x27;@/plugins/toast/index.js&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(toast)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue多页面构建</title>
      <link href="/posts/5325484/"/>
      <url>/posts/5325484/</url>
      
        <content type="html"><![CDATA[<p>具体实现后续补充<br>参考内容：<a href="https://www.kancloud.cn/sllyli/vueproject/1244252">Vue 项目构建与开发入门</a><br>代码仓库：<a href="https://github.com/recreyed/vue-mpa-demo">vue-mpa-demo</a>  </p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><blockquote><p>├── node_modules               # 项目依赖包目录<br>├── build                      # 项目 webpack 功能目录<br>├── config                     # 项目配置项文件夹<br>├── src                        # 前端资源目录<br>│   ├── images                 # 图片目录<br>│   ├── components             # 公共组件目录<br>│   ├── pages                  # 页面目录<br>│   │   ├── page1              # page1 目录<br>│   │   │   ├── components     # page1 组件目录<br>│   │   │   ├── router         # page1 路由目录<br>│   │   │   ├── views          # page1 页面目录<br>│   │   │   ├── page1.html     # page1 html 模板<br>│   │   │   ├── page1.vue      # page1 vue 配置文件<br>│   │   │   └── page1.js       # page1 入口文件<br>│   │   ├── page2              # page2 目录<br>│   │   └── index              # index 目录<br>│   ├── common                 # 公共方法目录<br>│   └── store                  # 状态管理 store 目录<br>├── .gitignore                 # git 忽略文件<br>├── .env                       # 全局环境配置文件<br>├── .env.dev                   # 开发环境配置文件<br>├── .postcssrc.js              # postcss 配置文件<br>├── babel.config.js            # babel 配置文件<br>├── package.json               # 包管理文件<br>├── vue.config.js              # CLI 配置文件<br>└── yarn.lock                  # yarn 依赖信息文件  </p></blockquote><h2 id="改造内容"><a href="#改造内容" class="headerlink" title="改造内容"></a>改造内容</h2><p>。。。</p>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全局滚动条显隐抖动问题</title>
      <link href="/posts/39d3387a/"/>
      <url>/posts/39d3387a/</url>
      
        <content type="html"><![CDATA[<p>全局滚动条的显示与隐藏会影响页内元素,在全局添加以下css可以使滚动条不占位置</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:root</span> <span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理:使<code>body</code>的宽度等于100vw，100vw包含滚动条的宽度，<code>overflow-x: hidden;</code>可以使页面没有横向滚动条。<br>一般的项目无需横向滚动条，一般使用响应式解决多屏问题。</p><p>参考内容：<a href="https://www.zhangxinxu.com/wordpress/2015/01/css-page-scrollbar-toggle-center-no-jumping/">小tip:CSS vw让overflow:auto页面滚动条出现时不跳动</a>  </p><p>不过我使用的时候在vue项目中，使用这位博主的方法。无法竖向滚动，可以在原生html中生效。</p>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blob转file并传给后端</title>
      <link href="/posts/7b09e437/"/>
      <url>/posts/7b09e437/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> files = <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">File</span>([data], <span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;</span>.jpg`</span>, &#123; <span class="attr">type</span>: data.<span class="property">type</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, files)</span><br></pre></td></tr></table></figure><p>然后再用接口请求，例如<code>axios</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;url&#x27;</span>,formData).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js遍历获取本地图片</title>
      <link href="/posts/ecb3bd1e/"/>
      <url>/posts/ecb3bd1e/</url>
      
        <content type="html"><![CDATA[<p>上代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数 1.路径 2.是否遍历子目录 3.正则</span></span><br><span class="line"><span class="comment">// 本例中遍历获取的是assets/avatar目录下所有的.webp格式的图片</span></span><br><span class="line"><span class="keyword">const</span> files = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&quot;@/assets/avatar&quot;</span>, <span class="literal">true</span>, <span class="regexp">/\.webp$/</span>).<span class="title function_">keys</span>();</span><br><span class="line">files.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">avatarList</span>.<span class="title function_">push</span>(&#123; <span class="attr">code</span>: <span class="string">`<span class="subst">$&#123;index&#125;</span>`</span>, <span class="attr">url</span>: <span class="built_in">require</span>(<span class="string">&quot;../../../assets/avatar&quot;</span> + item.<span class="title function_">slice</span>(<span class="number">1</span>)) &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客的GithubAction自动部署</title>
      <link href="/posts/da18bd0/"/>
      <url>/posts/da18bd0/</url>
      
        <content type="html"><![CDATA[<p>先放一篇<a href="https://akilar.top/posts/f752c86d/">参考文章</a>在这<br>测试一下 没有问题啦</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床的使用</title>
      <link href="/posts/5e840c0e/"/>
      <url>/posts/5e840c0e/</url>
      
        <content type="html"><![CDATA[<p>先放一篇<a href="https://akilar.top/posts/3e956346/">参考文章</a>在这</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多模块angular项目的搭建</title>
      <link href="/posts/c9b1734a/"/>
      <url>/posts/c9b1734a/</url>
      
        <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000021711128">参考文章</a><br><a href="https://github.com/recreyed/angular-multi-application">示例链接</a>  </p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol><li>三个选项意为不创建Application，不进行交互，跳过依赖的安装<br><code>ng new project-name --createApplication=false --interactive=false --skipInstall=true</code></li><li>创建库和应用<br><code>ng g library library --skipInstall=true</code><br><code>ng g application sso --style=lcss --routing=true --skipInstall=true</code></li><li>安装依赖<br><code>npm install</code></li></ol><h2 id="引用本地公共库"><a href="#引用本地公共库" class="headerlink" title="引用本地公共库"></a>引用本地公共库</h2><p>library作为公共库，可以编写一些常用框架或组件。<br>可以将其发布到npm仓库，也可以本地引用。本地引用如下:  </p><ul><li>打包<br><code>ng build library</code></li><li>在module模块中引用<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppRoutingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app-routing.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LibraryModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;library&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">AppComponent</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span>,</span><br><span class="line">    <span class="title class_">AppRoutingModule</span>,</span><br><span class="line">    <span class="title class_">LibraryModule</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript嵌套函数 return失效 整体跳出</title>
      <link href="/posts/1b98b338/"/>
      <url>/posts/1b98b338/</url>
      
        <content type="html"><![CDATA[<p>在遇到树形结构数据，js进行遍历时，return不会跳出整个函数。需要用到throw</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">check</span>(<span class="params">list</span>)&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> list) &#123;</span><br><span class="line">       <span class="keyword">if</span> (item.<span class="property">name</span>==<span class="string">&#x27;张三孙&#x27;</span>) &#123;<span class="comment">//这里可以校验其他情况</span></span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">name</span>);</span><br><span class="line">           <span class="comment">//...一些操作</span></span><br><span class="line">           <span class="comment">// 这里return并不会跳除整个check()函数，可以使用throw</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (item.<span class="property">child</span>) &#123;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="title function_">check</span>(item.<span class="property">child</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//另一个组件，或者需要检测check()函数返回的其他地方</span></span><br><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">        <span class="attr">child</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;张三子&#x27;</span>,</span><br><span class="line">                <span class="attr">child</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">name</span>:<span class="string">&#x27;张三孙&#x27;</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">check</span>(arr);</span><br><span class="line">&#125; <span class="keyword">catch</span> (stat) &#123;</span><br><span class="line">    <span class="keyword">if</span> (stat) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就实现了 嵌套函数的整体跳出</p>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>three.js实现3d地球</title>
      <link href="/posts/7446b8e7/"/>
      <url>/posts/7446b8e7/</url>
      
        <content type="html"><![CDATA[<p>angular中引入three.js并实现简易3d地球<br><a href="https://github.com/recreyed/3d-earth-three.js">项目地址</a><br>html中</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> #<span class="attr">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ts文件中</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&#x27;three&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">OrbitControls</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;three-orbitcontrols-ts&#x27;</span>;</span><br><span class="line"></span><br><span class="line">private <span class="attr">renderer</span>: <span class="variable constant_">THREE</span>.<span class="property">WebGLRenderer</span>;</span><br><span class="line">private <span class="attr">camera</span>: <span class="variable constant_">THREE</span>.<span class="property">OrthographicCamera</span>;</span><br><span class="line">public <span class="attr">scene</span>: <span class="variable constant_">THREE</span>.<span class="property">Scene</span>;</span><br><span class="line">public s = <span class="number">200</span>;<span class="comment">//三维显示范围控制系数，系数越大，显示范围越大</span></span><br><span class="line">public <span class="attr">controls</span>: <span class="title class_">OrbitControls</span>;</span><br><span class="line">public <span class="attr">satellite</span>: <span class="variable constant_">THREE</span>.<span class="property">Points</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">ViewChild</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">private <span class="attr">canvasRef</span>: <span class="title class_">ElementRef</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">render</span> = <span class="variable language_">this</span>.<span class="property">render</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取canvas元素</span></span><br><span class="line">private <span class="keyword">get</span> <span class="title function_">canvas</span>(): <span class="title class_">HTMLCanvasElement</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">canvasRef</span>.<span class="property">nativeElement</span>;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">// 计算v1,v2 的中点</span></span><br><span class="line">private <span class="title function_">getVCenter</span>(<span class="params">v1, v2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> v = v1.<span class="title function_">add</span>(v2);</span><br><span class="line">    <span class="keyword">return</span> v.<span class="title function_">divideScalar</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算V1，V2向量固定长度的点</span></span><br><span class="line">private <span class="title function_">getLenVcetor</span>(<span class="params">v1, v2, len</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> v1v2Len = v1.<span class="title function_">distanceTo</span>(v2);</span><br><span class="line">    <span class="keyword">return</span> v1.<span class="title function_">lerp</span>(v2, len / v1v2Len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据经纬度获得三位坐标点</span></span><br><span class="line"><span class="title function_">lglt2xyz</span>(<span class="params">lng, lat, radius</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> theta = (<span class="number">90</span> + lng) * (<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">180</span>)</span><br><span class="line">    <span class="keyword">const</span> phi = (<span class="number">90</span> - lat) * (<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">180</span>)</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>()).<span class="title function_">setFromSpherical</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Spherical</span>(radius, phi, theta))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加飞线</span></span><br><span class="line">private <span class="title function_">addLines</span>(<span class="params">v0, v3</span>) &#123;       </span><br><span class="line">    <span class="comment">// 夹角</span></span><br><span class="line">    <span class="keyword">var</span> angle = (v0.<span class="title function_">angleTo</span>(v3) * <span class="number">1.8</span>) / <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">0.1</span>; <span class="comment">// 0 ~ Math.PI</span></span><br><span class="line">    <span class="keyword">var</span> aLen = angle * <span class="number">12</span>,</span><br><span class="line">        hLen = angle * angle * <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">var</span> p0 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> vtop = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 法线向量</span></span><br><span class="line">    <span class="keyword">var</span> rayLine = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Ray</span>(p0, <span class="variable language_">this</span>.<span class="title function_">getVCenter</span>(v0.<span class="title function_">clone</span>(), v3.<span class="title function_">clone</span>()));</span><br><span class="line">    <span class="comment">// 顶点坐标</span></span><br><span class="line">    rayLine.<span class="title function_">at</span>(hLen / rayLine.<span class="title function_">at</span>(<span class="number">1</span>, rayLine.<span class="property">origin</span>).<span class="title function_">length</span>(), vtop);</span><br><span class="line">    <span class="comment">// 控制点坐标</span></span><br><span class="line">    <span class="keyword">var</span> v1 = <span class="variable language_">this</span>.<span class="title function_">getLenVcetor</span>(v0.<span class="title function_">clone</span>(), vtop, aLen);</span><br><span class="line">    <span class="keyword">var</span> v2 = <span class="variable language_">this</span>.<span class="title function_">getLenVcetor</span>(v3.<span class="title function_">clone</span>(), vtop, aLen);</span><br><span class="line">    <span class="comment">// 绘制贝塞尔曲线</span></span><br><span class="line">    <span class="keyword">var</span> curve = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">CubicBezierCurve3</span>(v0, v1, v2, v3);</span><br><span class="line">    <span class="keyword">var</span> gLine = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BufferGeometry</span>();</span><br><span class="line">    <span class="keyword">var</span> gPoints = curve.<span class="title function_">getPoints</span>(<span class="number">60</span>);       </span><br><span class="line">    gLine.<span class="title function_">setFromPoints</span>(gPoints)</span><br><span class="line">    <span class="keyword">var</span> mLine = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">LineBasicMaterial</span>(&#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;violet&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">curve</span>: curve,</span><br><span class="line">        <span class="attr">lineMesh</span>: <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Line</span>(gLine, mLine)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建场景</span></span><br><span class="line">private <span class="title function_">createScene</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scene</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span><br><span class="line">    <span class="keyword">var</span> geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SphereGeometry</span>(<span class="number">130</span>,<span class="number">40</span>,<span class="number">40</span>);<span class="comment">//地球</span></span><br><span class="line">    <span class="comment">//卫星</span></span><br><span class="line">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">200</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> points = [p1];</span><br><span class="line">    <span class="keyword">var</span> satelliteGeometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BufferGeometry</span>();</span><br><span class="line">    satelliteGeometry.<span class="title function_">setFromPoints</span>(points);</span><br><span class="line">    <span class="comment">// 贴图</span></span><br><span class="line">    <span class="keyword">var</span> loader = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>();</span><br><span class="line">    <span class="comment">// 地球贴图</span></span><br><span class="line">    loader.<span class="title function_">load</span>(<span class="string">&#x27;../../assets/images/earth3.jpg&#x27;</span>, <span class="function">(<span class="params">texture</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshLambertMaterial</span>(&#123;</span><br><span class="line">            <span class="attr">map</span>:texture,<span class="comment">//设置贴图属性值</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">var</span> mesh = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geometry,material)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">scene</span>.<span class="title function_">add</span>(mesh)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 卫星贴图</span></span><br><span class="line">    loader.<span class="title function_">load</span>(<span class="string">&#x27;../../assets/images/moon.png&#x27;</span>,<span class="function">(<span class="params">texture</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> satelliteMaterial = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PointsMaterial</span>(&#123;</span><br><span class="line">            <span class="attr">map</span>:texture,</span><br><span class="line">            <span class="attr">transparent</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">size</span>:<span class="number">20</span>,</span><br><span class="line">            <span class="attr">depthWrite</span>:<span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">satellite</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Points</span>(satelliteGeometry,satelliteMaterial)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">scene</span>.<span class="title function_">add</span>(<span class="variable language_">this</span>.<span class="property">satellite</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 飞线</span></span><br><span class="line">    <span class="keyword">var</span> lGroup = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Group</span>();</span><br><span class="line">    lGroup.<span class="title function_">add</span>(<span class="variable language_">this</span>.<span class="title function_">addLines</span>(<span class="variable language_">this</span>.<span class="title function_">lglt2xyz</span>(<span class="number">116.20</span>,<span class="number">39.56</span>,<span class="number">130</span>),<span class="variable language_">this</span>.<span class="title function_">lglt2xyz</span>(-<span class="number">74.70</span>,<span class="number">40.43</span>,<span class="number">130</span>)).<span class="property">lineMesh</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scene</span>.<span class="title function_">add</span>(lGroup)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建光源</span></span><br><span class="line">private <span class="title function_">createLight</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> light = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AmbientLight</span>(<span class="number">0xffffff</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scene</span>.<span class="title function_">add</span>(light);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建相机</span></span><br><span class="line">private <span class="title function_">createCamera</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> k = <span class="variable language_">window</span>.<span class="property">innerWidth</span>/<span class="variable language_">window</span>.<span class="property">innerHeight</span>;<span class="comment">//窗口宽高比</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">camera</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">OrthographicCamera</span>(-<span class="variable language_">this</span>.<span class="property">s</span>*k,<span class="variable language_">this</span>.<span class="property">s</span>*k,<span class="variable language_">this</span>.<span class="property">s</span>,-<span class="variable language_">this</span>.<span class="property">s</span>,<span class="number">1</span>,<span class="number">10000</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">camera</span>.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">5</span>,-<span class="number">20</span>,<span class="number">200</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">camera</span>.<span class="title function_">lookAt</span>(<span class="variable language_">this</span>.<span class="property">scene</span>.<span class="property">position</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染器设置</span></span><br><span class="line">private <span class="title function_">renderSetting</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderer</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>(&#123;</span><br><span class="line">        <span class="attr">canvas</span>: <span class="variable language_">this</span>.<span class="property">canvas</span>,</span><br><span class="line">        <span class="attr">antialias</span>: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">setClearColor</span>(<span class="number">0xb9d3ff</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染函数</span></span><br><span class="line">public <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">render</span>(<span class="variable language_">this</span>.<span class="property">scene</span>, <span class="variable language_">this</span>.<span class="property">camera</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">satellite</span>.<span class="title function_">rotateY</span>(<span class="number">0.01</span>);</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(<span class="variable language_">this</span>.<span class="property">render</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 鼠标控制</span></span><br><span class="line">public <span class="title function_">addControls</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">controls</span> = <span class="keyword">new</span> <span class="title class_">OrbitControls</span>(<span class="variable language_">this</span>.<span class="property">camera</span>,<span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">domElement</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 窗口自适应</span></span><br><span class="line">@<span class="title class_">HostListener</span>(<span class="string">&#x27;window:resize&#x27;</span>, [<span class="string">&#x27;$event&#x27;</span>])</span><br><span class="line">public <span class="title function_">onResize</span>(<span class="params">event: Event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;100%&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;100%&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">setSize</span>(<span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">offsetWidth</span>, <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">offsetHeight</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">camera</span>.<span class="title function_">updateProjectionMatrix</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">createScene</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">createLight</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">createCamera</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">renderSetting</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">addControls</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> three.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular基础 01</title>
      <link href="/posts/cb24f466/"/>
      <url>/posts/cb24f466/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img.hitagi.site/202211142239481.png" alt="angular思维图(简)"></p><p>demo项目地址:<a href="https://github.com/recreyed/angular-demo">angular-demo</a></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><ol><li>组件中引入具名插槽<br><code>&lt;ng-content select=&quot;[slot]&quot;&gt;&lt;/ng-content&gt;</code>  </li><li>父组件的子组件标签中写入插槽内容<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-a-zujian</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>&gt;</span>这是具名插槽<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-a-zujian</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="父子传值"><a href="#父子传值" class="headerlink" title="父子传值"></a>父子传值</h3><h4 id="父传子-Input"><a href="#父传子-Input" class="headerlink" title="父传子@Input"></a>父传子@Input</h4><ol><li>子组件定义接受数据的变量<br><code>@Input() name: string;</code></li><li>父组件通过属性型绑定传递数据 <code>[name] = &quot;数据&quot;</code>,<code>[name]</code> 是子组件中定义的接受数据的变量<br><code>&lt;app-a-zujian [name]=&#39;fatherData&#39;&gt;&lt;/app-a-zujian&gt;</code><h4 id="子传父EventEmitter"><a href="#子传父EventEmitter" class="headerlink" title="子传父EventEmitter"></a>子传父EventEmitter</h4></li><li>子组件创建事件发射器,并通过时间发射器传递数据<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Output</span>() toFather = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>()</span><br><span class="line"></span><br><span class="line"><span class="title function_">someToFather</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//触发someToFather事件时,传递数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toFather</span>.<span class="title function_">emit</span>(<span class="variable language_">this</span>.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>&lt;button (click)=&#39;someToFather()&#39;&gt;EventEmitter子传父&lt;/button&gt;</code></li><li>绑定<code>(toFather)</code>时间发射器,通过$event接受传递的参数  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fromSon</span>(data): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>&lt;app-a-zujian (toFather)=&quot;fromSon($event)&quot;&gt;&lt;/app-a-zujian&gt;</code>  <h4 id="子传父模板引用-推荐"><a href="#子传父模板引用-推荐" class="headerlink" title="子传父模板引用(推荐)"></a>子传父模板引用(推荐)</h4></li><li>父组件标记子组件模板<br><code>&lt;app-a-zujian #child&gt;&lt;/app-a-zujian&gt;</code></li><li>父组件引用子组件方法或数据<br><code>&lt;div&gt;子传父模板引用----&#123;&#123;child.mobanData&#125;&#125;&lt;/div&gt;</code><h4 id="子传父-ViewChild-推荐"><a href="#子传父-ViewChild-推荐" class="headerlink" title="子传父@ViewChild(推荐)"></a>子传父@ViewChild(推荐)</h4></li><li>父组件ts中引入子组件模板<br><code>@ViewChild(&quot;child&quot;) childData;</code></li><li>父组件ts中获得子组件方法或数据<br><code>getSon(): void &#123; console.log(this.childData.viewData) &#125;</code><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><code>&#123;&#123;data&#125;&#125;</code><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3></li></ol><ul><li>内置管道<br>Date：格式化日期<br>UpperCase：转化为大写<br>LowerCase：转化为小写<br>Currency：把数字转换成金额字符串<br>Percent：把数字转换成百分比字符串<br>Json：把一个值转换成 JSON 字符串格式。在调试时很有用。  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用参数格式化日期： &#123;&#123; dateTime | date:&quot;yyy/MM/dd&quot; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 特殊的映射管道:i18nPlural --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; sex | i18nPlural: sexMapping &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 管道数据映射</span></span><br><span class="line">public <span class="attr">sex</span>: string = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"><span class="attr">sexMapping</span>: &#123; [<span class="attr">k</span>: string]: string &#125; = &#123; <span class="string">&#x27;=1&#x27;</span>: <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;=2&#x27;</span>: <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;other&#x27;</span>: <span class="string">&#x27;其他&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="结构型指令"><a href="#结构型指令" class="headerlink" title="结构型指令"></a>结构型指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;isActive&quot;</span>&gt;</span>*ngIf 变量为true时显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>*ngFor<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of arrayList; let key = index&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;key&#125;&#125;:&#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngSwitch</span>]=<span class="string">&quot;htmltags&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>[ngSwitch]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngSwitchCase</span>=<span class="string">&quot;&#x27;div&#x27;&quot;</span>&gt;</span>div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngSwitchCase</span>=<span class="string">&quot;&#x27;span&#x27;&quot;</span>&gt;</span>span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> *<span class="attr">ngSwitchDefault</span>&gt;</span>a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性型指令"><a href="#属性型指令" class="headerlink" title="属性型指令"></a>属性型指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果flag变量为true 将会添加current类,否则移除 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">class.current</span>]=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用简单的表达式,表达式为true则添加selected类,否则移除 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">class.selected</span>]=<span class="string">&quot;hero == 0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用三元运算符,flag变量为true添加item01类,否则添加item02类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;flag?&#x27;item01&#x27;:&#x27;item02&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用对象 对象中的每个 key 都是一个 CSS 类名，如果它的 value 是 true,这个类就会被添加，否则就会被移除。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;cssObj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果flag变量为true 将会添加“#000”颜色值,否则添加“#fff”值。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">style.color</span>]=<span class="string">&quot;flag? &#x27;#000&#x27; : &#x27;#fff&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 带单位的样式绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">style.padding.px</span>]=<span class="string">&quot;isSpecial&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模板驱动表单"><a href="#模板驱动表单" class="headerlink" title="模板驱动表单"></a>模板驱动表单</h3><code>&lt;input type=&quot;text&quot; [(ngModel)]=&quot;value3&quot;&gt;&#123;&#123;value3&#125;&#125;</code><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2>第一步 导入  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.module.ts中</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">RouterModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line">@<span class="title class_">NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes),</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>第二步  定义<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.module.ts中</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">redirectTo</span>: <span class="string">&#x27;index&#x27;</span>, <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;biaodan&#x27;</span>, <span class="attr">component</span>: <span class="title class_">EBiaodanComponent</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;index&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AppComponent</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;**&#x27;</span>, <span class="attr">component</span>: <span class="title class_">NotFoundComponent</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>第三步 置入<br><code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2>使用前先导入所需要的控件<h3 id="单个表单"><a href="#单个表单" class="headerlink" title="单个表单"></a>单个表单</h3><code>public name = new FormControl(&quot;&quot;);</code><h3 id="表单组"><a href="#表单组" class="headerlink" title="表单组"></a>表单组</h3></li><li>使用FormBuilder生成表单<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用前先注入FormBuilder服务</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">private fb: FormBuilder</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">public profileForm = <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: [<span class="string">&#x27;&#x27;</span>, <span class="title class_">Validators</span>.<span class="property">required</span>],</span><br><span class="line">    <span class="attr">address</span>: <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">      <span class="attr">street</span>: [<span class="string">&#x27;&#x27;</span>,],</span><br><span class="line">      <span class="attr">city</span>: [<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li>FormArray动态表单<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public profileForm = <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">    <span class="attr">aliases</span>: <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">array</span>([</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">control</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    ])</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// 动态表单添加</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">aliases</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">control</span>(<span class="string">&#x27;&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li>修改表单组的值<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">profileForm</span>.<span class="title function_">patchValue</span>(&#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">street</span>: <span class="string">&#x27;123 Drew Street&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ipv4Validator</span>(<span class="params">nameRe: <span class="built_in">RegExp</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">control</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> forbidden = nameRe.<span class="title function_">test</span>(control.<span class="property">value</span>);</span><br><span class="line">    <span class="keyword">return</span> forbidden ? <span class="literal">null</span> : &#123; <span class="attr">forbiddenName</span>: control.<span class="property">value</span> &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public profileForm = <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: [<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">     [<span class="title class_">Validators</span>.<span class="property">required</span>, <span class="title function_">ipv4Validator</span>(<span class="regexp">/^((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.)&#123;3&#125;(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])(?::(?:[0-9]|[1-9][0-9]&#123;1,3&#125;|[1-5][0-9]&#123;4&#125;|6[0-4][0-9]&#123;3&#125;|65[0-4][0-9]&#123;2&#125;|655[0-2][0-9]|6553[0-5]))?$/</span>)]</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">dir</span>(res); &#125;);</span><br></pre></td></tr></table></figure><h3 id="post"><a href="#post" class="headerlink" title="post"></a>post</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">post</span>(<span class="string">&quot;url&quot;</span>,params)</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(val); &#125;);</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2>使用前先导入<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ts文件中</span></span><br><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">animations</span>: [</span><br><span class="line">    <span class="title function_">trigger</span>(<span class="string">&#x27;openClose&#x27;</span>, [</span><br><span class="line">      <span class="title function_">state</span>(<span class="string">&#x27;open&#x27;</span>, <span class="title function_">style</span>(&#123;</span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;200px&#x27;</span>,</span><br><span class="line">        <span class="attr">opacity</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line">      &#125;)),</span><br><span class="line">      <span class="title function_">state</span>(<span class="string">&#x27;closed&#x27;</span>, <span class="title function_">style</span>(&#123;</span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">        <span class="attr">opacity</span>: <span class="number">0.8</span>,</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">      &#125;)),</span><br><span class="line">      <span class="title function_">transition</span>(<span class="string">&#x27;open =&gt; closed&#x27;</span>, [</span><br><span class="line">        <span class="title function_">animate</span>(<span class="string">&#x27;0.5s&#x27;</span>)</span><br><span class="line">      ]),</span><br><span class="line">      <span class="title function_">transition</span>(<span class="string">&#x27;closed =&gt; open&#x27;</span>, [</span><br><span class="line">        <span class="title function_">animate</span>(<span class="string">&#x27;0.5s&#x27;</span>)</span><br><span class="line">      ]),</span><br><span class="line">    ]),</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">public isOpen = <span class="literal">true</span>;</span><br><span class="line"><span class="title function_">toggle</span>(<span class="params"></span>) &#123; <span class="variable language_">this</span>.<span class="property">isOpen</span> = !<span class="variable language_">this</span>.<span class="property">isOpen</span>; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html文件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;toggle()&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [@<span class="attr">openClose</span>]=<span class="string">&quot;isOpen ? &#x27;open&#x27; : &#x27;closed&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业设计技术总结 03</title>
      <link href="/posts/41495c75/"/>
      <url>/posts/41495c75/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此篇开始简略描述实现过程<br>此篇只负责流程，错误解决待之后整理</p></blockquote><h2 id="1、服务器篇"><a href="#1、服务器篇" class="headerlink" title="1、服务器篇"></a>1、服务器篇</h2><ul><li>部署环境为阿里云服务器，操作系统：Centos 8</li></ul><p>云服务器防火墙开启这些端口供外部访问<br><img src="https://img.hitagi.site/202211142241039.png" alt="阿里云防火墙"></p><h3 id="1-1-安装mongoDB"><a href="#1-1-安装mongoDB" class="headerlink" title="1.1 安装mongoDB"></a>1.1 安装mongoDB</h3><p>在此之前，由于在2021年12月31日，CentOS 8操作系统版本结束了生命周期，CentOS 8的源地址<code>http://mirror.centos.org/centos/8/</code>内容已移除。所以继续使用阿里云默认源会报错，所以需要换源配置。<br>详见这篇文章 <a href="https://help.aliyun.com/document_detail/405635.html">CentOS 8 EOL如何切换源</a>  </p><ol><li>sudo vim /etc/yum.repos.d/mongodb-org.repo<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mongodb-org-5.0]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/5.0/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-5.0.asc</span><br></pre></td></tr></table></figure></li><li>sudo dnf install mongodb-org</li><li>sudo systemctl enable mongod –now</li><li>验证安装 <code>mongo</code></li></ol><p>MongoDB配置文件名为mongod.conf，位于/etc目录中。<br>对于生产环境，建议取消对安全性部分的注释并启用授权</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure><p>重启mongod服务<br><code>sudo systemctl restart mongod</code></p><h3 id="1-2-创建mongoDB管理员"><a href="#1-2-创建mongoDB管理员" class="headerlink" title="1.2 创建mongoDB管理员"></a>1.2 创建mongoDB管理员</h3><ol><li>mongo</li><li>use admin</li><li>switched to db admin</li><li>使用userAdminAnyDatabase角色创建新用户<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: &quot;username&quot;, </span><br><span class="line">    pwd: &quot;password&quot;, </span><br><span class="line">    roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>quit()</li><li>mongo -u username -p –authenticationDatabase admin<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MongoDB shell version v5.0.5</span><br><span class="line">Enter password: </span><br></pre></td></tr></table></figure></li><li>use admin</li><li>show users</li></ol><h3 id="1-3-安装express"><a href="#1-3-安装express" class="headerlink" title="1.3 安装express"></a>1.3 安装express</h3><ol><li>npm i express-generator -g</li><li>选择express项目的位置，创建express(serve为项目名)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">express serve</span><br></pre></td></tr></table></figure></li><li>安装框架依赖模块<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd serve</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li>启动/访问测试 <code>npm start</code></li><li>访问服务器地址的3000端口<code>http://59.110.xxx.xx:3000</code></li></ol><h3 id="1-4-连接数据库-模块化"><a href="#1-4-连接数据库-模块化" class="headerlink" title="1.4 连接数据库/模块化"></a>1.4 连接数据库/模块化</h3><ol><li>serve根目录下创建<code>common/config.json</code><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mode为mongodb集合名称</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;db_config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">27017</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dbname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mode&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>npm i mongoose</li><li>创建文件<code>common/db.js</code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="comment">// 导入配置文件</span></span><br><span class="line"><span class="keyword">const</span> configObj = <span class="built_in">require</span>(process.<span class="title function_">cwd</span>() + <span class="string">&quot;/common/config.json&quot;</span>).<span class="property">db_config</span></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="keyword">const</span> db = mongoose.<span class="title function_">createConnection</span>(</span><br><span class="line">    <span class="string">`mongodb://<span class="subst">$&#123;configObj.host&#125;</span>:<span class="subst">$&#123;configObj.port&#125;</span>/<span class="subst">$&#123;configObj.dbname&#125;</span>`</span>,</span><br><span class="line">    &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据库连接失败：&#x27;</span>, configObj); <span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据库连接成功&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">// 声明全局变量  全局都可以用</span></span><br><span class="line"><span class="variable language_">global</span>.<span class="property">db</span> = db</span><br></pre></td></tr></table></figure></li><li>创建文件<code>common/utils.js</code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口响应</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; res      响应对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; code     状态码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; message  提示信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">mixed</span>&#125;  data     响应数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">global</span>.<span class="property">sendJson</span> = <span class="function">(<span class="params">res, state, message, data = <span class="literal">null</span></span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123; state,message,data &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>app.js中引入数据库配置<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在入口文件app.js头部引入</span></span><br><span class="line"><span class="built_in">require</span>(process.<span class="title function_">cwd</span>() + <span class="string">&#x27;/common/db.js&#x27;</span>)</span><br><span class="line"><span class="built_in">require</span>(process.<span class="title function_">cwd</span>() + <span class="string">&#x27;/common/utils.js&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-5-express路由"><a href="#1-5-express路由" class="headerlink" title="1.5 express路由"></a>1.5 express路由</h3></li><li>创建 <code>routes/posts.js</code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req,res,next</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;response data&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure></li><li><code>app.js</code>中导入、激活路由<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> postsRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/posts&#x27;</span>);<span class="comment">//导入</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/postList&#x27;</span>, postsRouter);<span class="comment">//激活</span></span><br></pre></td></tr></table></figure><h3 id="1-6-后端利用MVC-代码分离"><a href="#1-6-后端利用MVC-代码分离" class="headerlink" title="1.6 后端利用MVC,代码分离"></a>1.6 后端利用MVC,代码分离</h3></li><li>创建<code>model/posts.js</code>,获取数据<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> postsModel = db.<span class="title function_">model</span>(<span class="string">&#x27;posts&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">avatar</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125;,</span><br><span class="line">    <span class="attr">categoryId</span>: &#123; <span class="attr">type</span>: <span class="title class_">Number</span> &#125;,</span><br><span class="line">    <span class="attr">createTime</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125;,</span><br><span class="line">    <span class="attr">title</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125;,</span><br><span class="line">    <span class="attr">updateTime</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125;,</span><br><span class="line">    <span class="attr">userId</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125;,</span><br><span class="line">    <span class="attr">userName</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125;,</span><br><span class="line">    <span class="attr">content</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125;,</span><br><span class="line">    <span class="attr">coverImgUrl</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125;,</span><br><span class="line">    <span class="attr">readNum</span>: &#123; <span class="attr">type</span>: <span class="title class_">Number</span> &#125;,</span><br><span class="line">    <span class="attr">zan</span>: &#123; <span class="attr">type</span>: <span class="title class_">Number</span> &#125;,</span><br><span class="line">&#125;, <span class="string">&#x27;posts&#x27;</span>)</span><br><span class="line"><span class="comment">// 贴子列表的查询</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">postList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> postsModel.<span class="title function_">find</span>()</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="keyword">return</span> res &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查询错误：&#x27;</span> + err); <span class="keyword">return</span> <span class="literal">null</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    postList,postsModel</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改<code>controller/posts.js</code>，获取model数据并处理<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; postList &#125; = <span class="built_in">require</span>(process.<span class="title function_">cwd</span>() + <span class="string">&quot;/model/posts&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getPostList</span> = <span class="keyword">async</span> (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> postData = <span class="keyword">await</span> <span class="title function_">postList</span>();</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">postsId</span>)&#123; <span class="comment">//根据贴子id查询</span></span><br><span class="line">        postData = postData.<span class="title function_">filter</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123; </span><br><span class="line">            <span class="keyword">return</span> value.<span class="property">postsId</span> == req.<span class="property">body</span>.<span class="property">postsId</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">title</span>) &#123; <span class="comment">//根据贴子标题查询</span></span><br><span class="line">        postData = postData.<span class="title function_">filter</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123; </span><br><span class="line">            <span class="keyword">return</span> value.<span class="property">title</span>.<span class="title function_">includes</span>(req.<span class="property">body</span>.<span class="property">title</span>) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">categoryId</span>) &#123; <span class="comment">//根据贴子分类查询</span></span><br><span class="line">        postData = postData.<span class="title function_">filter</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123; </span><br><span class="line">            <span class="keyword">return</span> value.<span class="property">categoryId</span> == req.<span class="property">body</span>.<span class="property">categoryId</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">pageNum</span> &amp;&amp; req.<span class="property">body</span>.<span class="property">pageSize</span>) &#123; <span class="comment">//根据页码查询</span></span><br><span class="line">        postData = postData.<span class="title function_">splice</span>( (req.<span class="property">body</span>.<span class="property">pageNum</span>-<span class="number">1</span>)*req.<span class="property">body</span>.<span class="property">pageSize</span>,req.<span class="property">body</span>.<span class="property">pageSize</span> )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sendJson</span>(res, <span class="number">200</span>, <span class="string">&quot;操作成功&quot;</span>, &#123;<span class="attr">total</span>:postData.<span class="property">length</span>,<span class="attr">rows</span>:postData&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    getPostList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改<code>routes/posts.js</code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="comment">// 引入controller/posts.js中的方法</span></span><br><span class="line"><span class="keyword">const</span> &#123; getPostList &#125; = <span class="built_in">require</span>(process.<span class="title function_">cwd</span>() + <span class="string">&#x27;/controller/posts&#x27;</span>)</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, getPostList)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><h3 id="1-7-post接口传参与文件上传"><a href="#1-7-post接口传参与文件上传" class="headerlink" title="1.7 post接口传参与文件上传"></a>1.7 post接口传参与文件上传</h3><h4 id="1-7-1-post传参"><a href="#1-7-1-post传参" class="headerlink" title="1.7.1 post传参"></a>1.7.1 post传参</h4><blockquote><p>上文中的<code>req.body.postsId</code>,<code>req.body.title</code>等<br>拿到的是前端post请求传递的参数，需要引入express中间件</p><p>创建express项目时，也自动下载了body-parser这个包，可直接使用</p></blockquote></li></ol><p><code>npm install body-parser</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js文件头部</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="1-7-2-文件上传"><a href="#1-7-2-文件上传" class="headerlink" title="1.7.2 文件上传"></a>1.7.2 文件上传</h4><blockquote><p>需要文件上传操作时，需要使用multer这个包来获取上传的信息</p></blockquote><p><code>npm install multer</code><br>详细使用参考<a href="https://github.com/expressjs/multer/blob/master/doc/README-zh-cn.md">github文档</a></p><ol><li><code>controller/saveImage.js</code>中<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);<span class="comment">//multer插件</span></span><br><span class="line"><span class="comment">// 磁盘存储</span></span><br><span class="line"><span class="keyword">let</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">    <span class="attr">destination</span>:<span class="function">(<span class="params">req, file, cb</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//存入目标文件夹</span></span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">&#x27;./public/images&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">filename</span>:<span class="function">(<span class="params">req, file, cb</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//重命名</span></span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>-<span class="subst">$&#123;file.originalname&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123; <span class="attr">storage</span>:storage &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getSaveImage</span> =  (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">`http://59.110.124.95:3000/images/<span class="subst">$&#123;req.file.filename&#125;</span>`</span></span><br><span class="line">    <span class="title function_">sendJson</span>(res, <span class="number">200</span>, <span class="string">&quot;上传成功&quot;</span>, <span class="title class_">Object</span>.<span class="title function_">assign</span>(req.<span class="property">file</span>,&#123; url &#125;))</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    getSaveImage,upload</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>routes/posts.js</code>中<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; getSaveImage,upload &#125; = <span class="built_in">require</span>(process.<span class="title function_">cwd</span>() + <span class="string">&#x27;/controller/saveImage&#x27;</span>);</span><br><span class="line"><span class="comment">// 传单个文件</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,upload.<span class="title function_">single</span>(<span class="string">&#x27;file&#x27;</span>), getSaveImage);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>post请求传参与express中间件参考：<a href="https://www.jianshu.com/p/828fdf02de06">Express中间件,bodyparser,multer,formidable区别浅谈</a><h2 id="2、前端设计"><a href="#2、前端设计" class="headerlink" title="2、前端设计"></a>2、前端设计</h2></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毕业设计 </tag>
            
            <tag> mongoDB </tag>
            
            <tag> mongoose </tag>
            
            <tag> linux </tag>
            
            <tag> express </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业设计技术总结 02</title>
      <link href="/posts/364e6ce3/"/>
      <url>/posts/364e6ce3/</url>
      
        <content type="html"><![CDATA[<h2 id="2、mongoose"><a href="#2、mongoose" class="headerlink" title="2、mongoose"></a>2、mongoose</h2><p><a href="https://mongoosejs.com/docs/index.html">mongoose</a>是node.js中操作mongodb的第三方库，它比原始的mongodb更方便，易用</p><h3 id="2-1-连接"><a href="#2-1-连接" class="headerlink" title="2.1 连接"></a>2.1 连接</h3><p><code>mongoose.createConnection</code>第一个参数为mongodb地址,第二个是字符串解析器配置，第三个为回调函数。<code>mongoose.createConnection</code>有很多参数，只有地址为必选，其余都为可选</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// host:域名(本地为localhost)</span></span><br><span class="line"><span class="comment">// port:端口号(mongodb默认为27017)</span></span><br><span class="line"><span class="comment">// dbname:数据库名称 </span></span><br><span class="line"><span class="keyword">const</span> db = mongoose.<span class="title function_">createConnection</span>(</span><br><span class="line">    <span class="string">`mongodb://<span class="subst">$&#123;configObj.host&#125;</span>:<span class="subst">$&#123;configObj.port&#125;</span>/<span class="subst">$&#123;configObj.dbname&#125;</span>`</span>,</span><br><span class="line">    &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据库连接失败&#x27;</span>,configObj); <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据库连接成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="3、express"><a href="#3、express" class="headerlink" title="3、express"></a>3、express</h2><h2 id="4、在vue项目中的应用"><a href="#4、在vue项目中的应用" class="headerlink" title="4、在vue项目中的应用"></a>4、在vue项目中的应用</h2>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毕业设计 </tag>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业设计技术总结 01</title>
      <link href="/posts/af473d59/"/>
      <url>/posts/af473d59/</url>
      
        <content type="html"><![CDATA[<h2 id="1、mongoDB"><a href="#1、mongoDB" class="headerlink" title="1、mongoDB"></a>1、mongoDB</h2><p><a href="https://docs.mongoing.com/">中文文档</a><br>MongoDB是一种面向文档的数据库管理系统，是专为可扩展性，高性能和高可用性而设计的数据库。</p><h3 id="1-1概念"><a href="#1-1概念" class="headerlink" title="1.1概念"></a>1.1概念</h3><ul><li>文档：mongodb将数据以BSON文档的形式存储，每一行数据即为一个文档，文档的值可以是任意BSON类型，或者是嵌套的其他文档，数组和文档数组；相当于关系数据库的行。  </li><li>集合：MongoDB将文档存储在集合中。集合类似于关系数据库中的表。<h3 id="1-2-基本CURD命令"><a href="#1-2-基本CURD命令" class="headerlink" title="1.2 基本CURD命令"></a>1.2 基本CURD命令</h3><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><code>db.collection.insertOne()</code>将单个文档插入集合中。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="property">inventory</span>.<span class="title function_">insertOne</span>(&#123; <span class="comment">//mode为集合名</span></span><br><span class="line">    <span class="attr">item</span>: <span class="string">&quot;canvas&quot;</span>, <span class="attr">qty</span>: <span class="number">100</span>, <span class="attr">tags</span>: [<span class="string">&quot;cotton&quot;</span>], </span><br><span class="line">    <span class="attr">size</span>: &#123; <span class="attr">h</span>: <span class="number">28</span>, <span class="attr">w</span>: <span class="number">35.5</span>, <span class="attr">uom</span>: <span class="string">&quot;cm&quot;</span> &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><code>db.collection.insertMany()</code>可以将多个文档插入一个集合中, 将文档数组传递给该方法<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="property">inventory</span>.<span class="title function_">insertMany</span>([</span><br><span class="line">    &#123; <span class="attr">item</span>: <span class="string">&quot;journal&quot;</span>, <span class="attr">qty</span>: <span class="number">25</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">item</span>: <span class="string">&quot;mat&quot;</span>, <span class="attr">qty</span>: <span class="number">85</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">item</span>: <span class="string">&quot;mousepad&quot;</span>, <span class="attr">qty</span>: <span class="number">25</span> &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><code>db.inventory.find(&#123;&#125;)</code>查询集合中的所有文档<br><code>db.inventory.find(&#123; status: &quot;D&quot; &#125;)</code>查询集合中status等于’D’的文档<br>使用查询操作符：查询集合中status等于’A’或’D’的文档<br><code>db.inventory.find(&#123; status: &#123;$in: [&quot;A&quot;,&quot;D&quot;]&#125; &#125;)</code><br><a href="https://docs.mongodb.com/manual/reference/operator/query/">查询操作符</a><table><thead><tr><th align="center">Name</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$eq</td><td align="center">=</td></tr><tr><td align="center">$gt</td><td align="center">&gt;</td></tr><tr><td align="center">$gte</td><td align="center">&gt;=</td></tr><tr><td align="center">$in</td><td align="center">查询包含数组中任一值的文档</td></tr><tr><td align="center">$nin</td><td align="center">查询不包含数组中任一值的文档</td></tr><tr><td align="center">$lt</td><td align="center">&lt;</td></tr><tr><td align="center">$lte</td><td align="center">&lt;=</td></tr><tr><td align="center">$ne</td><td align="center">!=</td></tr><tr><td align="center">$and</td><td align="center">and</td></tr><tr><td align="center">$or</td><td align="center">or</td></tr><tr><td align="center">$not</td><td align="center">匹配不符合查询表达式的文档</td></tr><tr><td align="center">$nor</td><td align="center">匹配两个查询子句都不符合的文档</td></tr><tr><td align="center">$exists</td><td align="center">匹配具有指定字段的文档</td></tr><tr><td align="center">$type</td><td align="center">如果字段属于指定类型，则选择文档</td></tr></tbody></table></li></ul><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p><code>db.collection.updateOne()</code>更新单个文档</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新集合中item等于paper的第一个文档,将这个文档的status设置为&#x27;p&#x27;</span></span><br><span class="line"><span class="comment">//如果status不存在，则会创建该字段</span></span><br><span class="line">db.<span class="property">inventory</span>.<span class="title function_">updateOne</span>( </span><br><span class="line">    &#123; <span class="attr">item</span>: <span class="string">&quot;paper&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">$set</span>: &#123; <span class="attr">status</span>: <span class="string">&quot;P&quot;</span> &#125; &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>db.collection.updateMany()</code>更新多个文档</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新集合中score&lt;60的所有文档,将这个文档的status设置为&#x27;p&#x27;</span></span><br><span class="line">db.<span class="property">inventory</span>.<span class="title function_">updateMany</span>( </span><br><span class="line">    &#123; <span class="attr">score</span>: &#123; <span class="attr">$lt</span>: <span class="number">60</span> &#125; &#125;,</span><br><span class="line">    &#123; <span class="attr">$set</span>: &#123; <span class="attr">status</span>: <span class="string">&quot;P&quot;</span> &#125; &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><a href="https://docs.mongodb.com/manual/reference/operator/update/">更新操作符</a><br>|     Name     |                     描述                     |<br>| :———-: | :——————————————: |<br>| $currentDate | 将字段的值设置为当前日期，可以是日期或时间戳 |<br>|     $inc     |           将字段的值增加指定的数量           |<br>|     $min     |     仅当指定值小于现有字段值时才更新字段     |<br>|     $max     |     仅当指定值大于现有字段值时才更新字段     |<br>|     $mul     |           将字段的值乘以指定的数量           |<br>|   $rename    |                  重命名字段                  |<br>|     $set     |              设置文档中字段的值              |<br>|    $unset    |            从文档中删除指定的字段            |<br><code>db.collection.replaceOne()</code>替换<code>_id</code>字段以外的文档的全部内容</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新集合中item等于paper的第一个文档,将这个文档除_id字段以外的所有字段替换成第二个参数</span></span><br><span class="line">db.<span class="property">inventory</span>.<span class="title function_">replaceOne</span>(</span><br><span class="line">   &#123; <span class="attr">item</span>: <span class="string">&quot;paper&quot;</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">item</span>: <span class="string">&quot;paper&quot;</span>, <span class="attr">instock</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p><code>db.collection.deleteMany(&#123;&#125;) </code>删除所有文档<br><code>db.collection.deleteMany(&#123; status : &quot;A&quot; &#125;)</code>删除所有status等于”A”的文档<br><code>db.collection.deleteOne( &#123; status: &quot;D&quot; &#125; )</code>删除status等于”D”的第一个文档</p>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毕业设计 </tag>
            
            <tag> mongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/posts/518e617c/"/>
      <url>/posts/518e617c/</url>
      
        <content type="html"><![CDATA[<h2 id="1-git命令"><a href="#1-git命令" class="headerlink" title="1.git命令"></a>1.git命令</h2><p><img src="https://img.hitagi.site/202211142245388.jpg" alt="git命令大全"></p><h2 id="2-常用命令及原理"><a href="#2-常用命令及原理" class="headerlink" title="2. 常用命令及原理"></a>2. 常用命令及原理</h2><p>HEAD，它始终指向当前所处分支的最新的提交点。你所处的分支变化了，或者产生了新的提交点，HEAD就会跟着改变。</p><ol><li><p>init</p><p>初始化仓库</p><p><code>git init</code></p></li><li><p>add</p><p>添加当前目录的所有文件到暂存区</p><p><code>git add filename</code></p></li><li><p>commit</p><p>将暂存区的内容提交到本地仓库</p><p><code>git commit -m &quot;explanation&quot;</code></p></li><li><p>branch</p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td><strong>git branch</strong></td><td><strong>列出所有本地分支</strong></td></tr><tr><td><strong>git branch -r</strong></td><td><strong>列出所有远程分支</strong></td></tr><tr><td><strong>git branch -a</strong></td><td><strong>列出所有本地分支和远程分支</strong></td></tr><tr><td><strong>git branch [branchName]</strong></td><td><strong>新建一个分支，但依然停留在当前分支</strong></td></tr><tr><td><strong>git checkout -b [branchName]</strong></td><td><strong>新建一个分支，并切换到该分支</strong></td></tr><tr><td><strong>git checkout [branchName]</strong></td><td><strong>切换到指定分支，并更新工作区</strong></td></tr><tr><td><strong>git branch -d [branchName]</strong></td><td><strong>删除分支</strong></td></tr><tr><td><strong>git push origin –delete [branchName]</strong></td><td><strong>删除远程分支</strong></td></tr></tbody></table></li><li><p>push</p><p>上传本地仓库分支到远程仓库分支，实现同步</p><table><thead><tr><th align="left">命令</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><strong>git push [repository url] [branch]</strong></td><td align="left"><strong>上传本地指定分支到远程仓库</strong></td></tr><tr><td align="left"><strong>git push [repository url] –force</strong></td><td align="left"><strong>强行推送当前分支到远程仓库，即使有冲突</strong></td></tr><tr><td align="left"><strong>git push [repository url] –all</strong></td><td align="left"><strong>推送所有分支到远程仓库</strong></td></tr></tbody></table></li><li><p>clone</p><p>将远程仓库下载到本地</p><p><code>git clone [repository url]</code></p></li><li><p>remote</p><p><code>git remote</code>命令列出所有远程主机。</p><p><code>git remote -v</code>使用<code>-v</code>选项，可以参看远程主机的网址</p></li><li><p>fetch</p><p>远程主机的版本库有了更新，需要将这些更新取回本地，这时就要用到</p><p><code>git fetch [repository url]</code></p></li><li><p>merge</p><p><code>git merge [branch]</code>合并指定分支到当前分支</p></li><li><p>pull</p><p><code>git pull</code>命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。远程分支是与当前分支合并</p><p><code>git pull origin &lt;远程分支名&gt;</code></p></li><li><p>其他命令</p></li></ol><table><thead><tr><th><strong>git status</strong></th><th><strong>显示有变更的文件</strong></th></tr></thead><tbody><tr><td><strong>git log</strong></td><td><strong>显示当前分支的版本历史</strong></td></tr><tr><td><strong>git diff</strong></td><td><strong>显示暂存区和工作区的差异</strong></td></tr><tr><td><strong>git diff HEAD</strong></td><td><strong>显示工作区与当前分支最新commit之间的差异</strong></td></tr><tr><td><strong>git cherry-pick [commit]</strong></td><td><strong>选择一个commit，合并进当前分支</strong></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础 05</title>
      <link href="/posts/10fa3efe/"/>
      <url>/posts/10fa3efe/</url>
      
        <content type="html"><![CDATA[<h2 id="1-vue父子组件传值"><a href="#1-vue父子组件传值" class="headerlink" title="1. vue父子组件传值"></a>1. vue父子组件传值</h2><h3 id="1-1-父传子"><a href="#1-1-父传子" class="headerlink" title="1.1 父传子"></a>1.1 父传子</h3><p>步骤简述：</p><ol><li>子组件中引入props，用来接受父组件数据</li><li>父组件里的子组件标签中绑定父组件的数据</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">son</span> <span class="attr">:message</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        这是父组件传进来的：&#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">devtools</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;父组件的数据&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">son</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">&#x27;#son&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">message</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>props内的写法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    // 规定了父组件只能传字符串类型</span><br><span class="line">    prop1: String,</span><br><span class="line">    // 可以设置多个类型，可以传Number也可以传String</span><br><span class="line">    prop2: [Number, String],</span><br><span class="line">    prop3: &#123;</span><br><span class="line">        // 设置类型</span><br><span class="line">        type: Array,</span><br><span class="line">// 设为必填字段</span><br><span class="line">required: true,</span><br><span class="line">        // 设置默认值的时候必须使用函数，原理和data必须使用函数是一样的</span><br><span class="line">        default: function () &#123;</span><br><span class="line">            return [&#123;</span><br><span class="line">                name: &#x27;这个一个默认的名字&#x27;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-子传父"><a href="#1-2-子传父" class="headerlink" title="1.2 子传父"></a>1.2 子传父</h3><p>步骤简述：</p><ol><li>子组件中通过某种方法触发<code>$emit</code>传值接口方法，<code>$emit</code>参数为<code>自定义传值方法名</code>，后面的是要传的子组件中的数据</li><li>在父组件里的子组件标签中通过``@自定义传值方法名<code>绑定父组件中的</code>接收方法<code>，</code>接收方法`中的参数即为所传的子组件的值</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>这里是父组件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;receivechild1&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;receivechild2&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">son</span> @<span class="attr">toparents</span>=<span class="string">&#x27;getchildmsg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;childClick&#x27;</span>&gt;</span>点击将子组件的值传给父组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">devtools</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">receivechild1</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">receivechild2</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//参数数量根据子组件$emit方法传的数据个数决定</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">getchildmsg</span>(<span class="params">data1, data2</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">receivechild1</span> = data1;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">receivechild2</span> = data2;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">son</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">&#x27;#son&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">childmsg1</span>: <span class="string">&#x27;子组件数据1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">childmsg2</span>: <span class="string">&#x27;子组件数据2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">childClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;toparents&#x27;</span>, <span class="variable language_">this</span>.<span class="property">childmsg1</span>, <span class="variable language_">this</span>.<span class="property">childmsg2</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-ref的使用"><a href="#2-ref的使用" class="headerlink" title="2. ref的使用"></a>2. ref的使用</h2><p>给DOM节点和组件加上ref属性，用于获取DOM节点和组件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;signin&#x27;</span> <span class="attr">ref</span>=<span class="string">&quot;signinBtn&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">signin</span> <span class="attr">ref</span>=<span class="string">&quot;signinquote&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">signin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;signin&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">signInstruction</span>: <span class="string">&#x27;signin&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">signin</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">signInstruction</span> = <span class="string">&quot;signin&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">signinquote</span>.<span class="property">signMsg</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">signinBtn</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">signin</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">&#x27;#signin&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">signMsg</span>: <span class="string">&#x27;开始登录&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-vue路由"><a href="#3-vue路由" class="headerlink" title="3. vue路由"></a>3. vue路由</h2><p>路由的使用步骤</p><ol><li><p>引入js文件，这个js需要放在vue的js后面</p></li><li><p>创建路由new VueRouter(),接受的参数是一个对象</p></li><li><p>在实例化的对象里配置属性routes:[],这个数组里的对象包含path属性和component属性</p></li><li><p>path属性是url的地址,component属性就是显示的组件（传组件的对象）</p></li><li><p>创建的路由需要和vue实例关联一下</p></li><li><p>路由到的组件显示的位置<code>&lt;router-view&gt;&lt;/router-view&gt;</code></p></li></ol><h3 id="3-1-路由跳转"><a href="#3-1-路由跳转" class="headerlink" title="3.1 路由跳转"></a>3.1 路由跳转</h3><ol><li><p>引入router-link标签，并设置to属性</p></li><li><p> 默认编译成a标签，可以通过tag设置包裹标签</p></li></ol><h4 id="3-1-2-编程时跳转"><a href="#3-1-2-编程时跳转" class="headerlink" title="3.1.2 编程时跳转"></a>3.1.2 编程时跳转</h4><ul><li>this.$router可以进行函数式跳转  </li><li>this.$router.push() 跳转到指定页面  </li><li>this.$router.replace() 这个会替换掉当前界面，当前界面就会从页面栈里被移除  </li><li>this.$router.back() 返回上一级  </li><li>this.$router.go() 跳转到指定的界面  </li></ul><h3 id="3-2-路由重定向"><a href="#3-2-路由重定向" class="headerlink" title="3.2 路由重定向"></a>3.2 路由重定向</h3><p>在<code>new VueRouter()</code>对象的<code>routes</code>属性中，使用<code>redirect</code>进行重定向</p><h3 id="3-3-路由高亮"><a href="#3-3-路由高亮" class="headerlink" title="3.3 路由高亮"></a>3.3 路由高亮</h3><p>通过默认<code>router-link-active</code>类名设置点击后的路由链接样式</p><h3 id="3-4-参数定义"><a href="#3-4-参数定义" class="headerlink" title="3.4 参数定义"></a>3.4 参数定义</h3><p>两种路由传参的办法，query传参和params传参</p><ol><li><p>通过在<code>&lt;router-link&gt;&lt;/router-link&gt;</code>的to属性中直接 ? 拼接的方法。通过在绑定to属性传对象，例如<code>:to=&quot;&#123;path:&#39;/mine&#39;,query:&#123;id:7&#125;&#125;&quot;</code>。通过<code>$route.query.参数名</code>来取到</p></li><li><p>通过在routes列表中给路由添加name属性并在path后拼接<code>/:变量名</code>，在<code>&lt;router-link&gt;&lt;/router-link&gt;</code>中给<code>to</code>绑定<code>&#123;name:&#39;register&#39;,params:&#123;id:6&#125;&#125;</code>。通过<code>$route.params.参数名</code>来取到</p></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>去登陆<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;register&#x27;,params:&#123;id:6&#125;&#125;&quot;</span>&gt;</span>去注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/mine&#x27;,query:&#123;id:7&#125;&#125;&quot;</span>&gt;</span> 去个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>已有帐号?来登录吧<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;register&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>呀嘞呀嘞，还没帐号？来注册吧<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;mine&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>yokoso，这里是个人中心<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> login = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;#login&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> register = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;#register&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> mine = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;#mine&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 重定向</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">redirect</span>: <span class="string">&#x27;/index&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">path</span>: <span class="string">&#x27;/index&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">component</span>: app,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">component</span>: login,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">path</span>: <span class="string">&#x27;/register/:id&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;register&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">component</span>: register,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">path</span>: <span class="string">&#x27;/mine&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">component</span>: mine,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        router,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-路由嵌套"><a href="#3-5-路由嵌套" class="headerlink" title="3.5 路由嵌套"></a>3.5 路由嵌套</h3><p>使用路由嵌套后必须在父组件中写入<code>&lt;router-view&gt;&lt;/router-view&gt;</code>来给子组件预留位置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/travel&#x27;, component: TravelPage,</span><br><span class="line">    children: [</span><br><span class="line">      &#123; path: &#x27;/travel/america&#x27;, component: TravelAmericaPage &#125;,</span><br><span class="line">      &#123; path: &#x27;/travel/china&#x27;, component: TravelChinaPage&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/about&#x27;, component: AboutPage</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="3-6-命名视图"><a href="#3-6-命名视图" class="headerlink" title="3.6 命名视图"></a>3.6 命名视图</h3><p>命名视图可以做到一个地址对应多个组件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;my-container&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&#x27;sidebar&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&#x27;main&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-watch和computed"><a href="#4-watch和computed" class="headerlink" title="4. watch和computed"></a>4. watch和computed</h2><p><code>watch</code>侦听属性：当data中的某个数据需要随其他数据的变化而变化时，更通用的方法是使用watch侦听器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    firstName: function (val) &#123;</span><br><span class="line">      this.fullName = val + &#x27; &#x27; + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: function (val) &#123;</span><br><span class="line">      this.fullName = this.firstName + &#x27; &#x27; + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>computed</code>计算属性：当需要对data的数据进行复杂逻辑操作的时候，应当使用computed属性</p><p>在computed里计算的属性不能生命在data中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  Name: function () &#123;</span><br><span class="line">//默认使用computed只有getter方法</span><br><span class="line">        return this.firstName + &#x27; &#x27; + this.lastName</span><br><span class="line">      &#125;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    // getter</span><br><span class="line">    get: function () &#123;</span><br><span class="line">      return this.firstName + &#x27; &#x27; + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    // setter</span><br><span class="line">    set: function (newValue) &#123;</span><br><span class="line">      var names = newValue.split(&#x27; &#x27;)</span><br><span class="line">      this.firstName = names[0]</span><br><span class="line">      this.lastName = names[names.length - 1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="method、computed和watch的区别"><a href="#method、computed和watch的区别" class="headerlink" title="method、computed和watch的区别"></a>method、computed和watch的区别</h4><ol><li><p><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用,使用的时候不加（）；</p></li><li><p><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</p></li><li><p><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是computed和methods的结合体</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础 04</title>
      <link href="/posts/67fd0e68/"/>
      <url>/posts/67fd0e68/</url>
      
        <content type="html"><![CDATA[<h2 id="1-vue组件"><a href="#1-vue组件" class="headerlink" title="1. vue组件"></a>1. vue组件</h2><h3 id="1-1-组件定义的四种方式"><a href="#1-1-组件定义的四种方式" class="headerlink" title="1.1 组件定义的四种方式"></a>1.1 组件定义的四种方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foot</span>&gt;</span><span class="tag">&lt;/<span class="name">foot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">signin</span>&gt;</span><span class="tag">&lt;/<span class="name">signin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">account</span>&gt;</span><span class="tag">&lt;/<span class="name">account</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">demo</span>&gt;</span><span class="tag">&lt;/<span class="name">demo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- script标签种 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&quot;tmpl&quot;</span> <span class="attr">type</span>=<span class="string">&quot;x-template&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span> | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模板标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;tmp2&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: yellowgreen;&quot;</span>&gt;</span>模板呀哈罗<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 第一种</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> foot = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;footer style=&quot;color: blue;&quot;&gt;友情链接&lt;/footer&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;foot&#x27;</span>, foot);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 第二种</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;signin&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;div style=&quot;color: violet;&quot;&gt;登录&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 第三种（script标签种）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;account&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;#tmpl&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 第四种（模板标签）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;demo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;#tmp2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-局部子组件和组件数据及方法"><a href="#1-3-局部子组件和组件数据及方法" class="headerlink" title="1.3 局部子组件和组件数据及方法"></a>1.3 局部子组件和组件数据及方法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;tmp1&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>东海帝皇<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 局部子组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">template</span>: <span class="string">&#x27;#tmp1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">msg</span>: <span class="string">&#x27;这是子组件数据,要写在return里&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-组件切换"><a href="#1-4-组件切换" class="headerlink" title="1.4 组件切换"></a>1.4 组件切换</h3><p>使用component标签和is来实现组件的切换</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;signInstruction=&quot;signin&quot;&#x27;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;signInstruction=&quot;signup&quot;&#x27;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;signInstruction&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;signin&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;signup&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">devtools</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">signInstruction</span>: <span class="string">&#x27;signin&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">signin</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">&#x27;#signin&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">signup</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">&#x27;#signup&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-4-1-动画效果"><a href="#1-4-1-动画效果" class="headerlink" title="1.4.1 动画效果"></a>1.4.1 动画效果</h4><p>和之前动画的使用方式一样，把要切换的组件用transition包裹起来就行了。</p><p>需要指定动画的切换顺序，希望先离开，在进入可以设置transition的mode</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;isLogin?&#x27;user-info&#x27;:&#x27;login&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-slot插槽"><a href="#2-slot插槽" class="headerlink" title="2. slot插槽"></a>2. slot插槽</h2><p>想要在父组件的子组件标签内插入内容，需要在子组件模板中引入slot插槽；</p><p>插槽分为具名插槽和无名插槽；具名插槽内容需要写在template标签内，属性为#slot名</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">son</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>具名的插槽<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>无名的插槽<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;slotname&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">son</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">&#x27;#son&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础 03</title>
      <link href="/posts/f9999bcb/"/>
      <url>/posts/f9999bcb/</url>
      
        <content type="html"><![CDATA[<h2 id="1-生命周期"><a href="#1-生命周期" class="headerlink" title="1. 生命周期"></a>1. 生命周期</h2><p>生命周期就是vue实例在创建、运行、销毁的整体过程</p><h3 id="1-1-生命周期钩子函数"><a href="#1-1-生命周期钩子函数" class="headerlink" title="1.1 生命周期钩子函数"></a>1.1 生命周期钩子函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&#x27;app&#x27;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model:value=&#x27;msg&#x27; @change=&#x27;console.log(msg)&#x27;&gt;</span><br><span class="line">    &lt;div v-for=&#x27;(item,index) in list&#x27;&gt;&#123;&#123;item&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            msg: &#x27;你想成为怎样的人&#x27;,</span><br><span class="line">            list: [&#x27;异世界迷宫黑心企业&#x27;, &#x27;sonnyBoy&#x27;, &#x27;小林家的龙女仆S&#x27;],</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line">            console.log(&#x27;此时vue初始化，但是实例化对象没有内容；主要用于页面重定向&#x27;);</span><br><span class="line">            console.log(this.msg);</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            console.log(&#x27;vue初始化完成，已经加载了内容、方法等;主要用于接口与初始化&#x27;);</span><br><span class="line">            console.log(this.msg);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount() &#123;</span><br><span class="line">            console.log(&#x27;虚拟DOM在内存中创建完毕，但未渲染到页面上&#x27;);</span><br><span class="line">            // debugger;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            console.log(&#x27;虚拟DOM已渲染到浏览器页面；在此之后可以操作页面上的DOM&#x27;);</span><br><span class="line">            console.log(this.list);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate() &#123;</span><br><span class="line">            console.log(&#x27;vue内容更新之前的执行的钩子函数；只有更新动作能够执行多次&#x27;);</span><br><span class="line">            console.log(this.msg);</span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line">            console.log(&#x27;vue内容更新之后执行的钩子函数&#x27;);</span><br><span class="line">            console.log(this.msg);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy() &#123;</span><br><span class="line">            console.log(&#x27;vue销毁之前执行的钩子函数；定时器等监听动作的清除&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed() &#123;</span><br><span class="line">            console.log(&#x27;vue销毁之后执行的钩子函数&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-vue-resource"><a href="#2-vue-resource" class="headerlink" title="2. vue-resource"></a>2. vue-resource</h2><p>vue-resource是依赖于vue的接口请求方法，是在vue1.0版本支持的方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//get请求</span></span><br><span class="line"><span class="comment">//一个参数：地址；传参需要在地址后用？拼接</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;http://wk.myhope365.com/weChat/applet/course/banner/list?number=3&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//post请求</span></span><br><span class="line"><span class="comment">//此时服务器要求的请求体格式为form-Data</span></span><br><span class="line"><span class="comment">//三个参数1.url 2.对象，内容为请求体 3.&#123; emulateJSON: true &#125;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&#x27;http://wk.myhope365.com/weChat/applet/course/list/type&#x27;</span>,</span><br><span class="line">        &#123; <span class="attr">type</span>: <span class="string">&#x27;free&#x27;</span>, <span class="attr">pageNum</span>: <span class="number">1</span>, <span class="attr">pageSize</span>: <span class="number">10</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">emulateJSON</span>: <span class="literal">true</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// console.log(res);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//post请求</span></span><br><span class="line"><span class="comment">//此时服务器要求的请求体格式为JSON</span></span><br><span class="line"><span class="comment">//两个参数1.url 2.JSON对象</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&#x27;http://wk.myhope365.com/weChat/applet/subject/list&#x27;</span>,</span><br><span class="line">        &#123; <span class="string">&#x27;enable&#x27;</span>: <span class="number">1</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="3-axios"><a href="#3-axios" class="headerlink" title="3. axios"></a>3. axios</h2><p>axios与vue无关，它是基于 Promise 的 HTTP 库</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//get请求</span></span><br><span class="line"><span class="comment">//一个参数：url；参时在url后？拼接</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;http://wk.myhope365.com/weChat/applet/course/banner/list?number=4&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">rollImgList</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createFormat</span>(<span class="params">type, pNum, pSize</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> format = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">        format.<span class="title function_">append</span>(<span class="string">&quot;type&quot;</span>, type);</span><br><span class="line">        format.<span class="title function_">append</span>(<span class="string">&quot;pageNum&quot;</span>, pNum);</span><br><span class="line">        format.<span class="title function_">append</span>(<span class="string">&quot;pageSize&quot;</span>, pSize);</span><br><span class="line">        <span class="keyword">return</span> format;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//post请求</span></span><br><span class="line">    <span class="comment">//两个参数：1.url 2.请求体需要为form—Data时，返回new FormData()对象传入</span></span><br><span class="line">    axios.<span class="title function_">post</span>(<span class="string">&#x27;http://wk.myhope365.com/weChat/applet/course/list/type&#x27;</span>,</span><br><span class="line">        <span class="title function_">createFormat</span>(<span class="string">&quot;free&quot;</span>, <span class="number">1</span>, <span class="number">10</span>)).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">freeCourseList</span> = res.<span class="property">data</span>.<span class="property">rows</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="4-动画"><a href="#4-动画" class="headerlink" title="4.动画"></a>4.动画</h2><h3 id="4-1-transition实现动画"><a href="#4-1-transition实现动画" class="headerlink" title="4.1 transition实现动画"></a>4.1 transition实现动画</h3><p>首先创建新标签transition；没有name属性是默认使用以下类名控制动画效果，有name属性时，用name名替换<code>v</code></p><p><a id="vue-transition">各状态讲解</a></p><ol><li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li><li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li><li><code>v-enter-to</code>：定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 <code>v-enter</code> 被移除)，在过渡/动画完成之后移除。</li><li><code>v-leave</code>：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li><li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li><li><code>v-leave-to</code>：定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 <code>v-leave</code> 被删除)，在过渡/动画完成之后移除。</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.fade-enter</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.fade-leave-to</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.fade-enter-active</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.fade-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: all <span class="number">0.2s</span> ease;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;isshow = !isshow&#x27;</span>&gt;</span>动起来<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&#x27;fade&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&#x27;isshow&#x27;</span>&gt;</span>呀嘞呀嘞<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isshow</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-使用第三方animate库实现动画"><a href="#4-2-使用第三方animate库实现动画" class="headerlink" title="4.2 使用第三方animate库实现动画"></a>4.2 使用第三方animate库实现动画</h3><p><a href="https://animate.style/">Animate.css官方网站</a></p><blockquote><p>引入线上地址</p><p>3.0版本</p><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" /><p>4.0版本</p><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.6.2/animate.min.css" /></blockquote><h4 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1. 使用方法"></a>1. 使用方法</h4><p>仅需要引入类名即可4.0版本要求要有<code>animate__</code>前缀</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.0版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;isshow4=!isshow4&#x27;</span>&gt;</span>animate版本4，开！<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&#x27;isshow4&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;animate__animated animate__bounce&quot;</span>&gt;</span>An animated element<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.0版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;isshow3=!isshow3&#x27;</span>&gt;</span>animate版本3，开！<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&#x27;isshow3&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;animated fadeOutRight&quot;</span>&gt;</span>An animated element<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isshow4</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isshow3</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-动画钩子函数"><a href="#2-动画钩子函数" class="headerlink" title="2. 动画钩子函数"></a>2. 动画钩子函数</h4><p>个人觉得用处不大，简单说就是在动画各个执行阶段执行的函数。<a href="#vue-transition">对照这个理解</a></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 进入时 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> @<span class="attr">before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span> @<span class="attr">enter</span>=<span class="string">&quot;enter&quot;</span> @<span class="attr">after-</span><span class="attr">enter</span>=<span class="string">&quot;afterEnter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isshow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;show&quot;</span>&gt;</span>进入<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> @<span class="attr">before-leave</span>=<span class="string">&quot;beforeLeave&quot;</span> @<span class="attr">leave</span>=<span class="string">&quot;leave&quot;</span> @<span class="attr">after-leave</span>=<span class="string">&quot;afterLeave&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isshow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;show&quot;</span>&gt;</span>离开<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isshow</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">beforeEnter</span>(<span class="params">el</span>) &#123; <span class="comment">// 动画进入之前的回调</span></span></span><br><span class="line"><span class="language-javascript">                el.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&#x27;translateX(500px)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">enter</span>(<span class="params">el</span>) &#123; <span class="comment">// 动画进入时的回调</span></span></span><br><span class="line"><span class="language-javascript">                el.<span class="property">offsetWidth</span>;</span></span><br><span class="line"><span class="language-javascript">                el.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&#x27;translateX(0px)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-v-for列表的过度"><a href="#4-3-v-for列表的过度" class="headerlink" title="4.3 v-for列表的过度"></a>4.3 v-for列表的过度</h3><p>使用transition-group标签；tag属性会将transition-group渲染成tag指定的html标签</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.list-enter</span>,</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.list-leave-to</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">10px</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.list-enter-active</span>,</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.list-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;txt&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, i) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">txt</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">list</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">txt</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">txt</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础 02</title>
      <link href="/posts/8e9eab5d/"/>
      <url>/posts/8e9eab5d/</url>
      
        <content type="html"><![CDATA[<h2 id="1-过滤器"><a href="#1-过滤器" class="headerlink" title="1. 过滤器"></a>1. 过滤器</h2><p>过滤器可被用在插值表达式中和v-bind:中</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 变量 | 过滤器名 --&gt;</span></span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;rawId | formatId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>过滤器可分为全局过滤器和私有过滤器器</p><p>全局过滤器所有vue实例对象都能引用；私有过滤器只有在自己的实例化vue对象中能引用</p><ul><li>全局过滤器(格式化时间)</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#123;item.<span class="property">time</span> | <span class="title function_">dataFormat</span>(<span class="string">&#x27;YYYY/MM/DD&#x27;</span>)&#125;&#125;</span><br><span class="line"><span class="comment">//带参数的过滤器</span></span><br><span class="line"><span class="comment">//data是引用过滤器的变量</span></span><br><span class="line"><span class="comment">//format的实参是过滤器dataFormat(&#x27;YYYY/MM/DD&#x27;)传的字符串</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;dataFormat&#x27;</span>, <span class="keyword">function</span> (<span class="params">data, format</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="title class_">Date</span>(data);</span><br><span class="line">    <span class="keyword">var</span> y = dt.<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="keyword">var</span> m = (dt.<span class="title function_">getMonth</span>() + <span class="number">1</span>).<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> d = dt.<span class="title function_">getDate</span>().<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> format.<span class="title function_">replace</span>(<span class="string">&#x27;YYYY&#x27;</span>, y).<span class="title function_">replace</span>(<span class="string">&#x27;MM&#x27;</span>, m).<span class="title function_">replace</span>(<span class="string">&#x27;DD&#x27;</span>, d);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>私有过滤器</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">filters</span>: &#123;</span><br><span class="line">        <span class="title function_">dateFormat</span>(<span class="params">data, format</span>) &#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-键盘修饰符"><a href="#2-键盘修饰符" class="headerlink" title="2. 键盘修饰符"></a>2. 键盘修饰符</h2><p>Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符</p><ul><li>使用键盘码</li></ul><p><code>&lt;button v-on:keyup.65=&quot;change&quot;&gt;&lt;/button&gt;</code></p><p>键盘码对照表</p><table><thead><tr><th><strong>字母和数字键的键码值(keyCode)</strong></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>按键</td><td>键码</td><td>按键</td><td>键码</td><td>按键</td><td>键码</td><td>按键</td><td>键码</td></tr><tr><td>A</td><td>65</td><td>J</td><td>74</td><td>S</td><td>83</td><td>1</td><td>49</td></tr><tr><td>B</td><td>66</td><td>K</td><td>75</td><td>T</td><td>84</td><td>2</td><td>50</td></tr><tr><td>C</td><td>67</td><td>L</td><td>76</td><td>U</td><td>85</td><td>3</td><td>51</td></tr><tr><td>D</td><td>68</td><td>M</td><td>77</td><td>V</td><td>86</td><td>4</td><td>52</td></tr><tr><td>E</td><td>69</td><td>N</td><td>78</td><td>W</td><td>87</td><td>5</td><td>53</td></tr><tr><td>F</td><td>70</td><td>O</td><td>79</td><td>X</td><td>88</td><td>6</td><td>54</td></tr><tr><td>G</td><td>71</td><td>P</td><td>80</td><td>Y</td><td>89</td><td>7</td><td>55</td></tr><tr><td>H</td><td>72</td><td>Q</td><td>81</td><td>Z</td><td>90</td><td>8</td><td>56</td></tr><tr><td>I</td><td>73</td><td>R</td><td>82</td><td>0</td><td>48</td><td>9</td><td>57</td></tr></tbody></table><hr><table><thead><tr><th><strong>数字键盘上的键的键码值(keyCode)</strong></th><th><strong>功能键键码值(keyCode)</strong></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>按键</td><td>键码</td><td>按键</td><td>键码</td><td>按键</td><td>键码</td><td>按键</td><td>键码</td></tr><tr><td>0</td><td>96</td><td>8</td><td>104</td><td>F1</td><td>112</td><td>F7</td><td>118</td></tr><tr><td>1</td><td>97</td><td>9</td><td>105</td><td>F2</td><td>113</td><td>F8</td><td>119</td></tr><tr><td>2</td><td>98</td><td>*</td><td>106</td><td>F3</td><td>114</td><td>F9</td><td>120</td></tr><tr><td>3</td><td>99</td><td>+</td><td>107</td><td>F4</td><td>115</td><td>F10</td><td>121</td></tr><tr><td>4</td><td>100</td><td>Enter</td><td>108</td><td>F5</td><td>116</td><td>F11</td><td>122</td></tr><tr><td>5</td><td>101</td><td>-</td><td>109</td><td>F6</td><td>117</td><td>F12</td><td>123</td></tr><tr><td>6</td><td>102</td><td>.</td><td>110</td><td></td><td></td><td></td><td></td></tr><tr><td>7</td><td>103</td><td>/</td><td>111</td><td></td><td></td><td></td><td></td></tr></tbody></table><hr><table><thead><tr><th><strong>控制键键码值(keyCode)</strong></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>按键</td><td>键码</td><td>按键</td><td>键码</td><td>按键</td><td>键码</td><td>按键</td><td>键码</td></tr><tr><td>BackSpace</td><td>8</td><td>Esc</td><td>27</td><td>Right Arrow</td><td>39</td><td>-_</td><td>189</td></tr><tr><td>Tab</td><td>9</td><td>Spacebar</td><td>32</td><td>Dw Arrow</td><td>40</td><td>.&gt;</td><td>190</td></tr><tr><td>Clear</td><td>12</td><td>Page Up</td><td>33</td><td>Insert</td><td>45</td><td>/?</td><td>191</td></tr><tr><td>Enter</td><td>13</td><td>Page Down</td><td>34</td><td>Delete</td><td>46</td><td>`~</td><td>192</td></tr><tr><td>Shift</td><td>16</td><td>End</td><td>35</td><td>Num Lock</td><td>144</td><td>[{</td><td>219</td></tr><tr><td>Control</td><td>17</td><td>Home</td><td>36</td><td>;:</td><td>186</td><td>/|</td><td>220</td></tr><tr><td>Alt</td><td>18</td><td>Left Arrow</td><td>37</td><td>=+</td><td>187</td><td>]}</td><td>221</td></tr><tr><td>Cape Lock</td><td>20</td><td>Up Arrow</td><td>38</td><td>,&lt;</td><td>188</td><td>‘“</td><td>222</td></tr></tbody></table><ul><li>使用别名</li></ul><p><code>v-on:keyup.enter</code></p><p><code>.enter</code>、<code>.tab</code>、<code>.delete</code> (“删除”和“退格”键)、<code>.esc</code>、<code>.space</code></p><p><code>.up</code>、<code>.down</code>、<code>.left</code>、<code>.right</code></p><ul><li>自定义按键别名</li></ul><p><code>Vue.config.keyCodes.f1 = 112</code></p><p>新版可以直接监听键盘按键</p><p>监听键盘a按下：<code>v-on:keyup.a</code></p><h2 id="3-自定义指令"><a href="#3-自定义指令" class="headerlink" title="3. 自定义指令"></a>3. 自定义指令</h2><p>directive</p><p>自定义指令的三个钩子方法</p><ul><li><p>bind 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</p></li><li><p>inserted 这个元素已经渲染到界面上之后执行</p></li><li><p>update 当元素有更新的时候执行</p></li></ul><p>钩子函数的一些参数</p><p>el：指令所绑定的元素，可以用来直接操作 DOM 。</p><p>binding：一个对象，包含以下属性：</p><p>​    name：指令名，不包括 v- 前缀。</p><p>​    value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。</p><p>​    oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated钩子中可用</p><p>自定义指令也分为全局自定义指令和私有自定义指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 注册一个全局自定义指令 `v-focus`</span><br><span class="line">Vue.directive(&#x27;focus&#x27;, &#123;</span><br><span class="line">  bind(el,binding)&#123;&#125;</span><br><span class="line">  // 当被绑定的元素插入到 DOM 中时……</span><br><span class="line">  inserted(el) &#123;</span><br><span class="line">    // 聚焦元素</span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el: &#x27;#app&#x27;,</span><br><span class="line">    directives: &#123;</span><br><span class="line">        focus: &#123;</span><br><span class="line">            inserted(el) &#123;</span><br><span class="line">                el.focus();</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础 01</title>
      <link href="/posts/1797fae7/"/>
      <url>/posts/1797fae7/</url>
      
        <content type="html"><![CDATA[<h2 id="1-引用"><a href="#1-引用" class="headerlink" title="1. 引用"></a>1. 引用</h2><p>Vue是一套用于构建用户界面的<strong>渐进式框架</strong>。</p><p>线上引用<code>https://npm.elemecdn.com/vue@2.6.14/dist/vue.min.js</code></p><p>vue基础模板</p><h2 id="2-插值表达式、v-cloak、v-text和v-html"><a href="#2-插值表达式、v-cloak、v-text和v-html" class="headerlink" title="2. 插值表达式、v-cloak、v-text和v-html"></a>2. 插值表达式、v-cloak、v-text和v-html</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- view层 --&gt;</span><br><span class="line">    &lt;div id=&#x27;app&#x27;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //view model层</span><br><span class="line">    let vm = new Vue(&#123;</span><br><span class="line">        //vue控制区域</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        //需要渲染的数据</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        //引用的方法;model层</span><br><span class="line">        methods: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>&#123;&#123;&#125;&#125;</code>是插值表达式，用来渲染页面元素</p><p>v-cloak：隐藏页面预加载内容，防止页面闪烁</p><p>v-text：指定元素标签的文本内容</p><p>v-html：会将元素标签的内容解析为html</p><h2 id="3-v-bind和v-on"><a href="#3-v-bind和v-on" class="headerlink" title="3. v-bind和v-on"></a>3. v-bind和v-on</h2><p><code>v-bind</code>绑定元素属性，将这个元素节点的 <code>title</code> （属性名与属性值）和 Vue 实例中的 <code>message</code> （属性名，属性值） 保持一致</p><p><code>v-bind</code>简写为：</p><p><code>v-on</code>添加事件监听器，通过它调用在 Vue 实例中定义的方法</p><p><code>v-on</code>简写为@</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span>我是title<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span>我是title<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sayName&quot;</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sayName&quot;</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;页面加载于 &#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name is saber&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-事件修饰符"><a href="#3-1-事件修饰符" class="headerlink" title="3.1 事件修饰符"></a>3.1 事件修饰符</h3><ul><li><code>.stop</code> 阻止事件冒泡</li><li><code>.prevent</code> 阻止默认事件</li><li><code>.capture</code> 事件触发机制变为捕获模式</li><li><code>.self</code>只当事件在该元素本身触发时触发回调，捕获和冒泡不会触发带<code>.self</code>事件修饰符的元素</li><li><code>.once</code>事件只触发一次</li><li><code>.passive</code>滚动行为将会立即触发，而不会等待 <code>onScroll</code> 完成</li></ul><h3 id="3-2-v-model"><a href="#3-2-v-model" class="headerlink" title="3.2 v-model"></a>3.2 v-model</h3><p>v-model用于数据的双向绑定；主要用于表单元素</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&#x27;app&#x27;&gt;</span><br><span class="line">    &lt;input v-model=&#x27;msg&#x27; type=&quot;text&quot; &gt;</span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">...data: &#123;msg:&#x27;&#x27;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="4-v-if和v-show"><a href="#4-v-if和v-show" class="headerlink" title="4. v-if和v-show"></a>4. v-if和v-show</h2><p><code>v-if</code>：通过传入给<code>v-if</code>的布尔类型值来判断是否删除此dom元素</p><p><code>v-show</code>：通过传入给<code>v-if</code>的布尔类型值来判断是否隐藏此dom元素（通过<code>display:none</code>的方式）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 不展示，无此dom元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">false</span>&gt;</span>我是title<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 不展示，元素被设置为`display:none` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">false</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-if</code>后可以接<code>v-else-if</code>和<code>v-else</code>,但必须相连，不能有其他元素</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span v-if=&#x27;num&gt;18&#x27;&gt;1&lt;/span&gt; </span><br><span class="line">&lt;span v-else-if=&#x27;num&gt;30&#x27;&gt;2&lt;/span&gt; </span><br><span class="line">&lt;span v-else&gt;3&lt;/span&gt; </span><br></pre></td></tr></table></figure><h2 id="5-v-for和key"><a href="#5-v-for和key" class="headerlink" title="5. v-for和key"></a>5. v-for和key</h2><p><code>v-for</code> 指令可以绑定数组的数据来渲染一个项目列表</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 遍历数组;item index是数组项和索引 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item,index) in list&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125; &#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 遍历对象;value,key,index是属性值，属性，索引 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&#x27;(value,key,index) in obj&#x27;</span>&gt;</span>&#123;&#123;value&#125;&#125; &#123;&#123;key&#125;&#125; &#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 遍历数字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&#x27;num in 4&#x27;</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> list = [<span class="string">&#x27;kalin&#x27;</span>,<span class="string">&#x27;siki&#x27;</span>,<span class="string">&#x27;hitaki&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;laki&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>v-for</code>时应尽量加入key的这个特殊属性。</p><p>在使用key时，如果有数据更改引发元素节点的添加或删除，会基于 key 的变化重新排列元素顺序，而不是所有元素重新渲染。以此来提高加载速度，提升渲染性能。</p><p>key的值应是唯一的，例如唯一的数字或字符串</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item,index) in list&#x27;</span> <span class="attr">:key</span>=<span class="string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="line">    &#123;&#123;item&#125;&#125; &#123;&#123;index&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-class与style的绑定"><a href="#6-class与style的绑定" class="headerlink" title="6. class与style的绑定"></a>6. class与style的绑定</h2><h3 id="6-1-class"><a href="#6-1-class" class="headerlink" title="6.1 class"></a>6.1 class</h3><p>在定义class时可以绑定一个对象，以动态切换class。</p><ul><li>vue绑定的class可以和普通的class共存</li><li>下例中vue绑定的class1、class2的有无取决于boolean1、boolean2的值</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">&quot;&#123; class1: boolean1, class2: boolean2 &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">data: &#123;</span><br><span class="line">boolean1: true,</span><br><span class="line">boolean2: false</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!-- 最终渲染为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static class1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 另一种写法，不内联定义在模板里 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">data: &#123;</span><br><span class="line">classObj: &#123; class1: true, class2: false &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在定义class时也可以绑定一个数组，以应用一个 class 列表。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[class1, class2]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">data: &#123;</span><br><span class="line">class1: &#x27;active&#x27;,</span><br><span class="line">class2: &#x27;text-danger&#x27;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!-- 最终渲染为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active text-danger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 也可以在数组语法中使用对象语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[&#123; class1: Boolean1 &#125;, class2]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-style"><a href="#6-2-style" class="headerlink" title="6.2 style"></a>6.2 style</h3><ul><li>对象语法</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">data: &#123;</span><br><span class="line">  activeColor: &#x27;red&#x27;,</span><br><span class="line">  fontSize: 30</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!-- 建议这样写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;styleObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">data: &#123;</span><br><span class="line">  styleObject: &#123;</span><br><span class="line">    color: &#x27;red&#x27;,</span><br><span class="line">    fontSize: &#x27;13px&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数组语法</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[baseStyles, overridStyles]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">data: &#123;</span><br><span class="line">  baseStyles: &#123;</span><br><span class="line">    color: &#x27;red&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  overridStyles: &#123;</span><br><span class="line">fontSize: &#x27;13px&#x27;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node</title>
      <link href="/posts/857fe845/"/>
      <url>/posts/857fe845/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>node是javaScript的运行环境，可以解析和执行javaScript代码</p><p>node没有BOM和DOM，只有EcmaScript</p><p>node特性：事件驱动；非阻塞的I/O模型；轻量高效</p><h2 id="2-npm"><a href="#2-npm" class="headerlink" title="2. npm"></a>2. npm</h2><p>npm是node的包管理工具；用来管理javaScript相关的包</p><ul><li>npm镜像源配置</li></ul><p>因为npm默认镜像地址是国外地址，所以改成国内的淘宝镜像</p><p><code>npm config set registry https://registry.npm.taobao.org</code></p><ul><li>安装包</li></ul><p>npm install -g全局安装 –save/-S生产环境 -dev/-D开发环境</p><h2 id="3-核心模块"><a href="#3-核心模块" class="headerlink" title="3. 核心模块"></a>3. 核心模块</h2><h3 id="3-1-读写文件"><a href="#3-1-读写文件" class="headerlink" title="3.1 读写文件"></a>3.1 读写文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./demo.html&#x27;</span>,<span class="keyword">function</span> (<span class="params">error,data</span>) &#123;</span><br><span class="line">    <span class="comment">//成功输出data，失败输出error</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error); <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//写文件</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./demo.html&#x27;</span>,<span class="string">&#x27;写入的东西&#x27;</span>,<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error); <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//读文件夹</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&#x27;./node&#x27;</span>,<span class="keyword">function</span> (<span class="params">error,data</span>) &#123;</span><br><span class="line">    <span class="comment">// 失败输出error,成功输出目录下文件/文件夹名数组</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error); <span class="variable language_">console</span>.<span class="title function_">log</span>(data);    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-2-http服务"><a href="#3-2-http服务" class="headerlink" title="3.2 http服务"></a>3.2 http服务</h3><p>四步走：</p><ul><li>加载http核心模块</li><li>创建一个Web服务器</li><li>注册request请求事件</li><li>绑定端口号，启动服务器</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span>  sever = http.<span class="title function_">createServer</span>();</span><br><span class="line">sever.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="keyword">function</span> (<span class="params">request,response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;注册请求事件&#x27;</span>);             </span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了访问:localhost:3000&#x27;</span>);    </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//链式调用</span></span><br><span class="line">http.<span class="title function_">createServer</span>().<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="keyword">function</span> (<span class="params">request,response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;注册请求事件&#x27;</span>);             </span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了访问:localhost:3000&#x27;</span>);    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-3-模板引擎art-template"><a href="#3-3-模板引擎art-template" class="headerlink" title="3.3 模板引擎art-template"></a>3.3 模板引擎art-template</h3><p>第三方node模块</p><ul><li>核心方法</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基于模板名渲染模板</span></span><br><span class="line"><span class="title function_">template</span>(filename, data);</span><br><span class="line"><span class="comment">// 将模板源代码编译成函数</span></span><br><span class="line">template.<span class="title function_">compile</span>(source, options);</span><br><span class="line"><span class="comment">// 将模板源代码编译成函数并立即执行</span></span><br><span class="line">template.<span class="title function_">render</span>(source, data, options);<span class="comment">//source 模板文件、data需要导入模板的数据</span></span><br></pre></td></tr></table></figure><ul><li>常用语句</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单 if 判断 --&gt;</span></span><br><span class="line">&#123;&#123;if value&#125;&#125; </span><br><span class="line">... </span><br><span class="line">&#123;&#123;/if&#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- if ... else ... 判断 --&gt;</span></span><br><span class="line">&#123;&#123;if v1&#125;&#125; </span><br><span class="line">... </span><br><span class="line">&#123;&#123;else if v2&#125;&#125;</span><br><span class="line"> ... </span><br><span class="line">&#123;&#123;/if&#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- 循环 --&gt;</span></span><br><span class="line">&#123;&#123;each target&#125;&#125;</span><br><span class="line">  &#123;&#123;$index&#125;&#125; &#123;&#123;$value&#125;&#125;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- 原生语法 --&gt;</span></span><br><span class="line">&lt;% for (var i = 0; i &lt; target.length; i++) &#123; %&gt;</span><br><span class="line">&lt;%= i %&gt; &lt;%= target[i] %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>target</code>是一个数组，<code>each</code>用于对数组遍历，<code>$index</code> 是数组的下标， <code>$value</code>是数组的值</p></blockquote><ol><li>浏览器下使用（单html文件）</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://npm.elemecdn.com/art-template@4.13.2/lib/template-web.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建 script 标签创建模板,注意下面几点 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. type=&quot;text/该斜杠后可以是 html,template... 不是script即可)&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. 给 script 标签添加 id ，此 id 即为模板 id --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.模板 script 标签必须在 template() 方法调用的 script 标签之前 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tpl&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span><span class="template-variable">&#123;&#123;<span class="name"><span class="built_in">if</span></span> user&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">user.name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="built_in">if</span></span>&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> user = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;Template username&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> html = <span class="title function_">template</span>(<span class="string">&#x27;tpl&#x27;</span>, &#123;<span class="attr">user</span>: user&#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#container&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    container.<span class="property">innerHTML</span> = html;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>node下使用</li></ol><p>html文件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    &#123;&#123;each commentsList&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;$value.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外部js文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = [&#123;<span class="attr">name</span>:vivy&#125;,&#123;<span class="attr">name</span>:violet&#125;,&#123;<span class="attr">name</span>:hitaki&#125;]</span><br><span class="line"><span class="keyword">let</span> html = template.<span class="title function_">render</span>(data.<span class="title function_">toString</span>(), &#123; <span class="attr">commentsList</span>: results&#125;)</span><br><span class="line"><span class="comment">//第二个参数为对象</span></span><br></pre></td></tr></table></figure><h3 id="3-4-mysql"><a href="#3-4-mysql" class="headerlink" title="3.4 mysql"></a>3.4 mysql</h3><p>引入流程</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;kkk&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>: <span class="string">&#x27;comment&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line"><span class="keyword">let</span> sql = <span class="string">&#x27;SELECT * FROM comments&#x27;</span>;</span><br><span class="line">connection.<span class="title function_">query</span>(sql, <span class="keyword">function</span> (<span class="params">error, results</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;);</span><br><span class="line">connection.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure><p>sql增删改查语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">selelt <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span>;<span class="operator">/</span><span class="operator">/</span>查询所有</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> (id,name) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;vivy&#x27;</span>);<span class="operator">/</span><span class="operator">/</span>插入数据</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;<span class="operator">/</span><span class="operator">/</span>删除数据</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">table</span> <span class="keyword">set</span> id <span class="operator">=</span> <span class="number">2</span>, name <span class="operator">=</span> <span class="string">&#x27;vivy&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span><span class="number">1</span>;<span class="operator">/</span><span class="operator">/</span>修改数据</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap</title>
      <link href="/posts/d352c4d3/"/>
      <url>/posts/d352c4d3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>bootstrap是开源前端模板工具集，是由Twitter公司的两名前端工程师开发的</p><p>特点是：根据类名引用工具，移动端优先</p><p><a href="https://github.com/twbs/bootstrap/releases/download/v3.4.1/bootstrap-3.4.1-dist.zip">官方下载文档</a></p><p><a href="https://www.jsdelivr.com/package/npm/bootstrap?version=3.4.1&path=dist">jsdelivr下载</a></p><blockquote><p>线上CDN地址</p><p><a href="https://npm.elemecdn.com/bootstrap@3.4.1/dist/js/bootstrap.min.js">https://npm.elemecdn.com/bootstrap@3.4.1/dist/js/bootstrap.min.js</a></p><p><a href="https://npm.elemecdn.com/bootstrap@3.4.1/dist/css/bootstrap.min.css">https://npm.elemecdn.com/bootstrap@3.4.1/dist/css/bootstrap.min.css</a></p></blockquote><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><p>bootstrap是基于jQuery开发的，所以在引入bootstrap的js文件前要先引入jQuery</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://npm.elemecdn.com/jquery@3.5.1/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://npm.elemecdn.com/bootstrap@3.4.1/dist/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://npm.elemecdn.com/bootstrap@3.4.1/dist/css/bootstrap.min.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体类名引用参考<a href="https://v3.bootcss.com/css/">bootstrap3官方文档</a>或<a href="https://www.runoob.com/bootstrap/bootstrap-grid-system.html">菜鸟教程</a></p><p>这里列举几个常用的组件</p><h3 id="2-1-网格系统"><a href="#2-1-网格系统" class="headerlink" title="2.1 网格系统"></a>2.1 网格系统</h3><p>网格系统是将container容器内以网格的形式分成12列，可根据不同设备屏幕大小的差异来规划内同所占的列数</p><p>由于bootstrap是移动设备优先，所以屏幕大小不同时是向上兼容的</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>      </span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left"></th><th align="left">超小屏幕 手机 (&lt;768px)</th><th align="left">小屏幕 平板 (≥768px)</th><th align="left">中等屏幕 桌面显示器 (≥992px)</th><th align="left">大屏幕 大桌面显示器 (≥1200px)</th></tr></thead><tbody><tr><td align="left"><code>.container</code> 最大宽度</td><td align="left">None （自动）</td><td align="left">750px</td><td align="left">970px</td><td align="left">1170px</td></tr><tr><td align="left">类前缀</td><td align="left"><code>.col-xs-</code></td><td align="left"><code>.col-sm-</code></td><td align="left"><code>.col-md-</code></td><td align="left"><code>.col-lg-</code></td></tr></tbody></table><ul><li>响应式</li></ul><p>可以配合clearfix类和响应式工具类来实现响应式显示/隐藏元素；显示时可以后接<code>-block</code>或<code>-inline-block</code>来设置显示模式</p><table><thead><tr><th>显示</th><th>隐藏</th></tr></thead><tbody><tr><td>visible-xs</td><td>hidden-xs</td></tr><tr><td>visible-sm</td><td>hidden-sm</td></tr><tr><td>visible-md</td><td>hidden-md</td></tr><tr><td>visible-lg</td><td>hidden-lg</td></tr></tbody></table><ul><li>列偏移</li></ul><p>可以使用<code>col-md-offset-n</code>来设置当前元素在网格系统中便宜的列数</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- xs大小时每个div占六列，每行显示两个;sm大小及以上时每个div占3列,每行显示4个 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- xs大小时第一个div左侧偏移两列,本身占4列 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- xs大小时后面两个div隐藏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-offset-2 col-xs-4 col-sm-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6 col-sm-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix hidden-xs col-xs-6 col-sm-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix hidden-xs col-xs-6 col-sm-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-表格"><a href="#2-2-表格" class="headerlink" title="2.2 表格"></a>2.2 表格</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- table 基本表、table-bordered 表格带边框、table-hover鼠标悬停有浅灰色背景、table-condensed 表格更紧凑、table-responsive 响应式表格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-hover table-condensed table-responsive&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>表头<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Tanmay<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bangalore<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Sachin<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mumbai<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-表单"><a href="#2-3-表单" class="headerlink" title="2.3 表单"></a>2.3 表单</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 水平排列的表单 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;form class=&quot;form-inline&quot;&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 纵向排列的表单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过为表单添加 .form-horizontal 类，并联合使用 Bootstrap 预置的栅格类，可以将 label 标签和控件组水平并排布局。这样做将改变 .form-group 的行为，使其表现为栅格系统中的行（row），因此就无需再额外添加 .row 了 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其余常用组件慢慢整理；目前先用这些</p><h2 id="3-插件"><a href="#3-插件" class="headerlink" title="3. 插件"></a>3. 插件</h2><h3 id="3-1-模态框"><a href="#3-1-模态框" class="headerlink" title="3.1 模态框"></a>3.1 模态框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 触发模态框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#mod1&quot;</span>&gt;</span></span><br><span class="line">模态框</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模态框（Modal） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mod1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">模态框标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">模态框主体</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">模态框底部</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.2 tab切换</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#tab1&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#tab2&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>iOS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane fade in active&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tab1&quot;</span>&gt;</span></span><br><span class="line">tab1的内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tab2&quot;</span>&gt;</span></span><br><span class="line">tab2的内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BootStrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax</title>
      <link href="/posts/c5a6a264/"/>
      <url>/posts/c5a6a264/</url>
      
        <content type="html"><![CDATA[<h2 id="1-ajax简述"><a href="#1-ajax简述" class="headerlink" title="1. ajax简述"></a>1. ajax简述</h2><p>Asynchronous JavaScript + XML（异步JavaScript和XML）, 其本身不是一种新技术，而是一个在 2005年被Jesse James Garrett提出的新术语，用来描述一种使用现有技术集合的‘新’方法，包括: HTML 或 XHTML,  CSS, JavaScript, DOM, XML, XSLT, 以及最重要的 XMLHttpRequest。当使用结合了这些技术的AJAX模型以后， 网页应用能够快速地将增量更新呈现在用户界面上，而不需要重载（刷新）整个页面。这使得程序能够更快地回应用户的操作。</p><p>尽管X在Ajax中代表XML, 但由于JSON的许多优势，比如更加轻量以及作为Javascript的一部分，目前JSON的使用比XML更加普遍。JSON和XML都被用于在Ajax模型中打包信息</p><p>异步请求，局部刷新</p><h3 id="1-1-ajax原理"><a href="#1-1-ajax原理" class="headerlink" title="1.1 ajax原理"></a>1.1 ajax原理</h3><img src="https://img.hitagi.site/202211142240223.jpg" alt="ajax原理" style="zoom: 80%;" /><h2 id="2-ajax语法"><a href="#2-ajax语法" class="headerlink" title="2. ajax语法"></a>2. ajax语法</h2><p>onreadystatechange事件</p><ol><li><p>当请求被发送到服务器时，我们需要执行一些基于响应的任务。。</p></li><li><p>每当 readyState 改变时，就会触发 onreadystatechange 事件。</p></li><li><p>readyState 属性存有 XMLHttpRequest 的状态信息。</p></li></ol><h3 id="2-1-ajax状态码"><a href="#2-1-ajax状态码" class="headerlink" title="2.1 ajax状态码"></a>2.1 ajax状态码</h3><table><thead><tr><th>ajax状态码</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>(未初始化)还没有调用send()方法</td></tr><tr><td>1</td><td>(载入)已经调用send()方法，正在派发请求</td></tr><tr><td>2</td><td>(载入完成)send()已经执行完成，已经接收到全部的响应内容</td></tr><tr><td>3</td><td>(交互)正在解析响应内容</td></tr><tr><td>4</td><td>(完成)响应内容已经解析完成，用户可以调用</td></tr></tbody></table><h3 id="2-2-http状态码"><a href="#2-2-http状态码" class="headerlink" title="2.2 http状态码"></a>2.2 http状态码</h3><table><thead><tr><th>1xx(临时响应)</th><th>表示临时响应并需要请求者继续执行操作的状态代码</th></tr></thead><tbody><tr><td>100 (继续)</td><td>请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分</td></tr><tr><td>101 (切换协议)</td><td>请求者已要求服务器切换协议，服务器已确认并准备切换</td></tr></tbody></table><table><thead><tr><th>2xx (成功)</th><th>表示成功处理了请求的状态代码</th></tr></thead><tbody><tr><td>200 (成功)</td><td>服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页</td></tr><tr><td>201 (已创建)</td><td>请求成功并且服务器创建了新的资源</td></tr><tr><td>202 (已接受)</td><td>服务器已接受请求，但尚未处理</td></tr><tr><td>203 (非授权信息)</td><td>服务器已成功处理了请求，但返回的信息可能来自另一来源</td></tr><tr><td>204 (无内容)</td><td>服务器成功处理了请求，但没有返回任何内容</td></tr><tr><td>205 (重置内容)</td><td>服务器成功处理了请求，但没有返回任何内容</td></tr><tr><td>206 (部分内容)</td><td>服务器成功处理了部分 GET 请求</td></tr></tbody></table><table><thead><tr><th>3xx (重定向)</th><th>表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向</th></tr></thead><tbody><tr><td>300 (多种选择)</td><td>针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择</td></tr><tr><td>301 (永久移动)</td><td>请求的网页已永久移动到新位置。 服务器返回此响应(对 GET 或 HEAD 请求的响应)时，会自动将请求者转到新位置</td></tr><tr><td>302 (临时移动)</td><td>服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</td></tr><tr><td>303 (查看其他位置)</td><td>请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码</td></tr><tr><td>304 (未修改)</td><td>自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容</td></tr><tr><td>305 (使用代理)</td><td>请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理</td></tr><tr><td>307 (临时重定向)</td><td>服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</td></tr></tbody></table><table><thead><tr><th>4xx(请求错误)</th><th>这些状态代码表示请求可能出错，妨碍了服务器的处理</th></tr></thead><tbody><tr><td>400 (错误请求)</td><td>服务器不理解请求的语法</td></tr><tr><td>401 (未授权)</td><td>请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应</td></tr><tr><td>403 (禁止)</td><td>服务器拒绝请求</td></tr><tr><td>404 (未找到)</td><td>服务器找不到请求的网页</td></tr><tr><td>405 (方法禁用)</td><td>禁用请求中指定的方法</td></tr><tr><td>406 (不接受)</td><td>无法使用请求的内容特性响应请求的网页</td></tr><tr><td>407 (需要代理授权)</td><td>此状态代码与 401(未授权)类似，但指定请求者应当授权使用代理</td></tr><tr><td>408 (请求超时)</td><td>服务器等候请求时发生超时</td></tr><tr><td>409 (冲突)</td><td>服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息</td></tr><tr><td>410 (已删除)</td><td>如果请求的资源已永久删除，服务器就会返回此响应</td></tr><tr><td>411 (需要有效长度)</td><td>服务器不接受不含有效内容长度标头字段的请求</td></tr><tr><td>412 (未满足前提条件)</td><td>服务器未满足请求者在请求中设置的其中一个前提条件</td></tr><tr><td>413 (请求实体过大)</td><td>服务器无法处理请求，因为请求实体过大，超出服务器的处理能力</td></tr><tr><td>414 (请求的 URI 过长)</td><td>请求的 URI(通常为网址)过长，服务器无法处理</td></tr><tr><td>415 (不支持的媒体类型)</td><td>请求的格式不受请求页面的支持</td></tr><tr><td>416 (请求范围不符合要求)</td><td>如果页面无法提供请求的范围，则服务器会返回此状态代码</td></tr><tr><td>417 (未满足期望值)</td><td>服务器未满足”期望”请求标头字段的要求</td></tr></tbody></table><table><thead><tr><th>5xx(服务器错误)</th><th>这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错</th></tr></thead><tbody><tr><td>500 (服务器内部错误)</td><td>服务器遇到错误，无法完成请求</td></tr><tr><td>501 (尚未实施)</td><td>服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码</td></tr><tr><td>502 (错误网关)</td><td>服务器作为网关或代理，从上游服务器收到无效响应</td></tr><tr><td>503 (服务不可用)</td><td>服务器目前无法使用(由于超载或停机维护)。 通常，这只是暂时状态</td></tr><tr><td>504 (网关超时)</td><td>服务器作为网关或代理，但是没有及时从上游服务器收到请求</td></tr><tr><td>505 (HTTP 版本不受支持)</td><td>服务器不支持请求中所用的 HTTP 协议版本</td></tr></tbody></table><h3 id="2-3-实例"><a href="#2-3-实例" class="headerlink" title="2.3 实例"></a>2.3 实例</h3><p>以下通过实例的方式来演示ajax原生使用</p><ul><li>get请求</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;myDiv&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 兼容性处理</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// IE7+,和其他浏览器</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// IE5,IE6</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&#x27;Microsoft.XMLHTTP&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//ajax打开链接</span></span></span><br><span class="line"><span class="language-javascript">xmlhttp.<span class="title function_">open</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;http://wkt.myhope365.com/weChat/applet/course/banner/list?number=3&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//ajax发送请求</span></span></span><br><span class="line"><span class="language-javascript">xmlhttp.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//检测请求状态</span></span></span><br><span class="line"><span class="language-javascript">xmlhttp.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> imgList = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xmlhttp.<span class="property">responseText</span>).<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(imgList);</span></span><br><span class="line"><span class="language-javascript">        imgList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#myDiv&#x27;</span>)[<span class="number">0</span>].<span class="property">innerHTML</span> += <span class="string">`&lt;img src=<span class="subst">$&#123;value.imgUrl&#125;</span>&gt;`</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>post请求</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;myDiv&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 兼容性处理</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// IE7+,和其他浏览器</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// IE5,IE6</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&#x27;Microsoft.XMLHTTP&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//ajax打开链接</span></span></span><br><span class="line"><span class="language-javascript">xmlhttp.<span class="title function_">open</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;http://wkt.myhope365.com//weChat/applet/course/list/type&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// ajax设置请求头</span></span></span><br><span class="line"><span class="language-javascript">xmlhttp.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//ajax发送请求</span></span></span><br><span class="line"><span class="language-javascript">xmlhttp.<span class="title function_">send</span>(<span class="string">&quot;type=free&amp;pageNum=1&amp;pageSize=5&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//检测请求状态</span></span></span><br><span class="line"><span class="language-javascript">xmlhttp.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xmlhttp.<span class="property">responseText</span>).<span class="property">rows</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xmlhttp.<span class="property">responseText</span>).<span class="property">rows</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#myDiv&#x27;</span>)[<span class="number">0</span>].<span class="property">innerHTML</span> += <span class="string">`&lt;dl class=&quot;course&quot;&gt;&lt;dt&gt;&lt;img src=&quot;<span class="subst">$&#123;item.coverFileUrl&#125;</span>&quot;alt=&quot;&quot; /&gt;&lt;/dt&gt;&lt;dt&gt;<span class="subst">$&#123;item.courseTitle&#125;</span>&lt;/dt&gt;&lt;dt&gt;共<span class="subst">$&#123;item.learningNum&#125;</span>节课|<span class="subst">$&#123;item.participationsCount&#125;</span>人报名&lt;/dt&gt;&lt;dt&gt;免费&lt;/dt&gt;&lt;/dl&gt;`</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-引入jQuery的ajax实例"><a href="#3-引入jQuery的ajax实例" class="headerlink" title="3. 引入jQuery的ajax实例"></a>3. 引入jQuery的ajax实例</h2><h3 id="3-1-jquery-get"><a href="#3-1-jquery-get" class="headerlink" title="3.1 jquery-get"></a>3.1 jquery-get</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;box&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">get</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;http://wkt.myhope365.com/weChat/applet/course/banner/list?number=5&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> (<span class="params">data, status</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (status == <span class="string">&#x27;success&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                data.<span class="property">data</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">append</span>(<span class="string">`&lt;img src=&quot;<span class="subst">$&#123;item.imgUrlPc&#125;</span>&quot; alt=&quot;&quot;&gt;`</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-jquery-post"><a href="#3-2-jquery-post" class="headerlink" title="3.2 jquery-post"></a>3.2 jquery-post</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;box&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// $.post()请求不能设置JOSN格式的请求头，所以请求头类型是JSON格式的话需要用$.ajax()</span></span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">post</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;http://wkt.myhope365.com/weChat/applet/course/list/type&quot;</span>, <span class="string">&quot;type=free&amp;pageNum=1&amp;pageSize=10&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> (<span class="params">data, status</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (status == <span class="string">&quot;success&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                data.<span class="property">rows</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">courseTitle</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    );</span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&#x27;http://wkt.myhope365.com/weChat/applet/subject/list&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">enable</span>: <span class="number">1</span> &#125;),</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">contentType</span>: <span class="string">&#x27;application/json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res, status</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            res.<span class="property">rows</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&#x27;#box&#x27;</span>)[<span class="number">0</span>].<span class="property">innerHTML</span> += <span class="string">`&lt;p&gt;<span class="subst">$&#123;item.title&#125;</span>&lt;/p&gt;`</span></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ajax方法对象参数属性列表</p><table><thead><tr><th>属性名</th><th>含义</th></tr></thead><tbody><tr><td>url</td><td>规定发送请求的 URL。默认是当前页面</td></tr><tr><td>type</td><td>规定请求的类型（GET 或 POST</td></tr><tr><td>timeout</td><td>设置本地的请求超时时间（以毫秒计）</td></tr><tr><td>async</td><td>布尔值，表示请求是否异步处理。默认是 true</td></tr><tr><td>cache</td><td>布尔值，表示浏览器是否缓存被请求页面。默认是 true</td></tr><tr><td>data</td><td>规定要发送到服务器的数据</td></tr><tr><td>dataType</td><td>预期的服务器响应的数据类型</td></tr><tr><td>contentType</td><td>发送数据到服务器时所使用的内容类型。默认是：”application/x-www-form-urlencoded”</td></tr></tbody></table><h2 id="4-json"><a href="#4-json" class="headerlink" title="4. json"></a>4. json</h2><p>JSON 是存储和交换文本信息的语法。类似 XML。</p><p>JSON 比 XML 更小、更快，更易解析。</p><p>JSON 是轻量级的文本数据交换格式</p><h3 id="4-1-JSON-parse和JSON-stringify"><a href="#4-1-JSON-parse和JSON-stringify" class="headerlink" title="4.1 JSON.parse和JSON.stringify"></a>4.1 JSON.parse和JSON.stringify</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123; &quot;name&quot;:&quot;vivy&quot;, &quot;ability&quot;:&quot;sing&quot;&#125;&#x27;</span>)<span class="comment">//将字符串传话为JSON对象</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="string">&quot;name&quot;</span>:<span class="string">&quot;vivy&quot;</span>, <span class="string">&quot;ability&quot;</span>:<span class="string">&quot;sing&quot;</span>&#125;);<span class="comment">//将JSON对象转化为字符串</span></span><br></pre></td></tr></table></figure><h3 id="4-2-JSONP"><a href="#4-2-JSONP" class="headerlink" title="4.2 JSONP"></a>4.2 JSONP</h3><p>JSON的一种使用模式，用来解决跨域问题；</p><ul><li>同源策略</li></ul><p>同源即协议、域名、端口号都相同。<code>http://</code>(同为http协议)<code>recreyed.com</code>(相同域名):<code>7070</code>(相同端口号)</p><p>随着互联网的发展，”同源政策”越来越严格。目前，如果非同源，共有三种行为受到限制。</p><blockquote><p>（1） Cookie、LocalStorage 和 IndexDB 无法读取。</p><p>（2） DOM 无法获得。</p><p>（3） AJAX 请求不能发送。</p></blockquote><ul><li>跨域</li></ul><p>解决跨域问题的三种主要方式：</p><p>后台放开；jsonp；配置代理</p><p>后台放开:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;)</span><br></pre></td></tr></table></figure><p>以后应该会写一篇解决跨域的总结</p>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6基础 04</title>
      <link href="/posts/38409243/"/>
      <url>/posts/38409243/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Promise对象"><a href="#1-Promise对象" class="headerlink" title="1. Promise对象"></a>1. Promise对象</h2><p><strong>Promise</strong> 对象用于表示一个异步操作的最终完成 (或失败)及其结果值</p><p>异步操作会先挂起，优先执行同步操作后再执行异步操作</p><p>一个 <code>Promise</code> 对象代表一个在这个 promise 被创建出来时不一定有已知的值。它让您能够把异步操作最终的成功返回值或者失败原因和相应的处理程序关联起来。 这样使得异步方法可以像同步方法那样返回值：异步方法并不会立即返回最终的值，而是会返回一个 <em>promise</em>，以便在未来某个时候把值交给使用者。</p><p>说人话就是promise用于判断接口请求是否正确，正确执行then方法里的内容，错误执行catch里的内容。最后返回promise里的执行结果。</p><p>一个 <code>Promise</code> 必然处于以下几种状态之一：</p><ul><li>初始化（pending）: 初始状态，既没有被接受，也没有被拒绝。</li><li>已接受（fulfilled）: 意味着操作成功完成。</li><li>已拒绝（rejected）: 意味着操作失败。</li></ul><h3 id="1-1-基本用法"><a href="#1-1-基本用法" class="headerlink" title="1.1 基本用法"></a>1.1 基本用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;  <span class="comment">//resolve、reject均为方法</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">3</span> == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;成功了&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;失败了&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(promise1);<span class="comment">//Promise &#123;&lt;fulfilled&gt;: &quot;成功了&quot;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-then、catch方法"><a href="#1-2-then、catch方法" class="headerlink" title="1.2 then、catch方法"></a>1.2 then、catch方法</h3><p>then方法会接收promise的fulfilled状态并执行then方法里的内容</p><p><code>then()</code> 函数会返回一个和原来不同的<strong>新的 Promise</strong>，所以then可以链式调用</p><p>如果promise</p><ul><li>返回了一个值，那么 <code>then</code> 返回的 Promise 将会成为接受状态，并且将返回的值作为接受状态的回调函数的参数值</li><li>没有返回任何值，那么 <code>then</code> 返回的 Promise 将会成为接受状态，并且该接受状态的回调函数的参数值为 <code>undefined</code>。</li><li>抛出一个错误，那么 <code>then</code> 返回的 Promise 将会成为拒绝状态，并且将抛出的错误作为拒绝状态的回调函数的参数值</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise1</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res += <span class="string">&#x27;第一步, &#x27;</span></span><br><span class="line">    &#125;) <span class="comment">//then返回的promise对象状态为fulfilled，PromiseResult(同时也是下一个then的参数)值为&quot;成功了, 第一步,&quot; </span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res += <span class="string">&#x27;第二步。&#x27;</span></span><br><span class="line">    &#125;)<span class="comment">//then返回的promise对象状态为fulfilled，PromiseResult(同时也是下一个then的参数)值为&quot;成功了, 第一步,第二步。&quot; </span></span><br></pre></td></tr></table></figure><p><code>catch()</code>函数同then一样，会接收promise的rejected状态并执行catch方法里的内容</p><p>不过有以下要注意的内容</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抛出一个错误，大多数时候将调用catch方法</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;Uh-oh!&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">p1.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">// &quot;Uh-oh!&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 在异步函数中抛出的错误不会被catch捕获到</span></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&#x27;Uncaught Exception!&#x27;</span>;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p2.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">// 不会执行</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 在resolve()后面抛出的错误会被忽略</span></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;Silenced Exception!&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">p3.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">// 不会执行</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="1-3-all方法"><a href="#1-3-all方法" class="headerlink" title="1.3 all方法"></a>1.3 all方法</h3><p><code>all()</code>方法接受一个数组作为参数，数组的元素是Promise实例对象，当参数中的实例对象的状态都为fulfilled时，Promise.all( )才会有返回。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([pro1,pro2]).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>)&#123; <span class="comment">//pro1和pro2是promise实例对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>一般的应用场景：一般这样的场景：我们执行某个操作，这个操作需要得到需要多个接口请求回来的数据来支持，但是这些接口请求之前互不依赖，不需要层层嵌套。这种情况下就适合使用Promise.all( )方法，因为它会得到所有接口都请求成功了，才会进行操作</p><h3 id="1-4-race方法"><a href="#1-4-race方法" class="headerlink" title="1.4 race方法"></a>1.4 race方法</h3><p><code>race()</code>参数要求跟<code>Promise.all( )</code>方法一样，不同的是，它参数中的promise实例，只要有一个状态发生变化（不管是成功fulfilled还是异常rejected），它就会有返回，而且谁优先返回就接受谁。其他实例中再发生变化，也不会再执行了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([pro1,pro2]).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>)&#123; <span class="comment">//pro1和pro2是promise实例对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-ES7中Async和await"><a href="#2-ES7中Async和await" class="headerlink" title="2. ES7中Async和await"></a>2. ES7中Async和await</h2><p><code>async</code>和<code>await</code>关键字让我们可以用一种更简洁的方式写出基于promise异步行为，而无需刻意地链式调用<code>promise</code>。</p><p><code>async</code>的返回值是一个promise对象，这个promise要么会通过一个由async函数返回的值被解决，要么会通过一个从async函数中抛出的（或其中没有被捕获到的）异常被拒绝。</p><p>async函数可能包含0个或者多个<code>await</code>表达式。await表达式会暂停整个async函数的执行进程并出让其控制权，只有当其等待的基于promise的异步操作被兑现或被拒绝之后才会恢复进程。promise的解决值会被当作该await表达式的返回值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">work</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;worked&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncCall</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">work</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result); </span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;async函数的返回值，[PromiseResult]中的值&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">asyncCall</span>();<span class="comment">//&quot;worked&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-类基本用法"><a href="#3-类基本用法" class="headerlink" title="3. 类基本用法"></a>3. 类基本用法</h2><p>类是用于创建对象的模板。他们用代码封装数据以处理该数据。类是“特殊的函数”，就像定义的函数表达式和函数声明一样，类语法有两个组成部分：类表达式和类声明。</p><h3 id="3-1-类的声明"><a href="#3-1-类的声明" class="headerlink" title="3.1 类的声明"></a>3.1 类的声明</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">cube</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">height, width</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-类的表达式"><a href="#3-2-类的表达式" class="headerlink" title="3.2 类的表达式"></a>3.2 类的表达式</h3><p>类的表达式有未命名和命名两种</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未命名/匿名类</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Rectangle</span> = <span class="keyword">class</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">height</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Rectangle</span>.<span class="property">name</span>);<span class="comment">//&quot;Rectangle&quot;</span></span><br><span class="line"><span class="comment">// 命名类</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Rectangle</span> = <span class="keyword">class</span> <span class="title class_">Rectangle2</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">height</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">play</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;play&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">create</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;create a cube&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Rectangle</span>.<span class="property">name</span>);</span><br><span class="line"><span class="comment">// 输出: &quot;Rectangle2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-类体和方法定义"><a href="#3-3-类体和方法定义" class="headerlink" title="3.3 类体和方法定义"></a>3.3 类体和方法定义</h3><p>constructor方法是必须且唯一的，用于创建和初始化一个由<code>class</code>创建的对象；其他方法可以自定义</p><p>‘static’ 关键字用来定义一个类的一个静态方法。不能继承，调用静态方法不需要实例化该类，但不能通过一个类实例调用静态方法。静态方法通常用于为一个应用程序创建工具函数</p><h3 id="3-4-类的继承"><a href="#3-4-类的继承" class="headerlink" title="3.4 类的继承"></a>3.4 类的继承</h3><p><code>extends</code> 关键字用于实现子类继承父类,子类使用super关键字来调用父类的属性或方法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is my name.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name); <span class="comment">// 调用父类构造函数并传入name参数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">speak</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`yes`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-模块化"><a href="#4-模块化" class="headerlink" title="4. 模块化"></a>4. 模块化</h2><h3 id="4-1-模块的导入与导出"><a href="#4-1-模块的导入与导出" class="headerlink" title="4.1 模块的导入与导出"></a>4.1 模块的导入与导出</h3><p>例如：导出model.js的内容；导入到main.js中</p><p>as 可以在导出与导入的大括号内为导出导入项设置一个别名；主要用于解决命名冲突的问题</p><p>model.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; name <span class="keyword">as</span> modelName, say <span class="keyword">as</span> modelSay &#125;;</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;vivy&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`i am a singer`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; name <span class="keyword">as</span> modelName, say <span class="keyword">as</span> modelSay &#125; <span class="keyword">from</span> <span class="string">&#x27;model.js&#x27;</span></span><br><span class="line"><span class="comment">//可以使用*来整体导入</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">from</span> <span class="string">&#x27;model.js&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6基础 03</title>
      <link href="/posts/a62407e0/"/>
      <url>/posts/a62407e0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Iterator迭代器"><a href="#1-Iterator迭代器" class="headerlink" title="1. Iterator迭代器"></a>1. Iterator迭代器</h2><p>上文提到的for…of不能遍历对象的属性，原因是对象的属性是无序的，在设计对象的时候没有加入Iterator迭代器</p><p>可迭代的对象有：String、Array、TypedArray、Map 和 Set，这些对象（或者它原型链上的某个对象）必须有一个键为 iterator 的属性</p><p>迭代器是可迭代对象（或其原型链上的一个方法），可通过<code>[Symbol.iterator]()</code>来调用到它；该方法返回一个对象，返回对象的原型上有<code>next()</code>方法；通过<code>next()</code>方法来遍历最初的可迭代对象。</p><p><code>next</code>的返回值是包含<code>value</code>和<code>done</code>属性的一个对象；<code>value</code>是迭代的值，done是迭代的状态</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> step = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(step);<span class="comment">//Array Iterator &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(step.<span class="title function_">next</span>());<span class="comment">//&#123;value: &quot;a&quot;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(step.<span class="title function_">next</span>());<span class="comment">//&#123;value: &quot;b&quot;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(step.<span class="title function_">next</span>());<span class="comment">//&#123;value: &quot;c&quot;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(step.<span class="title function_">next</span>());<span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-自定义迭代器"><a href="#1-1-自定义迭代器" class="headerlink" title="1.1 自定义迭代器"></a>1.1 自定义迭代器</h3><p>给对象添加自定义迭代器，使用for…of访问</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">14</span>;</span><br><span class="line"><span class="keyword">let</span> person1 = &#123;</span><br><span class="line">    name, age,</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> _this = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> value = &#123;</span><br><span class="line">                    <span class="attr">key</span>: _this[index],</span><br><span class="line">                    <span class="attr">value</span>: <span class="variable language_">this</span>[_this[index]]</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">let</span> done = (index &gt;= _this.<span class="property">length</span>);</span><br><span class="line">                index++;</span><br><span class="line">                <span class="keyword">return</span> &#123; value, done &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> person1) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Object &#123; key: &quot;name&quot;, value: &quot;zs&quot; &#125;</span></span><br><span class="line"><span class="comment">//Object &#123; key: &quot;age&quot;, value: 14 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-Generator生成器"><a href="#2-Generator生成器" class="headerlink" title="2. Generator生成器"></a>2. Generator生成器</h2><p>Generator生成器对象是由一个 generator function 返回的</p><p>这个函数的声明如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> g = <span class="title function_">gen</span>();<span class="comment">//g 就是Generator生成器对象</span></span><br></pre></td></tr></table></figure><p>生成器对象和迭代器对象一样，有一个next方法，用于返回一个由<code>yield</code>表达式生成的值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">g.<span class="title function_">next</span>();      <span class="comment">// &quot;Object &#123; value: 1, done: false &#125;&quot;</span></span><br><span class="line">g.<span class="title function_">next</span>();      <span class="comment">// &quot;Object &#123; value: 2, done: false &#125;&quot;</span></span><br><span class="line">g.<span class="title function_">next</span>();      <span class="comment">// &quot;Object &#123; value: 3, done: false &#125;&quot;</span></span><br><span class="line">g.<span class="title function_">next</span>();      <span class="comment">// &quot;Object &#123; value: undefined, done: true &#125;&quot;</span></span><br></pre></td></tr></table></figure><p>next( )方法还可以接受一个参数，它的参数会作为上一个yield的返回值</p><h3 id="2-1-yield"><a href="#2-1-yield" class="headerlink" title="2.1 yield*"></a>2.1 yield*</h3><p>如果想在一个Generator函数里调用另一个Generator函数，需要用到<code>yield*</code>关键字</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;start&#x27;</span></span><br><span class="line">  <span class="keyword">yield</span>* <span class="title function_">gen</span>();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;end&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> g2 = <span class="title function_">gen2</span>();</span><br></pre></td></tr></table></figure><h2 id="3-Set和WeakSet用法"><a href="#3-Set和WeakSet用法" class="headerlink" title="3. Set和WeakSet用法"></a>3. Set和WeakSet用法</h2><p><code>Set</code> 对象允许你存储任何类型的唯一值(除了不可迭代对象以外)，无论是原始值或者是对象引用</p><p><code>Set</code>对象是值的集合，你可以按照插入的顺序迭代它的元素。 Set中的元素只会出现一次，即 Set 中的元素是唯一的</p><h3 id="3-1-set去重"><a href="#3-1-set去重" class="headerlink" title="3.1 set去重"></a>3.1 set去重</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeRepeat</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">removeRepeat</span>(arr1);<span class="comment">//[1, 2, 4, 6]</span></span><br></pre></td></tr></table></figure><h3 id="3-2-size属性"><a href="#3-2-size属性" class="headerlink" title="3.2 size属性"></a>3.2 size属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><h3 id="3-3-方法"><a href="#3-3-方法" class="headerlink" title="3.3 方法"></a>3.3 方法</h3><ol><li>add方法</li></ol><p>用来向一个 <code>Set</code> 对象的末尾添加一个指定的值；可以链式调用；</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mySet.<span class="title function_">add</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet);<span class="comment">//Set(4) &#123;1, 2, 3, &quot;abc&quot;&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>clear方法</li></ol><p>用来清空一个 <code>Set</code> 对象中的所有元素；<code>mySet.clear();</code></p><ol start="3"><li>delete方法</li></ol><p>可以从一个 <code>Set</code> 对象中删除指定的元素；<code>mySet.delete(value);</code></p><ol start="4"><li>has方法</li></ol><p>返回一个布尔值来指示对应的值value是否存在Set对象中；<code>mySet.has(value);</code></p><ol start="5"><li>entries、keys、values方法</li></ol><p>entries：返回一个新的迭代器对象 ，这个对象的元素是类似 [value, value] 形式的数组</p><p>由于set对象不像Map对象那样拥有 key，然而，为了与 Map 对象的 API 形式保持一致；所以set的key和value是相同的值</p><p>keys/values：返回一个新的迭代器对象，该对象包含<code>Set</code>对象中的按插入顺序排列的所有元素的值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet.<span class="title function_">entries</span>());<span class="comment">//SetIterator &#123;1 =&gt; 1, 2 =&gt; 2, 3 =&gt; 3, &quot;abc&quot; =&gt; &quot;abc&quot;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="4-Map和WeakMap用法"><a href="#4-Map和WeakMap用法" class="headerlink" title="4. Map和WeakMap用法"></a>4. Map和WeakMap用法</h2><p>Map 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者原始值) 都可以作为一个键或一个值。</p><h3 id="4-1-size属性"><a href="#4-1-size属性" class="headerlink" title="4.1 size属性"></a>4.1 size属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map1 = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>],[<span class="string">&#x27;age&#x27;</span>,<span class="number">19</span>]]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map1.<span class="property">size</span>);</span><br></pre></td></tr></table></figure><h3 id="4-2-方法"><a href="#4-2-方法" class="headerlink" title="4.2 方法"></a>4.2 方法</h3><ol><li>get方法：返回键对应的值，如果不存在，则返回undefined</li></ol><p><code>map1.get(key)</code></p><ol start="2"><li>set方法：添加或更新一个指定键和值。返回该Map对象</li></ol><p><code>map1.set(key, value)</code></p><ol start="3"><li>delete方法：移除map对象中指定的元素；如果 <code>Map</code> 对象中存在该元素，则移除它并返回 <code>true</code>；否则如果该元素不存在则返回 <code>false</code></li></ol><p><code>map1.delete(key)</code></p><ol start="4"><li>clear方法：移除Map对象的所有键值对；返回undifined</li></ol><p><code>map1.clear()</code></p><ol start="5"><li>has方法：表示Map实例是否包含键对应的值，返回一个布尔值，</li></ol><p><code>map1.has(key)</code></p><ol start="6"><li>entries、keys、values方法</li></ol><p>entries：返回一个新的包含 <code>[key, value]</code> 对的 <code>Iterator</code> 对象，返回的迭代器的迭代顺序与 <code>Map</code> 对象的插入顺序相同</p><p>keys：返回一个新的 <code>Iterator</code> 对象。它包含按照顺序插入 <code>Map</code> 对象中每个元素的key值</p><p>values：返回一个新的Iterator对象。它包含按顺序插入Map对象中每个元素的value值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map2 = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map1.<span class="title function_">set</span>(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">map1.<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> iterator1 = map1.<span class="title function_">entries</span>();</span><br><span class="line"><span class="keyword">let</span> iterator2 = map1.<span class="title function_">keys</span>();</span><br><span class="line"><span class="keyword">let</span> iterator3 = map1.<span class="title function_">values</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator1.<span class="title function_">next</span>().<span class="property">value</span>);<span class="comment">// [&quot;0&quot;, &quot;foo&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator1.<span class="title function_">next</span>().<span class="property">value</span>);<span class="comment">// [1, &quot;bar&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator2.<span class="title function_">next</span>().<span class="property">value</span>);<span class="comment">// &quot;0&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator2.<span class="title function_">next</span>().<span class="property">value</span>);<span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator3.<span class="title function_">next</span>().<span class="property">value</span>);<span class="comment">// &quot;foo&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator3.<span class="title function_">next</span>().<span class="property">value</span>);<span class="comment">// &quot;bar&quot;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>map可以使用forEach遍历</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6基础 02</title>
      <link href="/posts/d1233776/"/>
      <url>/posts/d1233776/</url>
      
        <content type="html"><![CDATA[<h2 id="1-ES6-Number"><a href="#1-ES6-Number" class="headerlink" title="1. ES6-Number"></a>1. ES6-Number</h2><h3 id="1-1-Number函数"><a href="#1-1-Number函数" class="headerlink" title="1.1 Number函数"></a>1.1 Number函数</h3><ol><li>Number.isNaN函数</li></ol><p><code>Number.isNaN(&#39;abc&#39;);</code>返回false；判断是否是NaN，除了NaN以外，都为false；没有隐式类型转换</p><ol start="2"><li>Number.isFinite函数</li></ol><p><code>Number.isFinite(Infinity);</code>返回flase；判断数值是否是有限，只有Infinity是无限的，其他数值因为17位精确度问题都有限</p><ol start="3"><li>Number.parseInt函数</li></ol><p><code>Number.parseInt(&quot;124.sd&quot;);</code>返回123； 解析字符串返回一个整数</p><ol start="4"><li>Number.isInteger</li></ol><p><code>Number.isInteger(3.00);</code>但会true；判断是否是整数</p><h3 id="1-2-Math函数"><a href="#1-2-Math函数" class="headerlink" title="1.2 Math函数"></a>1.2 Math函数</h3><p><code>Math.trunc(3.4);</code>返回3；返回传入数值的整数，相当于向下取整</p><p><code>Math.sign(3);</code>返回1；判断数值正负；正数返回1、复数返回-1、0返回0</p><h2 id="2-ES6-Object"><a href="#2-ES6-Object" class="headerlink" title="2. ES6-Object"></a>2. ES6-Object</h2><h3 id="2-1-新写法"><a href="#2-1-新写法" class="headerlink" title="2.1 新写法"></a>2.1 新写法</h3><p>ES6允许在对象字面量中直接写入变量和函数，作为对象的属性和方法。此时，属性名就是变量名，属性的值就是变量的值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="string">&quot;foo&quot;</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    [f]:<span class="string">&#x27;yiKaLuoSi&#x27;</span>,name, age, <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">foo</span>);<span class="comment">//yiKaLuoSi</span></span><br></pre></td></tr></table></figure><h3 id="2-2-Object函数"><a href="#2-2-Object函数" class="headerlink" title="2.2 Object函数"></a>2.2 Object函数</h3><p><code>Object.is(num1, num2);</code>返回false；判断两个值是否严格相等</p><p><code>Object.assign(target,origin);</code>把源对象的属性复制到目标对象上；返回目标对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> source = &#123; <span class="attr">b</span>: <span class="number">4</span>, <span class="attr">c</span>: <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> returnedTarget = <span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target);<span class="comment">//Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br></pre></td></tr></table></figure><p><code>Object.getPrototypeOf(person);</code>用于获取指定对象的原型</p><p><code>Object.setPrototypeOf()</code>用于设置一个指定的对象的原型 </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dict = <span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(&#123;&#125;, <span class="literal">null</span>);<span class="comment">//指定空对象的原型为空</span></span><br></pre></td></tr></table></figure><p><code>Object.entries();</code>遍历对象，返回可枚举属性（除Symbol外）的键值对数组</p><p><code>Object.keys()</code>遍历对象，返回一个给定对象的所有可枚举属性的字符串数组</p><p><code>Object.values()</code>遍历对象，返回一个包含对象自身的所有可枚举属性值的数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(person2));</span><br><span class="line"><span class="comment">//Array [Array [&quot;name&quot;, &quot;zs&quot;], Array [&quot;age&quot;, 19]]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(person2));</span><br><span class="line"><span class="comment">//[&quot;name&quot;, &quot;age&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(person2));</span><br><span class="line"><span class="comment">//[&quot;zs&quot;, 19]</span></span><br></pre></td></tr></table></figure><h2 id="3-ES6-function"><a href="#3-ES6-function" class="headerlink" title="3. ES6-function"></a>3. ES6-function</h2><h3 id="3-1-rest参数（剩余参数）"><a href="#3-1-rest参数（剩余参数）" class="headerlink" title="3.1 rest参数（剩余参数）"></a>3.1 rest参数（剩余参数）</h3><p>如果函数的最后一个命名参数以<code>...</code>为前缀，则它将成为一个由剩余参数组成的真数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">a, b, ...theArgs</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(theArgs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);<span class="comment">//[3,4,5]</span></span><br></pre></td></tr></table></figure><h3 id="3-2-扩展运算符"><a href="#3-2-扩展运算符" class="headerlink" title="3.2 扩展运算符"></a>3.2 扩展运算符</h3><p>用于将一个数组转成一个对应的参数数列</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(...numbers));</span><br></pre></td></tr></table></figure><h3 id="3-3-箭头函数"><a href="#3-3-箭头函数" class="headerlink" title="3.3 箭头函数"></a>3.3 箭头函数</h3><p>基础语法</p><p>(参数列表) =&gt; {返回值}</p><p>高级用法：支持剩余参数和默认参数、支持参数列表结构</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fun</span> = (<span class="params">param1, param2</span>) =&gt; &#123; <span class="keyword">return</span> expression; &#125;</span><br></pre></td></tr></table></figure><h2 id="4-symbol"><a href="#4-symbol" class="headerlink" title="4. symbol"></a>4. symbol</h2><p>symbol 是一种基本数据类型 。<code>Symbol()</code>函数会返回symbol类型的值，该类型具有静态属性和静态方法。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的symbol注册</p><p>每个从<code>Symbol()</code>返回的symbol值都是唯一的。一个symbol值能作为对象属性的标识符；这是该数据类型仅有的目的。</p><p>基础语法：<code>let sym1 = Symbol(&#39;foo&#39;);</code></p><p>symbol作为属性名不会被遍历到</p><h3 id="4-1-Symbol函数"><a href="#4-1-Symbol函数" class="headerlink" title="4.1 Symbol函数"></a>4.1 Symbol函数</h3><ol><li>Object.getOwnPropertySymbols函数</li></ol><p>用于获取对象的symbol属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="title class_">Symbol</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    [name]: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">12</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(person);<span class="comment">//[Symbol(name)]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Reflect.ownKeys函数</li></ol><p>用于获取对象包含symbol属性的所有属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(person);<span class="comment">// [&quot;age&quot;, Symbol(name)]</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Symbol.for(key)函数</li></ol><p>使用给定的key搜索现有的symbol，如果找到则返回该symbol。否则将使用给定的key在全局symbol注册表中创建一个新的symbol</p><p>key：一个字符串，作为 symbol 注册表中与某 symbol 关联的键（同时也会作为该 symbol 的描述）</p><ol start="4"><li>Symbol.keyFor(sym)</li></ol><p>用来获取全局symbol 注册表中与某个 symbol 关联的键</p><h2 id="5-Proxy"><a href="#5-Proxy" class="headerlink" title="5. Proxy"></a>5. Proxy</h2><p>Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）</p><p>实现</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure><p>target：要使用 <code>Proxy</code> 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</p><p>handler：一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 <code>p</code> 的行为。</p><ol><li>get、set、ownKeys、has方法</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">15</span> &#125;</span><br><span class="line"><span class="keyword">let</span> proxy1 = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123;</span><br><span class="line">    <span class="comment">//get方法用于拦截对象的读取属性操作</span></span><br><span class="line">    <span class="comment">//target 目标对象、property 被获取的属性名、receiver Proxy或者继承Proxy的对象</span></span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, property</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lks&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//set方法是设置属性值操作的捕获器</span></span><br><span class="line">    <span class="comment">//target 目标对象、property 将被设置的属性名、value 新属性值</span></span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">target, property, value</span>) &#123;</span><br><span class="line">        target[property] = value;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`已更名为<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//ownKeys用于拦截: </span></span><br><span class="line">    <span class="comment">// Object.getOwnPropertyNames()</span></span><br><span class="line">    <span class="comment">// Object.getOwnPropertySymbols()</span></span><br><span class="line">    <span class="comment">// Object.keys()</span></span><br><span class="line">    <span class="comment">// Reflect.ownKeys()</span></span><br><span class="line">    <span class="comment">//target 目标对象</span></span><br><span class="line">    <span class="attr">ownKeys</span>: <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// has会拦截key in object的操作，结果会返回一个布尔值</span></span><br><span class="line">    <span class="comment">//target 目标对象、property 需要检查是否存在的属性</span></span><br><span class="line">    <span class="attr">has</span>: <span class="keyword">function</span> (<span class="params">target, property</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target[property] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy1.<span class="property">name</span>);<span class="comment">//&#123;name: &quot;lks&quot;, age: 20&#125;</span></span><br><span class="line">proxy1.<span class="property">name</span> = <span class="string">&#x27;ttk&#x27;</span>;<span class="comment">//已更名为ttk</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);<span class="comment">//ttk</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(proxy1));<span class="comment">//[&quot;name&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(person));<span class="comment">// [&quot;name&quot;, &quot;age&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> proxy1);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><ol start="2"><li>apply方法</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy2 = <span class="keyword">new</span> <span class="title class_">Proxy</span>(sum, &#123;</span><br><span class="line">    <span class="comment">// apply会拦截函数的调用</span></span><br><span class="line">    <span class="comment">// target 目标对象（函数）、thisArg 被调用时的上下文对象(必须有)、argumentsList 被调用时的参数数组 </span></span><br><span class="line">    <span class="attr">apply</span>: <span class="keyword">function</span> (<span class="params">target, thisArg, argumentsList</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">target</span>(argumentsList[<span class="number">0</span>], argumentsList[<span class="number">1</span>]) * <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>));<span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">proxy2</span>(<span class="number">1</span>, <span class="number">2</span>));<span class="comment">// 30</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Proxy.revocable方法</li></ol><p><code>Proxy.revocable()</code> 方法用来创建一个可撤销的代理对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person3 = &#123; <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;zs&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> revocable = <span class="title class_">Proxy</span>.<span class="title function_">revocable</span>(person3, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;lks&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(revocable.<span class="property">proxy</span>.<span class="property">name</span>);<span class="comment">//lks</span></span><br><span class="line">revocable.<span class="title function_">revoke</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(revocable.<span class="property">proxy</span>.<span class="property">name</span>); <span class="comment">// 抛出 TypeError</span></span><br></pre></td></tr></table></figure><h2 id="6-for…of"><a href="#6-for…of" class="headerlink" title="6. for…of"></a>6. for…of</h2><p><code>for...of</code>语句在可迭代对象（包括Array，Map，Set，String，arguments 等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句；不能迭代Object对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iterable = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-for总结"><a href="#6-1-for总结" class="headerlink" title="6.1 for总结"></a>6.1 for总结</h3><blockquote><p>forEach可以取得对象的内容，不能操作遍历的进程<br>for in常用于对象的遍历，对遍历数字数组取到的时字符串类型<br>for of写法简洁，除了对象都可以遍历，很先进</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6基础 01</title>
      <link href="/posts/482a66cc/"/>
      <url>/posts/482a66cc/</url>
      
        <content type="html"><![CDATA[<h2 id="1-新增关键字"><a href="#1-新增关键字" class="headerlink" title="1. 新增关键字"></a>1. 新增关键字</h2><h3 id="1-1-let"><a href="#1-1-let" class="headerlink" title="1.1 let"></a>1.1 let</h3><p><strong>let</strong> 语句声明一个块级作用域的本地变量，并且可选的将其初始化为一个值</p><p><code>let</code>允许你声明一个作用域被限制在块级中的变量、语句或者表达式。与<code>var</code>关键字不同的是，<code>var</code>声明的变量只能是全局或者整个函数块的</p><p>就像<code>const</code>一样，<code>let</code>不会在全局声明时（在最顶部的范围）创建<code>window</code>对象的属性</p><ol><li>作用域规则</li></ol><p><code>let</code>声明的变量只在其声明的块或子块中可用，而<code>var</code>声明的变量的作用域是整个封闭函数。</p><ol start="2"><li>重复声明</li></ol><p>在同一个函数或块作用域中重复声明同一个变量会引起<code>SyntaxError</code>错误</p><ol start="3"><li>暂存死区</li></ol><p>通过 <code>let</code> 声明的变量直到它们的定义被执行时才初始化。在变量初始化前访问该变量会导致 <code>ReferenceError</code>，该变量处在一个自块顶部到初始化处理的“暂存死区”中。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">die</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;从die函数开始到下面let声明foo变量，foo变量都处在&quot;暂存死区中&quot;&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> foo = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-const"><a href="#1-2-const" class="headerlink" title="1.2 const"></a>1.2 const</h3><p>常量是块级范围的，常量的值是无法（通过重新赋值）改变的，也不能被重新声明</p><p>此声明创建一个常量，其作用域可以是全局或本地声明的块。 与<code>var</code>变量不同，全局常量不会变为 window 对象的属性。所以必须在声明的同一语句中指定它的值。</p><p><code>const</code>声明创建一个值的只读引用。但这并不意味着它所持有的值是不可变的，只是变量标识符不能重新分配。例如，在引用内容是对象的情况下，这意味着可以改变对象的内容（常量可以定义成对象和数组）。</p><p>关于<strong>暂存死区</strong>的所有说明都适用于<code>let</code>和<code>const</code>。</p><p>一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称。</p><h3 id="1-3-var、let、const的区别总结"><a href="#1-3-var、let、const的区别总结" class="headerlink" title="1.3 var、let、const的区别总结"></a>1.3 var、let、const的区别总结</h3><ol><li>let和const声明的都是块级作用域，var是全局或整个封闭函数的</li><li>let和const不可以重复声明，var可以</li><li>let和const存在暂存死区，未初始化前不能使用。var存在变量提升，可以先声明后赋值</li><li>const在声明时必须初始化</li></ol><h2 id="2-解构赋值"><a href="#2-解构赋值" class="headerlink" title="2. 解构赋值"></a>2. 解构赋值</h2><p><strong>解构赋值</strong>语法是一种 Javascript 表达式。通过解构赋值, 可以将属性/值从对象/数组中取出,赋值给其他变量</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, rest;</span><br><span class="line">[a, b] = [<span class="number">10</span>, <span class="number">20</span>];<span class="comment">//数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 20</span></span><br><span class="line">(&#123; a, b &#125; = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span> &#125;);<span class="comment">//对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 20</span></span><br><span class="line">[a,b] = [<span class="string">&quot;呀哈喽&quot;</span>]<span class="comment">//字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 呀</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 哈</span></span><br></pre></td></tr></table></figure><h3 id="2-1-默认值"><a href="#2-1-默认值" class="headerlink" title="2.1 默认值"></a>2.1 默认值</h3><p>可以为任意对象预设默认值；函数的参数也可以设定默认值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b;</span><br><span class="line">[a=<span class="number">5</span>, b=<span class="number">7</span>] = [<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><h3 id="2-2-交换变量"><a href="#2-2-交换变量" class="headerlink" title="2.2 交换变量"></a>2.2 交换变量</h3><p>在一个解构表达式中可以交换两个变量的值。没有解构赋值的情况下，交换两个变量需要一个临时变量</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line">[a, b] = [b, a];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="2-3-接收函数的返回值"><a href="#2-3-接收函数的返回值" class="headerlink" title="2.3 接收函数的返回值"></a>2.3 接收函数的返回值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a, b;</span><br><span class="line">[a, b] = <span class="title function_">f</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="2-4-嵌套的解构赋值"><a href="#2-4-嵌套的解构赋值" class="headerlink" title="2.4 嵌套的解构赋值"></a>2.4 嵌套的解构赋值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, c;</span><br><span class="line">    [a, [b, c]] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">d</span>: &#123; e &#125; &#125; = &#123; <span class="string">&quot;parent&quot;</span>: &#123; <span class="string">&quot;child&quot;</span>: <span class="number">1</span> &#125; &#125;</span><br></pre></td></tr></table></figure><h2 id="3-ES6-String"><a href="#3-ES6-String" class="headerlink" title="3. ES6-String"></a>3. ES6-String</h2><h3 id="3-1-模板字符串"><a href="#3-1-模板字符串" class="headerlink" title="3.1 模板字符串"></a>3.1 模板字符串</h3><p>模板字符串是允许嵌入表达式的字符串字面量</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Two is <span class="subst">$&#123;a + b&#125;</span> and not <span class="subst">$&#123;<span class="number">2</span> * a + b&#125;</span>.`</span>);</span><br><span class="line"><span class="comment">//&quot;Fifteen is 15 and not 20.&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-新的函数"><a href="#3-2-新的函数" class="headerlink" title="3.2 新的函数"></a>3.2 新的函数</h3><h4 id="1-repeat函数"><a href="#1-repeat函数" class="headerlink" title="1. repeat函数"></a>1. repeat函数</h4><p>返回包含指定字符串的指定数量副本的新字符串，不会改变原字符串</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> two = <span class="string">&quot;abc&quot;</span>.<span class="title function_">repeat</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(two);<span class="comment">//abcabc</span></span><br></pre></td></tr></table></figure><h4 id="2-includes函数"><a href="#2-includes函数" class="headerlink" title="2. includes函数"></a>2. includes函数</h4><p>用来判断一个数组是否包含一个指定的值</p><p>如果在数组中找到了则返回 <code>true</code>，否则为<code>false</code>（如果传入了第二个参数 ，表示在第二个参数指定的索引后寻找） </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">two.<span class="title function_">includes</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="3-startsWith函数"><a href="#3-startsWith函数" class="headerlink" title="3. startsWith函数"></a>3. startsWith函数</h4><p>用来判断当前字符串是否以另外一个给定的子字符串开头</p><p>如果在字符串的开头找到了给定的字符则返回<code>true</code>；否则返回<code>false</code>（如果传入了第二个参数 ，表示在第二个参数指定的索引后判断）</p><h4 id="4-endsWith函数"><a href="#4-endsWith函数" class="headerlink" title="4. endsWith函数"></a>4. endsWith函数</h4><p>用来判断当前字符串是否是以另外一个给定的子字符串结尾的</p><p>如果传入的子字符串在搜索字符串的末尾则返回<code>true</code>；否则将返回 <code>false</code>（如果传入了第二个参数 ，表示要判断的字符串的长度）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">two.<span class="title function_">startsWith</span>(<span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>);<span class="comment">//true</span></span><br><span class="line">two.<span class="title function_">endsWith</span>(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="5-String-raw函数"><a href="#5-String-raw函数" class="headerlink" title="5. String.raw函数"></a>5. String.raw函数</h4><p>用来获取模板字符串的原始字符串；会将字符串中特殊字符转义输出</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fok = <span class="string">&quot;lks&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="property">raw</span><span class="string">`name is <span class="subst">$&#123;fok&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h4 id="6-padStart-和padEnd"><a href="#6-padStart-和padEnd" class="headerlink" title="6. padStart()和padEnd()"></a>6. padStart()和padEnd()</h4><p>字符串方法</p><p>两个参数 -（显示的位数，位数不足时在前面补充的内容）</p><p>start在前面补内容，end在后面补内容</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str= <span class="string">&#x27;12&#x27;</span>;</span><br><span class="line">str.<span class="title function_">padStart</span>(<span class="number">3</span>,<span class="number">0</span>);<span class="comment">//012</span></span><br></pre></td></tr></table></figure><h2 id="4-ES6-Array"><a href="#4-ES6-Array" class="headerlink" title="4. ES6-Array"></a>4. ES6-Array</h2><h3 id="4-1-新的函数"><a href="#4-1-新的函数" class="headerlink" title="4.1 新的函数"></a>4.1 新的函数</h3><h4 id="1-Array-of函数"><a href="#1-Array-of函数" class="headerlink" title="1. Array.of函数"></a>1. Array.of函数</h4><p>用于将一组值，转换成数组<code>Array.of(1, 2, 3, 5, 4);</code>返回数组[1,2,3,5,4]</p><h4 id="2-Array-from函数"><a href="#2-Array-from函数" class="headerlink" title="2. Array.from函数"></a>2. Array.from函数</h4><p>用于从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</p><p>可用于：伪数组对象和可迭代对象；可以后接函数用来处理新数组</p><p><code>Array.from([1, 2, 3], x =&gt; x + x);</code>返回数组[2,4,6]</p><h4 id="3-find-findIndex函数"><a href="#3-find-findIndex函数" class="headerlink" title="3. find/findIndex函数"></a>3. find/findIndex函数</h4><p>用于找出数组中满足提供的测试函数的第一个元素的值/索引</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="keyword">let</span> foundv = array1.<span class="title function_">find</span>(<span class="function"><span class="params">element</span> =&gt;</span> element &gt; <span class="number">10</span>);</span><br><span class="line"><span class="keyword">let</span> foundi = array1.<span class="title function_">findIndex</span>(<span class="function"><span class="params">element</span> =&gt;</span> element &gt; <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foundv);<span class="comment">//12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foundi);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h4 id="4-fill函数"><a href="#4-fill函数" class="headerlink" title="4. fill函数"></a>4. fill函数</h4><p>用一个固定值填充一个数组中从起始索引到终止索引内的全部元素，不包括终止索引。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">fill</span>(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>));<span class="comment">//[1,2,0,0]</span></span><br></pre></td></tr></table></figure><h4 id="5-entries-keys-values-函数"><a href="#5-entries-keys-values-函数" class="headerlink" title="5. entries / keys / values 函数"></a>5. entries / keys / values 函数</h4><p>entries：返回一个新的<code>Array</code>迭代器对象;它的原型（<code>__proto__</code>:Array Iterator）上有一个next方法，可用于遍历迭代器取得原数组的[key,value]</p><p>keys ：返回一个包含数组中每个索引键的<code>Array</code>迭代器对象</p><p>values ：返回一个包含数组中每个索引值的<code>Array</code>迭代器对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> iterator1 = array1.<span class="title function_">entries</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator1.<span class="title function_">next</span>().<span class="property">value</span>);<span class="comment">//Array [0, &quot;a&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator1.<span class="title function_">next</span>().<span class="property">value</span>);<span class="comment">//Array [1, &quot;b&quot;]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css高级技巧</title>
      <link href="/posts/c1dc5784/"/>
      <url>/posts/c1dc5784/</url>
      
        <content type="html"><![CDATA[<h2 id="css高级技巧01"><a href="#css高级技巧01" class="headerlink" title="css高级技巧01"></a>css高级技巧01</h2><h3 id="1-1-显示省略号"><a href="#1-1-显示省略号" class="headerlink" title="1.1 显示省略号"></a>1.1 显示省略号</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 强制文本同一行显示 */</span></span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="comment">/* 溢出内容隐藏 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="comment">/* 省略号 (缺一不可)*/</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure><h3 id="1-2-行内块元素对齐"><a href="#1-2-行内块元素对齐" class="headerlink" title="1.2 行内块元素对齐"></a>1.2 行内块元素对齐</h3><p>文本内容或行内元素相对于同一行内块元素垂直居中</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br></pre></td></tr></table></figure><p>清除行内块元素默认边距 : 转化为块元素并浮动</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br></pre></td></tr></table></figure><p>相邻行内块元素，其中一个设置外边距，相邻的也受到影响:<br>给设置外边距的行内块元素设置<code>vertical-align:top;</code></p><h3 id="1-3-元素的显示与隐藏"><a href="#1-3-元素的显示与隐藏" class="headerlink" title="1.3 元素的显示与隐藏"></a>1.3 元素的显示与隐藏</h3><p>元素的隐藏:  </p><table><thead><tr><th align="center">方法</th><th align="center">dom</th><th align="center">占位置</th></tr></thead><tbody><tr><td align="center">display: none</td><td align="center">没有删除结构</td><td align="center">不占位置</td></tr><tr><td align="center">visibility: hidden</td><td align="center">没有删除结构</td><td align="center">占位置</td></tr><tr><td align="center">opacity: 0</td><td align="center">没有删除结构</td><td align="center">占位置</td></tr></tbody></table><h3 id="1-4-版心与布局流程"><a href="#1-4-版心与布局流程" class="headerlink" title="1.4 版心与布局流程"></a>1.4 版心与布局流程</h3><p>“版心”(可视区) 是指网页中主体内容所在的区域980px 1200px等<br>布局流程：由外到内，由大到小<br>常见布局</p><ul><li>一列固定宽度且居中</li><li>两列左窄右宽</li><li>通栏平均分布</li></ul><h3 id="1-5-精灵图"><a href="#1-5-精灵图" class="headerlink" title="1.5 精灵图"></a>1.5 精灵图</h3><p>为什么要使用精灵图？减少服务器的压力，提高加载的速度<br>精灵图：将多张图片拼接在一张图片上，通过背景的位置属性选择合适<br>位置即可</p><h3 id="1-6-字体图标"><a href="#1-6-字体图标" class="headerlink" title="1.6 字体图标"></a>1.6 字体图标</h3><p><a href="https://www.iconfont.cn/">阿里图标库</a><br>unicodes引入、font-class引入、symbol引入  </p><h3 id="1-7-三角形"><a href="#1-7-三角形" class="headerlink" title="1.7 三角形"></a>1.7 三角形</h3><p>三角形: 盒子的宽高设为0，边框填满盒子、transparent边框透明</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">100px</span> solid;</span><br><span class="line"><span class="attribute">border-color</span>: blue red green orange;</span><br></pre></td></tr></table></figure><p><img src="https://img.hitagi.site/202211142243934.png" alt="盒子宽高为0时的边框"><br>将上、右、下边框设为透明，便得到一个三角形<br><code>border-color: transparent transparent transparent orange;</code><br><img src="https://img.hitagi.site/202211142244997.png" alt="上、右、下边框透明"></p><h3 id="1-8-修改滚动条样式"><a href="#1-8-修改滚动条样式" class="headerlink" title="1.8 修改滚动条样式"></a>1.8 修改滚动条样式</h3><p>::-webkit-scrollbar 滚动条整体部分<br>::-webkit-scrollbar-thumb 滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）<br>::-webkit-scrollbar-track 滚动条的轨道（里面装有Thumb）<br>::-webkit-scrollbar-button 滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。<br>::-webkit-scrollbar-track-piece 内层轨道，滚动条中间部分（除去）<br>::-webkit-scrollbar-corner 边角，即两个滚动条的交汇处<br>::-webkit-resizer 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件  </p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 整个滚动条 */</span></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 滚动条有滑块的轨道部分 */</span></span><br><span class="line">::-webkit-scrollbar-track-piece &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 滚动条滑块(竖向:vertical 横向:horizontal) */</span></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#f2f2f2</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 滚动条滑块hover */</span></span><br><span class="line">::-webkit-scrollbar-thumb:hover &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#999999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 同时有垂直和水平滚动条时交汇的部分 */</span></span><br><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;    <span class="comment">/* 修复交汇时出现的白块 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jquery基础 02</title>
      <link href="/posts/b83d806d/"/>
      <url>/posts/b83d806d/</url>
      
        <content type="html"><![CDATA[<h2 id="1-事件机制"><a href="#1-事件机制" class="headerlink" title="1. 事件机制"></a>1. 事件机制</h2><h3 id="1-1-事件注册"><a href="#1-1-事件注册" class="headerlink" title="1.1 事件注册"></a>1.1 事件注册</h3><p><code>bind()</code>方法用于向被选元素添加一个或多个事件处理程序</p><p><code>on()</code>方法只能添加一个事件（不好用）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.box1&quot;</span>).<span class="title function_">bind</span>(&#123;</span><br><span class="line">    <span class="title function_">mouseover</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">mouseout</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;black&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&quot;.box1&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span>); &#125;);</span><br></pre></td></tr></table></figure><h3 id="1-2-事件对象event"><a href="#1-2-事件对象event" class="headerlink" title="1.2 事件对象event"></a>1.2 事件对象event</h3><p>event对象有以下常用属性</p><ul><li>type：事件类型；which：触发该事件的鼠标按钮或键盘的键；</li><li>target：触发事件的DOM元素；</li><li>pageX/Y：事件触发时鼠标相对页面左上角的水平/垂直坐标</li><li>clientX/Y：事件触发时鼠标相对于窗口的水平，垂直坐标</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.box2&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-3-jQuery-each-方法"><a href="#1-3-jQuery-each-方法" class="headerlink" title="1.3 jQuery.each()方法"></a>1.3 jQuery.each()方法</h3><p>用于遍历指定的对象和数组</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>];</span><br><span class="line">$.<span class="title function_">each</span>(arr, <span class="keyword">function</span> (<span class="params">index, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是第<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>元素,值是<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-HTML的设置与捕获"><a href="#2-HTML的设置与捕获" class="headerlink" title="2. HTML的设置与捕获"></a>2. HTML的设置与捕获</h2><h3 id="2-1-html"><a href="#2-1-html" class="headerlink" title="2.1 html()"></a>2.1 html()</h3><p>返回或设置所选元素的html内容；会解析富文本</p><p><code>$(&#39;.box&#39;).html(&#39;&lt;b&gt;Hello world!&lt;/b&gt;&#39;);</code></p><p><code>$(&#39;.box&#39;).html();</code> // <code>&lt;b&gt;Hello world!&lt;/b&gt;</code></p><h3 id="2-2-text"><a href="#2-2-text" class="headerlink" title="2.2 text()"></a>2.2 text()</h3><p>返回或设置所选元素的文本内容；</p><p><code>$(&#39;.box&#39;).text();</code> // Hello world!</p><p><code>$(&#39;.box&#39;).text(&#39;hello vivy&#39;);</code></p><h3 id="2-3-val"><a href="#2-3-val" class="headerlink" title="2.3 val()"></a>2.3 val()</h3><p>返回或设置表单字段的值</p><p><code>$(&#39;input&#39;).val();</code> // 获取value属性的值</p><p><code>$(&#39;input&#39;).val(&#39;设置的value属性的值&#39;);</code></p><blockquote><p>不常用警告：上述三个方法的都有一个可选参数：回调函数，回调函数有两个参数：被选元素列表中当前元素的下标，以及原始（旧的）值；返回值为上述三个方法想要设置的字符串；</p></blockquote><h3 id="2-4-attr-、prop"><a href="#2-4-attr-、prop" class="headerlink" title="2.4 attr()、prop()"></a>2.4 attr()、prop()</h3><ol><li>属性值为布尔类型的属性，需要使用prop();</li><li>自定义属性需要使用attr();</li><li>其他属性两个通用</li></ol><h2 id="3-HTML的页面尺寸操作"><a href="#3-HTML的页面尺寸操作" class="headerlink" title="3. HTML的页面尺寸操作"></a>3. HTML的页面尺寸操作</h2><ul><li><code>width()</code> 和 <code>height()</code> 方法</li></ul><p>设置或返回元素的宽度/高度（不包括内边距、边框或外边距）</p><ul><li><code>innerWidth()</code> 和 <code>innerHeight()</code> 方法</li></ul><p>设置或返回元素的宽度（包括内边距）</p><ul><li><code>outerWidth()</code> 和 <code>outerHeight()</code> 方法</li></ul><p>设置或返回元素的宽度（包括内边距和边框）</p><ul><li><code>scrollTop()</code> 和 <code>scrollLeft()</code> 方法</li></ul><p>设置或返回元素被滚动条卷曲的高度</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">width</span>(<span class="number">20</span>);</span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">innerWidth</span>(<span class="number">30</span>);</span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">outerWidth</span>(<span class="number">32</span>);</span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">scrollTop</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="4-添加-删除元素"><a href="#4-添加-删除元素" class="headerlink" title="4. 添加/删除元素"></a>4. 添加/删除元素</h2><ul><li><code>append()</code>和<code>prepend()</code> 方法</li></ul><p><code>append()</code>：添加到被选元素子元素的结尾</p><p><code>prepend()</code>：添加到被选元素子元素的开头</p><ul><li><code>after()</code>和<code>before()</code>方法</li></ul><p><code>after()</code>：添加到被选元素的后面</p><p><code>before()</code>：添加到被选元素的前面</p><ul><li><code>remove()</code>和<code>empty()</code>方法</li></ul><p><code>remove()</code>：删除被选元素及其子元素</p><p><code>empty()</code>：清空被选元素，保留本身</p><h2 id="5-插件的引用"><a href="#5-插件的引用" class="headerlink" title="5. 插件的引用"></a>5. 插件的引用</h2><p><code>jquery.color.js</code>插件，引入后能支持animate动画改变颜色(原生jQuery不支持动画中颜色的改变)</p><p><code>jquery.lazyload.js</code>插件，懒加载；引入后图片在浏览器可视区域外，图片不会被载入，直到用户将页面滚动到它们所在的位置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//图片路径属性要设置为data-original</span></span><br><span class="line">&lt;img <span class="keyword">class</span>=<span class="string">&quot;lazy&quot;</span> data-original=<span class="string">&quot;./image/img1.jpg&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">$(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">lazyload</span>(&#123;</span><br><span class="line">    <span class="comment">// threshold: 提前开始加载高度. .</span></span><br><span class="line">    <span class="attr">threshold</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="comment">//failurelimit: 一次次加载图片的张数(图片排序混乱时使用)</span></span><br><span class="line">    <span class="attr">failurelimit</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="comment">// failure_ limit:同failurelimit</span></span><br><span class="line">    <span class="attr">failure_limit</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="comment">// event: 设置何种事件触发时才加载，默认scroll</span></span><br><span class="line">    <span class="attr">event</span>: <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">    <span class="comment">// effect:使用何种载入效果</span></span><br><span class="line">    <span class="attr">effect</span>: <span class="string">&quot;fadeIn&quot;</span>,</span><br><span class="line">    <span class="comment">// container: 对某容器中的图片实现效果</span></span><br><span class="line">    <span class="attr">container</span>: $(<span class="string">&quot;#container&quot;</span>),</span><br><span class="line">    <span class="comment">// data_ attribute: 用于设置lazyload 操作的自定义属性(data-后面的属性名)</span></span><br><span class="line">    <span class="attr">data_attribute</span>: <span class="string">&quot;attr&quot;</span>,</span><br><span class="line">    <span class="comment">// skip_ invisible: 是否不加载不可见图片。 true不加载， false 加载.</span></span><br><span class="line">    <span class="attr">skip_invisible</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// appear:用于在图片加载之前到显示图片之间的处理函数，一般用于展示加载动画.</span></span><br><span class="line">    <span class="attr">appear</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;,</span><br><span class="line">    <span class="comment">// load:用于图片加载完毕之后执行的函数.</span></span><br><span class="line">    <span class="attr">load</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;,</span><br><span class="line">    <span class="comment">// placeholder:设置占位图片路径</span></span><br><span class="line">    <span class="attr">placeholder</span>: <span class="string">&quot;img/lazy.gif&quot;</span>,</span><br><span class="line">    <span class="comment">// effectspeed: 设置动画持续时长，单位毫秒</span></span><br><span class="line">    <span class="attr">effectspeed</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>jquery.ui.js</code>插件，引入后可以方便的使用一些用户界面交互、特效、小部件。</p><p>要配合<code>jquery-ui.min.css</code>一起食用</p><p><a href="https://www.jqueryui.org.cn/api/43.html">API文档</a></p><ul><li><a href="https://www.jqueryui.org.cn/api/43.html">特效（Effects）</a></li><li><a href="https://www.jqueryui.org.cn/api/52.html">小部件（Widgets）</a></li></ul><p><code>echarts.min.js</code>插件，引入后可以快捷绘制各种图标</p><p><a href="https://echarts.apache.org/zh/option.html#title">API文档</a></p><p><a href="https://echarts.apache.org/examples/zh/index.html">示例</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jquery基础 01</title>
      <link href="/posts/2134d1d7/"/>
      <url>/posts/2134d1d7/</url>
      
        <content type="html"><![CDATA[<p>jQuery 是一个着重简化 DOM 操作，AJAX 调用和事件 (en-US)处理的 JavaScript 库。一些前端 JavaScript 开发者经常会用到它。</p><p>主要解决：复杂DOM操作、兼容性问题</p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><ul><li>线上CDN方式引入</li></ul><blockquote><p>jsDelivr CDN</p><p><code>&lt;script src=&quot;https://npm.elemecdn.com/jquery@3.5.1/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</code></p><p>CDNJS CDN</p><p><code>&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;</code></p><p>Google CDN</p><p><code>&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;</code></p><p>Microsoft CDN</p><p><code>&lt;script src=&quot;https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.5.1.min.js&quot;&gt;&lt;/script&gt;</code></p></blockquote><ul><li><p>下载引入</p></li><li><p>jQuery和DOM的转化</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jQuery转DOM</span></span><br><span class="line">$(<span class="string">&#x27;.box&#x27;</span>)[<span class="number">0</span>];<span class="comment">//伪数组中的一项</span></span><br><span class="line"><span class="comment">// DOM转jQuery</span></span><br><span class="line"><span class="keyword">let</span> div2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box2&#x27;</span>);</span><br><span class="line">$(div2);</span><br></pre></td></tr></table></figure><h2 id="2-入口函数"><a href="#2-入口函数" class="headerlink" title="2. 入口函数"></a>2. 入口函数</h2><p>jQuery和DOM入口函数的区别</p><ul><li>写法不同，jQuery的写法更简单</li><li>jQuery入口函数可以写多个；</li><li>所有标签(DOM)都加载之后就会执行，不会等到所有资源文件加载完成后才执行</li></ul><p>入口函数的写法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123; jQuery代码 &#125;)</span><br><span class="line"><span class="comment">//JavaScript中是window.onload</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; js代码 &#125;</span><br></pre></td></tr></table></figure><h2 id="3-选择器"><a href="#3-选择器" class="headerlink" title="3. 选择器"></a>3. 选择器</h2><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>标签选择器</td><td>$(“div”)</td><td>获取同一类标签的所有元素</td></tr><tr><td>ID选择器</td><td>$(“#id”)</td><td>获取指定ID的元素</td></tr><tr><td>类选择器</td><td>$(“.class”)</td><td>获取指定class名的元素</td></tr><tr><td>并集选择器</td><td>$(“div,p”)</td><td>使用逗号分隔，获取所有的div，p元素</td></tr><tr><td>交集选择器</td><td>$(“div.class”)</td><td>中间没有空格，获取即是div又是类名为class的元素</td></tr><tr><td>子代选择器</td><td>$(“ul&gt;li”)</td><td>获取ul下第一层（子代）li元素</td></tr><tr><td>后代选择器</td><td>$(“ul li”)</td><td>获取ul下所有（后代）li元素</td></tr></tbody></table><h3 id="3-1-过滤选择器"><a href="#3-1-过滤选择器" class="headerlink" title="3.1 过滤选择器"></a>3.1 过滤选择器</h3><table><thead><tr><th>方法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>:eq（index）</td><td>$(“li:eq(2)”)</td><td>获取到的li元素中，选择索引号为2的元素，索引号index从0开始</td></tr><tr><td>:odd</td><td>$(“li:odd”)</td><td>获取到的li元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>$(“li:even”)</td><td>获取到的li元素中，选择索引号为偶数的元素</td></tr></tbody></table><h3 id="3-2-筛选选择器"><a href="#3-2-筛选选择器" class="headerlink" title="3.2 筛选选择器"></a>3.2 筛选选择器</h3><table><thead><tr><th>方法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>children(selector)</td><td>$(“ul”).children(“li”)</td><td>相当于子代选择器</td></tr><tr><td>find(selector)</td><td>$(“ul”).find(“li”)</td><td>相当于后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(“#first”).siblings(“li”)</td><td>获取兄弟节点，不包括自身</td></tr><tr><td>parent()</td><td>$(“#first”).parent()</td><td>获取父元素</td></tr><tr><td>eq(index)</td><td>$(“li”).eq(2)</td><td>相当于$(“li:eq(2)”)</td></tr><tr><td>next()</td><td>$(“li”).next()</td><td>获取下一个兄弟元素</td></tr><tr><td>prev()</td><td>$(“li”).prev()</td><td>获取上一个兄弟元素</td></tr><tr><td>index()</td><td>$(“li”).index()</td><td>获取当前位置（索引）</td></tr><tr><td>not(selector)</td><td>$(“li”).not(“.class”)</td><td>获取不带有类名class的所有li元素</td></tr></tbody></table><h2 id="4-事件"><a href="#4-事件" class="headerlink" title="4. 事件"></a>4. 事件</h2><p>事件同javaScript，没有”on”</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line"><span class="comment">// 动作触发后执行的代码 </span></span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#ffffff&quot;</span>);<span class="comment">//this指向该元素 </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-css样式"><a href="#5-css样式" class="headerlink" title="5. css样式"></a>5. css样式</h2><ul><li>设置元素的css属性</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>);<span class="comment">//返回指定css属性的值</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;yellow&quot;</span>);<span class="comment">//设置元素的一个css属性</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(&#123;<span class="string">&quot;background-color&quot;</span>:<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;font-size&quot;</span>:<span class="string">&quot;200%&quot;</span>&#125;);<span class="comment">//设置元素的多个css</span></span><br></pre></td></tr></table></figure><h2 id="6-css类"><a href="#6-css类" class="headerlink" title="6.  css类"></a>6.  css类</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;para1&#x27;</span>);<span class="comment">//为元素添加指定的css类名</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;para1&#x27;</span>);<span class="comment">//移除元素指定的css类名</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">toggleClass</span>(<span class="string">&#x27;para1&#x27;</span>);<span class="comment">//切换元素指定类名的添加/删除状态</span></span><br></pre></td></tr></table></figure><h2 id="7-jquary动画"><a href="#7-jquary动画" class="headerlink" title="7. jquary动画"></a>7. jquary动画</h2><h3 id="7-1-隐藏显示"><a href="#7-1-隐藏显示" class="headerlink" title="7.1 隐藏显示"></a>7.1 隐藏显示</h3><p>hide() 和 show() 方法用来隐藏和显示元素</p><p><code>$(&quot;p&quot;).hide(); </code>  <code>$(&quot;p&quot;).show();</code> </p><p>toggle() 方法来切换隐藏/显示状态</p><p><code>$(&quot;p&quot;).show();</code></p><h3 id="7-2-淡入淡出"><a href="#7-2-淡入淡出" class="headerlink" title="7.2 淡入淡出"></a>7.2 淡入淡出</h3><p>fadeIn() 和 fadeOut() 方法用于淡入/淡出元素</p><p><code>$(&quot;p&quot;).fadeIn(); </code>  <code>$(&quot;p&quot;).fadeOut();</code></p><p>fadeToggle() 方法用来切换淡入/淡出效果</p><p><code> fadeToggle();</code></p><h3 id="7-3-滑入滑出"><a href="#7-3-滑入滑出" class="headerlink" title="7.3 滑入滑出"></a>7.3 滑入滑出</h3><p>slideDown() </p><h3 id="7-4-自定义动画"><a href="#7-4-自定义动画" class="headerlink" title="7.4 自定义动画"></a>7.4 自定义动画</h3><p>animate() 方法用于创建自定义动画；有三个参数。</p><ul><li>第一个参数是一个对象，属性与属性值是元素的目标css样式</li><li>第二个参数是动画周期，单位为ms</li><li>第三个参数是回调函数，在动画执行完后调用</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">mouseenter</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;100px&#x27;</span></span><br><span class="line">    &#125;, <span class="number">2000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;动画执行完毕&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript基础 05</title>
      <link href="/posts/89c97205/"/>
      <url>/posts/89c97205/</url>
      
        <content type="html"><![CDATA[<h2 id="1-正则表达式"><a href="#1-正则表达式" class="headerlink" title="1. 正则表达式"></a>1. 正则表达式</h2><p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。</p><h3 id="1-1-创建正则表达式"><a href="#1-1-创建正则表达式" class="headerlink" title="1.1 创建正则表达式"></a>1.1 创建正则表达式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字面量</span></span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/\w+/</span>;</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\w+&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="1-2-特殊字符"><a href="#1-2-特殊字符" class="headerlink" title="1.2 特殊字符"></a>1.2 特殊字符</h3><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>\d</td><td>匹配一个数字</td></tr><tr><td>\D</td><td>匹配一个非数字字符</td></tr><tr><td>\s</td><td>匹配一个空白符（包括空格，制表符）</td></tr><tr><td>\S</td><td>匹配一个非空白字符</td></tr><tr><td>\w</td><td>匹配一个单字字符(字母或数字或下划线)</td></tr><tr><td>\W</td><td>匹配一个非单字字符（不是字母，数字，下划线）</td></tr></tbody></table><p>限定符</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>匹配输入的开始</td></tr><tr><td>$</td><td>匹配输入的结束</td></tr><tr><td>*</td><td>匹配前一个表达式 0 次或多次。等价于 <code>&#123;0,&#125;</code></td></tr><tr><td>+</td><td>匹配前面一个表达式 1 次或者多次。等价于 <code>&#123;1,&#125;</code></td></tr><tr><td>?</td><td>匹配前面一个表达式 0 次或者 1 次。等价于 <code>&#123;0,1&#125;</code></td></tr><tr><td>.</td><td>默认匹配除换行符之外的任何单个字符</td></tr></tbody></table><p>组合符</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>x(?=y)</td><td>匹配’x’仅仅当’x’后面跟着’y’.这种叫做先行断言</td></tr><tr><td>(?&lt;=y)x</td><td>匹配’x’仅当’x’前面是’y’.这种叫做后行断言</td></tr><tr><td>x(?!y)</td><td>仅仅当’x’后面不跟着’y’时匹配’x’，这被称为正向否定查找</td></tr><tr><td>(?&lt;!y)x</td><td>仅仅当’x’前面不是’y’时匹配’x’，这被称为反向否定查找</td></tr><tr><td>x|y</td><td>匹配‘x’或者‘y’</td></tr><tr><td>{n}</td><td>n 是一个正整数，匹配前面一个字符刚好出现了 n 次</td></tr><tr><td>{n,}</td><td>n是一个正整数，匹配前一个字符至少出现了n次</td></tr><tr><td>{n,m}</td><td>n 和 m 都是整数。匹配前面的字符至少n次，最多m次</td></tr><tr><td>[xyz]</td><td>一个字符集合。匹配方括号中的任意字符</td></tr><tr><td>[^xyz]</td><td>一个反向字符集, 它匹配任何没有包含在方括号中的字符</td></tr><tr><td>[\u4e00-\u9fa5]</td><td>匹配汉字</td></tr></tbody></table><p>标志</p><table><thead><tr><th>标志</th><th>描述</th></tr></thead><tbody><tr><td>g</td><td>全局搜索</td></tr><tr><td>i</td><td>不区分大小写</td></tr></tbody></table><h2 id="2-正则匹配"><a href="#2-正则匹配" class="headerlink" title="2. 正则匹配"></a>2. 正则匹配</h2><p>regexp.test(str)</p><p>方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配；</p><p>返回值：如果正则表达式与指定的字符串匹配 ，返回<code>true</code>；否则<code>false</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello world!&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> result = <span class="regexp">/^hello/</span>.<span class="title function_">test</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="3-正则提取"><a href="#3-正则提取" class="headerlink" title="3. 正则提取"></a>3. 正则提取</h2><p>str.match(regexp)</p><p>方法检索返回一个字符串匹配正则表达式的结果</p><p>返回值：</p><ul><li>如果使用g标志，则将返回与完整正则表达式匹配的所有结果的数组</li><li>如果未使用g标志，则仅返回第一个完整匹配的数组</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> paragraph = <span class="string">&#x27;This is lazy dog. It barked.&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/[A-Z]/</span>;</span><br><span class="line"><span class="keyword">let</span> found = paragraph.<span class="title function_">match</span>(regex);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(found);<span class="comment">//[&quot;T&quot;, &quot;I&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="4-正则替换"><a href="#4-正则替换" class="headerlink" title="4. 正则替换"></a>4. 正则替换</h2><p>str.replace(substr | regexp, newSubStr | function)</p><p>replace() 方法返回一个由新值替换旧值后产生的新字符串。替换模式可以是一个字符串或者一个正则表达式，新值可以是一个字符串或者一个每次匹配都要调用的回调函数</p><p>返回值：一个由替换规则替换后的新字符串</p><p>当第二个参数为回调函数时，当匹配执行后，该函数就会执行。 函数的返回值作为替换字符串。另外要注意的是，如果第一个参数是正则表达式，并且其为全局匹配模式，那么这个方法将被多次调用，每次匹配都会被调用。</p><p>回调函数的常用参数如下</p><table><thead><tr><th>参数名</th><th>代表的值</th></tr></thead><tbody><tr><td><code>match</code></td><td>匹配的子串</td></tr><tr><td><code>p1,p2, ...</code></td><td>假如replace()方法的第一个参数是一个正则表达式，则代表第n个括号匹配的字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;10101&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> list = [];</span><br><span class="line"><span class="comment">// replace第一个参数可以为正则表达式，这时第二个参数为回调函数，返回值将替换掉正则表达式匹配到的结果</span></span><br><span class="line"><span class="keyword">var</span> fk = str.<span class="title function_">replace</span>(<span class="regexp">/(1)|(0)/g</span>, replacer);</span><br><span class="line"><span class="comment">// 第一个参数match为匹配到的字符串，第二个参数为正则表达式中第一个括号匹配到的字符串，以此类推</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">replacer</span>(<span class="params">match, p1, p2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p1) &#123; list.<span class="title function_">push</span>(<span class="string">&quot;on&quot;</span>) &#125;</span><br><span class="line">    <span class="keyword">if</span> (p2) &#123; list.<span class="title function_">push</span>(<span class="string">&quot;off&quot;</span>) &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);<span class="comment">// [&quot;on&quot;, &quot;off&quot;, &quot;on&quot;, &quot;off&quot;, &quot;on&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fk);<span class="comment">// 11111</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript基础 04</title>
      <link href="/posts/fece4293/"/>
      <url>/posts/fece4293/</url>
      
        <content type="html"><![CDATA[<h2 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1. 面向对象"></a>1. 面向对象</h2><p>这是一种编程思想，需要多加练习才能掌握，有点只可意会不可言传的味道。</p><p>我的理解是面向对象就是无论要写什么程序，都可以通过封装一个抽象的集合，通过实例化这个抽象的集合来完成我们需要的工作。</p><p>打个比方，我们需要写一个制冷的程序。这时可以封装一个抽象的冰箱集合，构建这个抽象冰箱的时候给它一些属性和方法，其中就有制冷的方法，然后通过实例化这个抽象的冰箱集合，调用它制冷的方法来实现我们最初制冷的目的。</p><p>面向过程其实就是需要什么就直接写什么，还是比如我们需要一个制冷的程序，就需要一步一步的写通电，电能使蒸发器工作，蒸发器使制冷剂汽化吸热，制冷。如此以来实现这个制冷的程序。而在面向对象的编程中，这些都会被封装在一个对象的方法中。</p><p>面向对象在封装的过程中使比较麻烦的，但是优点是编程灵活，代码可复用，高度模块化，易于维护和开发。</p><h3 id="1-1-三大特征"><a href="#1-1-三大特征" class="headerlink" title="1.1 三大特征"></a>1.1 三大特征</h3><p>封装：需要的属性方法都在一个抽象对象中，用到时只需调用即可</p><p>继承：新建的抽象对象集合可以继承已有抽象集合的属性和方法</p><p>多态：一个抽象集合可以有各种方法</p><h3 id="1-2-基本和引用数据类型"><a href="#1-2-基本和引用数据类型" class="headerlink" title="1.2 基本和引用数据类型"></a>1.2 基本和引用数据类型</h3><p>基本数据类型存储在栈中，占用空间固定，内存栈会在基本数据类型引用结束后就会销毁</p><p>引用数据类型即对象，存储在堆中，占用空间不固定，其属性和方法都是以地址的形式存储在栈中，需要引用时也是先访问地址，再通过地址访问堆内存中的数据。只有在一个对象没有任何变量引用它时，才会被系统的垃圾回收机制回收。</p><h3 id="1-3-构造函数和实例化对象"><a href="#1-3-构造函数和实例化对象" class="headerlink" title="1.3 构造函数和实例化对象"></a>1.3 构造函数和实例化对象</h3><p>构造函数是实例化对象时用到的一个函数，通过它可以把抽象的对象集合实例化一个具体的对象。</p><p>大致的过程如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand, color</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> phone4 = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;huawei&quot;</span>, <span class="string">&quot;black&quot;</span>); <span class="comment">//实例化对象</span></span><br></pre></td></tr></table></figure><h4 id="1-3-1-constructor属性"><a href="#1-3-1-constructor属性" class="headerlink" title="1.3.1 constructor属性"></a>1.3.1 constructor属性</h4><p>构造函数实例化对象的constructor属性指向的是构造函数本身</p><h3 id="1-4-解决内存浪费问题"><a href="#1-4-解决内存浪费问题" class="headerlink" title="1.4 解决内存浪费问题"></a>1.4 解决内存浪费问题</h3><p>构造函数每次实例化时都会开辟新的空间，即使实例化的属性的方法相同，所以就会存在内存浪费问题</p><h4 id="1-4-1-原型"><a href="#1-4-1-原型" class="headerlink" title="1.4.1 原型"></a>1.4.1 原型</h4><p>在Javascript 中，每一个构造函数都有一个 prototype 属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承</p><p>所以可以把需要共享的属性和方法都定义在prototype对象上</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">study</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;学习&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> student1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br></pre></td></tr></table></figure><p>这时所有实例的study方法都指向同一个内存地址</p><p>原型的优点：避免内存浪费，数据可以共享</p><h4 id="1-4-2-实例化对象的查找规则"><a href="#1-4-2-实例化对象的查找规则" class="headerlink" title="1.4.2 实例化对象的查找规则"></a>1.4.2 实例化对象的查找规则</h4><p>先在自己身上找，找到即返回，自己身上找不到，则沿着原型链（构造函数的prototype对象）向上查找，找到即返回，如果一直到原型链的末端还没有找到，则返回 undefined</p><h4 id="1-4-3-原型链指向"><a href="#1-4-3-原型链指向" class="headerlink" title="1.4.3 原型链指向"></a>1.4.3 原型链指向</h4><p>每个构造函数都有一个原型对象prototype，原型对象可以自定义。</p><p>每个对象都有<code>__proto__</code>属性它指向的是构造函数的原型对象</p><p>每个对象都有<code>__proto__</code>属性，原型对象的<code>__proto__</code>属性指向上一级(父级)的构造函数的原型对象；</p><h2 id="2-继承"><a href="#2-继承" class="headerlink" title="2. 继承"></a>2. 继承</h2><h3 id="2-1-原型继承"><a href="#2-1-原型继承" class="headerlink" title="2.1 原型继承"></a>2.1 原型继承</h3><p>因为原型的指向可以改变，所以让子类的原型指向父类的实例化对象,就可以实现子类继承父类的属性和方法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">cloth</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cloth</span> = cloth;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> zs = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;校服&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zs.<span class="property">name</span>);<span class="comment">//继承了父类Person的name</span></span><br></pre></td></tr></table></figure><h3 id="2-2-构造函数继承"><a href="#2-2-构造函数继承" class="headerlink" title="2.2 构造函数继承"></a>2.2 构造函数继承</h3><h4 id="2-2-1-call、apply、bind"><a href="#2-2-1-call、apply、bind" class="headerlink" title="2.2.1 call、apply、bind"></a>2.2.1 call、apply、bind</h4><ul><li>call()方法可以进行普通函数的调用</li><li>call()方法可以改变this的指向，如果没有参数，this指向window</li><li>call()方法可以改变this的指向，如果有一个参数，this指向该参数</li><li>call()方法可以改变this的指向，如果有多个参数，this指向第一个参数，剩下的是个参数列表</li></ul><p>这三个都是调用函数的方法，除了下述区别外，其余用法相同</p><ol><li>call和apply都是立即调用，bind返回的是一个函数，需要再加()来执行调用</li><li>call第一个参数后是参数列表。apply是一个参数列表的数组</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parents</span>(<span class="params">fang, money</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fang</span> = fang;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">money</span> = money;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">che, fang, money</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">che</span> = che;</span><br><span class="line">    <span class="title class_">Parents</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, fang, money);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> lisi = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&quot;特斯拉&quot;</span>, <span class="string">&quot;房子&quot;</span>, <span class="string">&quot;钱&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi);<span class="comment">//lisi继承Parents的fang和money属性</span></span><br></pre></td></tr></table></figure><h3 id="2-3-拷贝继承"><a href="#2-3-拷贝继承" class="headerlink" title="2.3 拷贝继承"></a>2.3 拷贝继承</h3><h4 id="2-3-1-浅拷贝、深拷贝"><a href="#2-3-1-浅拷贝、深拷贝" class="headerlink" title="2.3.1 浅拷贝、深拷贝"></a>2.3.1 浅拷贝、深拷贝</h4><p>浅拷贝：只有栈内存中的地址发生变化，但不同的地址仍然引用堆内存中相同的数据</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> copy = list;</span><br><span class="line">copy.<span class="title function_">push</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);<span class="comment">//1，2，3，4，5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copy);<span class="comment">//1，2，3，4，5</span></span><br></pre></td></tr></table></figure><p>深拷贝：栈内存中的地址和堆内存中的数据都会复制一份新的存储在相应的栈和堆中</p><p>深拷贝有四种方法：</p><ul><li>数组方法</li></ul><p>for循环</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list1 = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> list2 = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list1.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        list2.<span class="title function_">push</span>(list1[i]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>  slice切割</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list3 = [<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">var</span> list4 = list3.<span class="title function_">slice</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>  concat拼接</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list5 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> list6 = list5.<span class="title function_">concat</span>();</span><br></pre></td></tr></table></figure><ul><li>对象方法</li></ul><p>for…in遍历</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;jerry&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    ok[key] = obj[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-拷贝继承"><a href="#2-3-2-拷贝继承" class="headerlink" title="2.3.2 拷贝继承"></a>2.3.2 拷贝继承</h4><p>把父对象的的属性、属性值循环遍历给另一个子对象</p><h2 id="3-闭包与递归"><a href="#3-闭包与递归" class="headerlink" title="3. 闭包与递归"></a>3. 闭包与递归</h2><h3 id="3-1-闭包"><a href="#3-1-闭包" class="headerlink" title="3.1 闭包"></a>3.1 闭包</h3><p>一个函数和对其周围状态的引用捆绑在一起，这样的组合就是闭包。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">num</span>(<span class="params">m, n</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (n - m + <span class="number">1</span>) + m);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">num</span>(<span class="number">1</span>,<span class="number">9</span>)();</span><br><span class="line"><span class="title function_">num</span>(<span class="number">1</span>,<span class="number">9</span>)();</span><br><span class="line"><span class="comment">//返回为同一个值，调用num函数返回的匿名函数，匿名函数只有控制台打印num的功能，而num的值在num(m.n)上已经决定了，并存储在num下的块作用域中。</span></span><br></pre></td></tr></table></figure><h3 id="3-2-递归"><a href="#3-2-递归" class="headerlink" title="3.2 递归"></a>3.2 递归</h3><p>返回时调用自己</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//斐波那契递归</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fib</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fib</span>(n - <span class="number">2</span>) + <span class="title function_">fib</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fib</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript基础 03</title>
      <link href="/posts/60aad730/"/>
      <url>/posts/60aad730/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建元素"><a href="#1-创建元素" class="headerlink" title="1. 创建元素"></a>1. 创建元素</h2><ol><li><p>document.write()</p><p>弊端: 只能在body中添加元素</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;div id=&quot;box1&quot;&gt;&lt;/div&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>innerHTML</p><p>弊端：在同级下只能添加一种元素，多个会覆盖；可以采用+=的方式避免覆盖</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;&lt;p&gt;1111&lt;/p&gt;&quot;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>).<span class="property">innerHTML</span> += <span class="string">&quot;&lt;p&gt;2233&lt;/p&gt;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>document.createElement()</p><p>父元素.appendChild(子元素)：给父元素末尾添加子元素</p><p>父元素.insertBefore(子元素, 兄弟元素)：给父元素的兄弟元素前添加子元素</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> pp = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> kk = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    pp.<span class="property">innerHTML</span> = <span class="string">&quot;ppp&quot;</span></span></span><br><span class="line"><span class="language-javascript">    kk.<span class="property">innerHTML</span> = <span class="string">&quot;kkk&quot;</span></span></span><br><span class="line"><span class="language-javascript">    box1.<span class="title function_">appendChild</span>(pp)<span class="comment">//在div末尾插入pp</span></span></span><br><span class="line"><span class="language-javascript">    box1.<span class="title function_">insertBefore</span>(kk, pp)<span class="comment">//在pp前插入kk</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-事件进阶"><a href="#2-事件进阶" class="headerlink" title="2. 事件进阶"></a>2. 事件进阶</h2><h3 id="2-1-监听事件"><a href="#2-1-监听事件" class="headerlink" title="2.1 监听事件"></a>2.1 监听事件</h3><p>同名的事件会被覆盖，解决办法就是绑定监听事件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, fun1)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三参数监听事件</p><p>addEventListener(“事件的类型”,事件的处理程序,是否冒泡)；第三个参数true为捕获阶段触发，false为冒泡阶段触发</p><p>解绑监听事件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>).<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>, fun1);</span><br></pre></td></tr></table></figure><h3 id="2-2-事件对象"><a href="#2-2-事件对象" class="headerlink" title="2.2 事件对象"></a>2.2 事件对象</h3><p>任何事件都有内置对象event;代表的是事件的状态</p><p>兼容性写法(ie的锅):</p><p><code>var event = event || window.event;</code></p><p>事件源：event.target;</p><h3 id="2-3-事件冒泡"><a href="#2-3-事件冒泡" class="headerlink" title="2.3 事件冒泡"></a>2.3 事件冒泡</h3><p>冒泡：子元素事件执行时会唤起父元素绑定的事件</p><p>捕获：由外到内的顺序解析dom结构</p><p>如何阻止冒泡（存在兼容性）</p><ul><li>event.stopPropagation(); 谷歌和火狐支持,</li><li>window.event.cancelBubble=true; IE特有的,谷歌支持,火狐不支持</li></ul><h2 id="3-BOM"><a href="#3-BOM" class="headerlink" title="3. BOM"></a>3. BOM</h2><p>浏览器对象模型</p><h3 id="3-1-弹窗方法"><a href="#3-1-弹窗方法" class="headerlink" title="3.1 弹窗方法"></a>3.1 弹窗方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">prompt</span>(<span class="string">&quot;帅吗&quot;</span>)    <span class="comment">// 弹出输入框；直接点确定返回空字符串;点击取消返回null</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;真jier帅&quot;</span>) <span class="comment">// 普通弹框</span></span><br><span class="line"><span class="title function_">confirm</span>(<span class="string">&quot;同意？&quot;</span>) <span class="comment">// 弹出确认框；确定返回true;取消返回false</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;页面全部加载完成后执行&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-location对象"><a href="#3-2-location对象" class="headerlink" title="3.2 location对象"></a>3.2 location对象</h3><p>Location 对象包含有关当前 URL 的信息</p><p>href属性：设置或返回完整的 URL；常用来做页面跳转</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    location.<span class="property">href</span> = <span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hash属性 ：设置或返回从井号 (#) 开始的 URL（锚）；常用来实现单页面切换</p><p>其他了解</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>host</td><td>设置或返回主机名和当前 URL 的端口号。</td></tr><tr><td>hostname</td><td>设置或返回当前 URL 的主机名。</td></tr><tr><td>pathname</td><td>设置或返回当前 URL 的路径部分。</td></tr><tr><td>port</td><td>设置或返回当前 URL 的端口号。</td></tr><tr><td>protocol</td><td>设置或返回当前 URL 的协议。</td></tr><tr><td>search</td><td>设置或返回从问号 (?) 开始的 URL（查询部分）。</td></tr></tbody></table><h3 id="3-3-history对象"><a href="#3-3-history对象" class="headerlink" title="3.3 history对象"></a>3.3 history对象</h3><p>返回上一页面 history.back()</p><p>返回下一页面 history.forward()</p><h2 id="4-定时器"><a href="#4-定时器" class="headerlink" title="4. 定时器"></a>4. 定时器</h2><ul><li>周期定时器</li></ul><p><code>setInterval(fun,time)</code> 参数: 函数，时间(以毫秒计时)；返回ID值</p><p>停止周期计时器</p><p><code>clearInteval()</code> 参数为<code>setInterval(fun,time)</code>的ID值，通常将ID值赋给变量</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> time1 = <span class="built_in">setInterval</span>(fun1, <span class="number">1000</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(time1)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一次性计时器</li></ul><p><code>setTimeout(fun,time)</code> 参数: 函数，时间(以毫秒计时)；返回ID值</p><p>停止</p><p>一次性计时器</p><p><code>clearTimeout()</code> 参数为<code>setTimeout(fun,time)</code>的ID值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time2 = <span class="built_in">setTimeout</span>(fun2, <span class="number">11000</span>) <span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-js动画"><a href="#5-js动画" class="headerlink" title="5. js动画"></a>5. js动画</h2><p>动画的实现: 利用js的事件，配合定时器，或者改变它的样式属性，比如颜色，位置等来完成</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// div拉长变透明</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> time1 = <span class="built_in">setInterval</span>(fun1, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>) &#123;</span><br><span class="line">        a++</span><br><span class="line">        b -= <span class="number">0.001</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>).<span class="property">style</span>.<span class="property">width</span> = a + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>).<span class="property">style</span>.<span class="property">opacity</span> = b;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">1100</span> &amp;&amp; b == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(time1)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">// 其余实现原理相同</span></span><br></pre></td></tr></table></figure><p>一般把动画进行函数的封装；</p><h3 id="5-1-元素属性"><a href="#5-1-元素属性" class="headerlink" title="5.1 元素属性"></a>5.1 元素属性</h3><ul><li><p>offset系列  (element.offsetTop)<br>offsetLeft: 获取元素距离最左边的距离：<br>offsetTop: 获取元素距离最上边的距离:  </p><ul><li><ol><li>如果父元素没有定位，距离浏览器最左侧的距离</li></ol></li><li><ol start="2"><li>如果父元素有定位，距离父元素最左侧的距离<br>offsetWidth: 获取元素的宽度，包括border及以内，不包括margin<br>offsetHeight: 获取元素的高度，包括border及以内，不包括margin<br>offsetParent: 获取元素的定位父级元素：  </li></ol></li><li>如果元素fixed定位，得到null;</li><li>元素没有fixed情况下如果元素所有的父级元素都没定位，得到body;</li><li>元素没有fixed情况下，父级元素有定位，得到离他最近的有定位的父级元素</li></ul></li><li><p>client系列  (element.clientTop)<br>clientTop和clientLeft：获得上边框和左边框的宽度。<br>clientWidth和clientHeight:获取可视范围的宽度高度，即边框内部的，不包括border，包括padding<br>当盒子内部存在滚动条时，获得的高度和宽度不包括滚动条。</p></li><li><p>scroll系列   (element.scrollTop)<br>scrollTop和scrollLeft: （父元素的属性）<br>获得的是内容卷曲出去的高度和宽度，当滚动条向下拉时，内容往上走，<br>获得的就是上面跑出盒子范围的那部分高度。滚动条向右拉同理  </p></li></ul><img src="https://img.hitagi.site/202211142245453.jpg" alt="scrollTop" style="zoom: 67%;" />scrollWidth和scrollHeight: （父元素的属性）  获得元素的实际宽度和高度，在内容没有超出盒子时，获得的是盒子的内部高度和宽度。  内容超出盒子时获得的是内容实际应有的高度和宽度。  当盒子内部存在滚动条时，获得的高度和宽度不包括滚动条。<h3 id="5-2-动画属性"><a href="#5-2-动画属性" class="headerlink" title="5.2 动画属性"></a>5.2 动画属性</h3><ul><li>clientX与clientY</li></ul><p>clientX 事件属性返回当事件被触发时鼠标指针相对于浏览器页面的水平坐标。</p><p>clientY 事件属性返回当事件被触发时鼠标指针向对于浏览器页面的垂直坐标。</p><ul><li>pageX与pageY (pageY = clientY + 页面滚动出去的距离)</li></ul><p>pageX/Y：相对于文档边缘,包含滚动条距离</p><p>clientX/Y：相对于当前页面且不包含滚动条距离</p><blockquote><p>有兼容性问题 从IE9以后才支持</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript基础 02</title>
      <link href="/posts/17ade7a6/"/>
      <url>/posts/17ade7a6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-内置对象"><a href="#1-内置对象" class="headerlink" title="1. 内置对象"></a>1. 内置对象</h2><p>JavaScript中的对象分为4种：内置对象、自定义对象、浏览器对象、DOM对象。</p><h3 id="1-1-Math"><a href="#1-1-Math" class="headerlink" title="1.1 Math"></a>1.1 Math</h3><p><code>Math.PI</code>  圆周率<br>常用方法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>()  <span class="comment">//生成随机数</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>()   <span class="comment">//向下取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>()    <span class="comment">//向上取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>()   <span class="comment">//取整，四舍五入</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>()     <span class="comment">//绝对值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>()     <span class="comment">//最大值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>()     <span class="comment">//最小值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sin</span>()     <span class="comment">//正弦</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">cos</span>()     <span class="comment">//余弦</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>()     <span class="comment">//求指数次幂</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sqrt</span>()    <span class="comment">//求平方根</span></span><br></pre></td></tr></table></figure><h3 id="1-2-Date"><a href="#1-2-Date" class="headerlink" title="1.2 Date"></a>1.2 Date</h3><p>Date()是构造函数，想要使用Date方法，必须实例化new一个日期对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">date.<span class="title function_">getTime</span>()  <span class="comment">// 获取1970年1月1日至今的毫秒数 (没什么用)</span></span><br><span class="line">date.<span class="title function_">getMilliseconds</span>() <span class="comment">//返回现在时间的毫秒数</span></span><br><span class="line">date.<span class="title function_">getSeconds</span>()  <span class="comment">// 返回现在时间的秒数(0-59)</span></span><br><span class="line">date.<span class="title function_">getMinutes</span>()  <span class="comment">// 返回现在时间的分数(0-59)</span></span><br><span class="line">date.<span class="title function_">getHours</span>()    <span class="comment">// 返回现在时间的小时(0-23)</span></span><br><span class="line">date.<span class="title function_">getDay</span>()      <span class="comment">// 返回星期几 0周日 6周六</span></span><br><span class="line">date.<span class="title function_">getDate</span>()     <span class="comment">// 返回当前月的第几天</span></span><br><span class="line">date.<span class="title function_">getMonth</span>()    <span class="comment">// 返回月份(0-11),用的时候+1</span></span><br><span class="line">date.<span class="title function_">getFullYear</span>() <span class="comment">// 返回4位的年份</span></span><br></pre></td></tr></table></figure><h3 id="1-3-Number"><a href="#1-3-Number" class="headerlink" title="1.3 Number"></a>1.3 Number</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1.24325</span>;</span><br><span class="line">a.<span class="title function_">toFixed</span>(<span class="number">3</span>);  <span class="comment">//保留几位小数</span></span><br></pre></td></tr></table></figure><h3 id="1-4-Array"><a href="#1-4-Array" class="headerlink" title="1.4 Array"></a>1.4 Array</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>];</span><br><span class="line"><span class="comment">// 基本方法</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) <span class="comment">//判断是否为数组</span></span><br><span class="line">arr.<span class="title function_">reverse</span>()      <span class="comment">//翻转数组</span></span><br><span class="line"><span class="comment">// 数组增删方法</span></span><br><span class="line">arr2.<span class="title function_">push</span>(<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>);    <span class="comment">//从最后添加一个或多个值</span></span><br><span class="line">arr2.<span class="title function_">pop</span>();               <span class="comment">//从最后删除一个值</span></span><br><span class="line">arr2.<span class="title function_">unshift</span>(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>); <span class="comment">//从开始添加一个或多个值</span></span><br><span class="line">arr2.<span class="title function_">shift</span>();             <span class="comment">//从开头删除一个值</span></span><br><span class="line"><span class="comment">// 位置方法</span></span><br><span class="line">arr.<span class="title function_">indexOf</span>(<span class="number">3</span>);    <span class="comment">//返回数组中指定元素的第一个值的索引，不存在返回-1</span></span><br><span class="line">arr.<span class="title function_">lastIndexOf</span>(<span class="number">7</span>) <span class="comment">//返回数组中指定元素的最后一个值的索引，不存在返回-1 </span></span><br><span class="line"><span class="comment">// 数组转化字符串</span></span><br><span class="line">arr.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)       <span class="comment">//数组转化为字符串，以参数(String类型)分割；无参数时默认以,分割</span></span><br></pre></td></tr></table></figure><h4 id="1-4-1-排序方法"><a href="#1-4-1-排序方法" class="headerlink" title="1.4.1 排序方法"></a>1.4.1 排序方法</h4><p>sort()<br>没有指定参数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>() <span class="comment">// 默认把元素转换为String后按ASCII码排序，最后String转回来</span></span><br></pre></td></tr></table></figure><p>指定参数</p><ul><li>如果compareFunction(a,b)返回值小于0，那么a会被排到b之前</li><li>如果compareFunction(a,b)返回值等于0，a和b的相对位置不变，不兼容所有浏览器</li><li>如果compareFunction(a,b)返回值大于0，b会被排列到a之前。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> <span class="title function_">compareFunction</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 如果满足条件condition,那么a排到b前面</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>要比较数字而非字符串，可以直接返回<strong>a-b</strong>，例如下面的函数将会将数组升序排列<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> <span class="title function_">compareFunction</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="1-4-2-拼接与截取"><a href="#1-4-2-拼接与截取" class="headerlink" title="1.4.2 拼接与截取"></a>1.4.2 拼接与截取</h4>concat()<br>把参数拼接到当前数组、 或者用于连接两个或多个数组<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&quot;zs&quot;</span>, <span class="string">&quot;ls&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.<span class="title function_">concat</span>(<span class="string">&quot;ww&quot;</span>)</span><br></pre></td></tr></table></figure>slice(start,end)  </li><li>索引从start开始截取元素，到end结束，<code>[start,end)</code>，返回新数组</li><li>不会改变原数组<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr2.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">3</span>) <span class="comment">//取[1,2,3]</span></span><br></pre></td></tr></table></figure>splice(start,length)  </li><li>索引从start开始截取元素，截取length个，返回新数组</li><li>会改变元素的数组<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br></pre></td></tr></table></figure><h4 id="1-4-4-迭代与过滤"><a href="#1-4-4-迭代与过滤" class="headerlink" title="1.4.4 迭代与过滤"></a>1.4.4 迭代与过滤</h4>forEach()<br>用于调用数组的每个元素，并将元素传递给回调函数；传一个参数 value是数组值，两个参数 index是索引号<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr3.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value,index</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>every(): 判断数组中元素是否全部满足回调函数，如果是，返回true；否则为false<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr3.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123; <span class="keyword">return</span> value&lt;<span class="number">3</span>; &#125;);</span><br></pre></td></tr></table></figure>some(): 判断数组中是否有元素满足回调函数，如果是，返回true；否则为false<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr3.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123; <span class="keyword">return</span> value&lt;<span class="number">3</span>; &#125;);</span><br></pre></td></tr></table></figure>filter(): 根据指定条件过滤元素,返回新数组<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr3.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123; <span class="keyword">return</span> value&gt;<span class="number">3</span>; &#125;);</span><br></pre></td></tr></table></figure>map(): 根据数学运算，返回新数组<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr3.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123; <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">pow</span>(value,<span class="number">2</span>); &#125;);</span><br></pre></td></tr></table></figure><h4 id="1-4-5-清空数组"><a href="#1-4-5-清空数组" class="headerlink" title="1.4.5 清空数组"></a>1.4.5 清空数组</h4></li></ul><ol><li>推荐  arr = []</li><li>arr.length = 0</li><li>arr.splice(0, arr.length)<h3 id="1-5-String"><a href="#1-5-String" class="headerlink" title="1.5 String"></a>1.5 String</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">str = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>当重新给str赋值的时候，常量’abc’不会被修改，依然在内存中</p><p>重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变</p><p>由于字符串的不可变，在大量拼接字符串的时候会有效率问题</p></blockquote><h4 id="1-5-1-取值方法"><a href="#1-5-1-取值方法" class="headerlink" title="1.5.1 取值方法"></a>1.5.1 取值方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">charAt</span>(<span class="number">0</span>)     <span class="comment">//获取指定位置处字符</span></span><br><span class="line">str[<span class="number">0</span>]        <span class="comment">//HTML5，IE8+支持 和charAt()等效</span></span><br></pre></td></tr></table></figure><h4 id="1-5-2-操作方法"><a href="#1-5-2-操作方法" class="headerlink" title="1.5.2 操作方法"></a>1.5.2 操作方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">slice</span>(start, end)     <span class="comment">//从索引start开始，到end结束；[start,end)</span></span><br><span class="line"><span class="title function_">substring</span>(start, end) <span class="comment">//同slice()</span></span><br><span class="line"><span class="title function_">substr</span>(start, length) <span class="comment">//从索引start开始，截取length个字符</span></span><br><span class="line"><span class="title function_">indexOf</span>()             <span class="comment">//返回数组中指定元素的第一个值的索引，不存在返回-1</span></span><br><span class="line"><span class="title function_">lastIndexOf</span>()         <span class="comment">//返回数组中指定元素的最后一个值的索引，不存在返回-1</span></span><br><span class="line"><span class="title function_">trim</span>()                <span class="comment">//去除字符串前后的空格</span></span><br><span class="line"><span class="title function_">toUpperCase</span>()         <span class="comment">//转换成大写</span></span><br><span class="line"><span class="title function_">toLowerCase</span>()         <span class="comment">//转换成小写</span></span><br><span class="line"><span class="title function_">search</span>(<span class="string">&quot;str&quot;</span>)         <span class="comment">//检索字符串中指定的子字符串，返回子字符串的起始位置</span></span><br><span class="line"><span class="title function_">replace</span>(old, <span class="keyword">new</span>)     <span class="comment">//替换字符串 new替换old; 只替换找到的第一个</span></span><br><span class="line"><span class="title function_">split</span>(<span class="string">&quot;&quot;</span>)             <span class="comment">//字符串转化成数组，以参数分割， 无参时字符串全切割</span></span><br></pre></td></tr></table></figure><h2 id="2-DOM操作"><a href="#2-DOM操作" class="headerlink" title="2. DOM操作"></a>2. DOM操作</h2><h3 id="2-1-获取DOM元素"><a href="#2-1-获取DOM元素" class="headerlink" title="2.1 获取DOM元素"></a>2.1 获取DOM元素</h3></li><li>通过id获取DOM元素;获取的是一个具体的DOM元素<br><code>document.getElementById(&quot;div1&quot;)</code></li><li>通过选择器获取单个元素;获取的是同选择器的<strong>第一个元素</strong><br><code>document.querySelector(&quot;.box&quot;)</code><blockquote><p>以下方法获取的都是由元素构成的伪数组，使用时要加上<strong>索引号</strong></p><p>伪数组有length属性，可以遍历；伪数组没有普通数组的内置方法</p></blockquote></li><li>通过类名获取元素<br><code>document.getElementsByClassName(&quot;box&quot;)[0]</code></li><li>通过标签名获取元素<br><code>document.getElementsByTagName(&quot;h1&quot;)[0]</code></li><li>通过name名获取元素<br><code>document.getElementsByName(&quot;username&quot;)[0]</code></li><li>通过选择器获取所有元素<br><code>document.querySelectorAll(&quot;.box&quot;)[0]</code><h3 id="2-2-事件触发"><a href="#2-2-事件触发" class="headerlink" title="2.2 事件触发"></a>2.2 事件触发</h3>事件三要素: 事件源、事件类型(触发方式)、事件处理程序</li><li>内部书写<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(999)&quot;</span>&gt;</span>点击弹框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>行内触发方法: 写一个js方法，行内调用<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">fn1()</span>&gt;</span>点击弹框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123; <span class="title function_">alert</span>(<span class="number">888</span>) &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>html外书写<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>点击弹框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;btn1&quot;</span>)[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">btn1.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="title function_">alert</span>(<span class="number">666</span>) &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-获取-修改元素的属性"><a href="#2-3-获取-修改元素的属性" class="headerlink" title="2.3 获取/修改元素的属性"></a>2.3 获取/修改元素的属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.div1</span> &#123; <span class="attribute">width</span>: <span class="number">200px</span>; <span class="attribute">height</span>: <span class="number">100px</span>; &#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.div1</span> &#123; <span class="attribute">width</span>: <span class="number">300px</span>; <span class="attribute">height</span>: <span class="number">200px</span>;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;div1&quot;</span>)[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">div1.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">width</span>= <span class="string">&quot;300px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;200px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 也可以修改类名</span></span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&quot;div2&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>表单默认属性也可以修改</li></ol><ul><li>value 用于大部分表单元素的内容获取(option除外)</li><li>type 可以获取input标签的类型(输入框或复选框等)</li><li>disabled 禁用属性</li><li>checked 复选框选中属性</li><li>selected 下拉菜单选中属性 </li></ul><h2 id="3-DOM属性操作与事件"><a href="#3-DOM属性操作与事件" class="headerlink" title="3. DOM属性操作与事件"></a>3. DOM属性操作与事件</h2><h3 id="3-1-阻止a链跳转"><a href="#3-1-阻止a链跳转" class="headerlink" title="3.1 阻止a链跳转"></a>3.1 阻止a链跳转</h3><p>a标签绑定的onclick事件返回值为false</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">link.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-DOM事件"><a href="#3-2-DOM事件" class="headerlink" title="3.2 DOM事件"></a>3.2 DOM事件</h3><p>1.鼠标事件<br>获取/失去焦点<code>onfocus/onblur</code><br>鼠标双击<code>ondblclick</code><br>鼠标移入/移出<code>onmouseover/onmouseout</code><br>鼠标进入/离开<code>onmouseenter/onmouseleave</code></p><blockquote><p>区别: <code>onmouseenter/onmouseleave</code>强调进入；不支持冒泡</p><p>冒泡:子元素事件执行，会递归执行所有父元素的触发事件</p></blockquote><p>2.键盘事件<br>键盘按下/抬起<code>onkeydown/onkeyup</code><br>3.浏览器事件<br>页面加载完成后执行<code>window.onload</code><br>滚浏览器滚动条执行<code>window.onscroll</code></p><h3 id="3-3-文本内容属性"><a href="#3-3-文本内容属性" class="headerlink" title="3.3 文本内容属性"></a>3.3 文本内容属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只获取文本内容(包括css);不会解析标签</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>)[<span class="number">0</span>].<span class="property">innerText</span></span><br><span class="line"><span class="comment">// 只获取文本内容(不包括css);不会解析标签</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>)[<span class="number">0</span>].<span class="property">textContent</span></span><br><span class="line"><span class="comment">// 获取标签内容;会解析标签</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>)[<span class="number">0</span>].<span class="property">innerHTML</span></span><br></pre></td></tr></table></figure><h3 id="3-4-元素的属性操作"><a href="#3-4-元素的属性操作" class="headerlink" title="3.4 元素的属性操作"></a>3.4 元素的属性操作</h3><p>以下方法均可对自定义属性和原始属性操作</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取元素属性</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>).<span class="title function_">getAttribute</span>(<span class="string">&quot;mytest&quot;</span>)</span><br><span class="line"><span class="comment">//设置属性</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>).<span class="title function_">setAttribute</span>(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;box2&quot;</span>)</span><br><span class="line"><span class="comment">//移除属性</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>)[<span class="number">1</span>].<span class="title function_">removeAttribute</span>(<span class="string">&quot;id&quot;</span>)</span><br></pre></td></tr></table></figure><p>3.5 元素的样式设置</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&lt;常用&gt;对象.style</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;b1&quot;</span>).<span class="property">style</span> = <span class="string">&quot;color:red&quot;</span>;</span><br><span class="line"><span class="comment">//对象.setAttribute(&quot;style&quot;,&quot;样式&quot;)</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;b1&quot;</span>).<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;color: red&quot;</span>)</span><br><span class="line"><span class="comment">//对象.style.setProperty(&quot;CSS属性&quot;,&quot;CSS属性值&quot;)</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>).<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;red&quot;</span>)</span><br><span class="line"><span class="comment">//对象.style.cssText</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>).<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&quot;background-color:red; width:80px&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;常用&gt;对象.className</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;b1&quot;</span>).<span class="property">className</span> = <span class="string">&quot;box2&quot;</span>;</span><br><span class="line"><span class="comment">//&lt;常用&gt;对象.setAttribute(&quot;class&quot;,&quot;class名&quot;)</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;b1&quot;</span>).<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;box2&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="4-节点"><a href="#4-节点" class="headerlink" title="4. 节点"></a>4. 节点</h2><p>HTML 文档中的所有内容都是节点：</p><ul><li>整个文档是一个文档节点 document</li><li>每个 HTML 元素是元素节点</li><li>HTML 元素内的文本是文本节点</li><li>每个 HTML 属性是属性节点</li><li>注释是注释节点</li></ul><ol><li><p>节点类型</p><p>document的节点类型 9、标签的节点类型 1、属性的节点类型 2、文本的节点类型 3</p></li><li><p>节点名称</p><p>document的节点名称 #document、标签的节点名称 大写的标签名、属性的节点名称 属性名、文本的节点名称 #text</p></li><li><p>节点值</p><p>document的节点值 null、标签的节点值 null、属性的节点值 属性值、文本的节点值 文本的内容</p></li><li><p>节点之间的关系</p><p>父节点–parentNode</p><p>父元素节点–parentElement</p><p>子节点–childNodes：标签节点、文本节点、注释节点  得到的是伪数组</p><p>子元素节点–children :标签节点</p><p>总结：firstChild、lastChild、previousSibling、nextSibling获取到的都是文本，如果没有就是文本节点名称#text，</p><p>firstElementChild、lastElementChild、previousElementSibling、nextElementSibling获取到的都是标签，如果没有就</p><p>是空</p></li><li><p>节点的操作</p></li></ol><ul><li>创建节点<br><code>document.createElement(&#39;tagName&#39;)</code>  </li><li>添加节点<br><code>parentNode.appendChild(childNode) </code><br>node.appendChild() 方法将一个节点添加到指定父节点的子节点列表末尾。类似于 CSS 里面的 after 伪元素。<br><code>parentNode.insertBefore(newChildNode, childNode)</code><br>node.insertBefore() 方法将一个节点添加到父节点的指定子节点前面。类似于 CSS 里面的 before 伪元素。</li><li>删除节点<br><code>parentNode.removeChild(child)</code><br>node.removeChild() 方法从 DOM 中删除一个子节点，返回删除的节点。</li><li>复制节点<br><code>node.cloneNode(flase)</code><br>node.cloneNode() 方法返回调用该方法的节点的一个副本。参数为false不复制子节点，参数为true复制子节点。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript基础 01</title>
      <link href="/posts/8ea4b61c/"/>
      <url>/posts/8ea4b61c/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基础"><a href="#1-基础" class="headerlink" title="1. 基础"></a>1. 基础</h2><h3 id="1-1-javaScript-的组成"><a href="#1-1-javaScript-的组成" class="headerlink" title="1.1 javaScript 的组成"></a>1.1 javaScript 的组成</h3><p>ECMScirpt(js语法规范)、DOM(文档对象模型)、BOM(浏览器对象模型)</p><h3 id="1-2-怎么写javaScript"><a href="#1-2-怎么写javaScript" class="headerlink" title="1.2 怎么写javaScript"></a>1.2 怎么写javaScript</h3><ol><li>内部书写,script的标签中写js代码</li><li>行内书写,js代码可以在html的标签中写</li><li>外部引入,在js文件中可以写js代码,script的标签中的src路径引入</li><li>还可以在控制台直接书写js代码<h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h2>声明变量 var<br><code>var age = 18;</code><br>控制台打印函数 <code>console.log()</code><h3 id="2-1-1-命名规则"><a href="#2-1-1-命名规则" class="headerlink" title="2.1.1 命名规则"></a>2.1.1 命名规则</h3></li><li>由字母、数字、下划线、$符号组成，不能以数字开头</li><li>不能是关键字和保留字，例如：for、while。</li><li>区分大小写<h3 id="2-1-2-命名规范"><a href="#2-1-2-命名规范" class="headerlink" title="2.1.2 命名规范"></a>2.1.2 命名规范</h3></li><li>变量名必须有意义</li><li>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。<h3 id="2-2-基本数据类型："><a href="#2-2-基本数据类型：" class="headerlink" title="2.2 基本数据类型："></a>2.2 基本数据类型：</h3>隐式类型转化 例如：非纯数字字符串转化为数字类型，其值为NaN。</li><li>number<ul><li>整数：十进制(整数,小数)、十六进制(0x开头:0xa=10)、八进制(0开头:011=9)</li><li>浮点数：浮点数都是近似的，保留几位小数即可</li><li>科学计数法 (5e-5 = 5乘以10的-5次方) 无穷大:infinity</li><li>NaN: 数字类型 代表非数字值。</li></ul></li><li>string<ul><li>length属性：字符串长度</li><li>字符串拼接直接加号 ‘string1’+’string2’(数字加字符串,隐式转换为字符串)</li></ul></li><li>boolean：true false</li><li>undifined：声明但未赋值</li><li>null：表示空<h3 id="2-3-复杂数据类型："><a href="#2-3-复杂数据类型：" class="headerlink" title="2.3 复杂数据类型："></a>2.3 复杂数据类型：</h3>Object:<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">// 声明</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;zark&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;&#125;;<span class="comment">//另一种方式</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">15</span>;</span><br><span class="line"><span class="comment">// 或者直接赋值</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    hobby : <span class="string">&quot;jump&quot;</span>,</span><br><span class="line">    height : <span class="number">170</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//json对象 格式要求:属性和属性值都加引号(非字符串值除外)</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="string">&quot;hobby&quot;</span> : <span class="string">&quot;jump&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span> : <span class="number">170</span></span><br><span class="line">&#125;;        </span><br></pre></td></tr></table></figure><h3 id="2-4-数据类型转换"><a href="#2-4-数据类型转换" class="headerlink" title="2.4 数据类型转换"></a>2.4 数据类型转换</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age);<span class="comment">//typeof 函数 查看数据类型</span></span><br><span class="line"><span class="comment">// number</span></span><br></pre></td></tr></table></figure></li><li>转化为数字类型 函数Number()、parseInt()、parseFloat()<ul><li>Number() 十六进制转化为十进制、空内容转化为0、非纯数字内容转化为NaN  </li><li>parseInt() //转化成整数  </li><li>parseFloat() //转化成浮点数</li></ul></li><li>转化为字符串类型 函数toString()、String()(用于undifined和null)</li><li>转化为布尔类型 Boolean()<ul><li>0 NaN ‘’ undefined null会转换成false，其它都会转换成true。</li></ul></li></ol><h3 id="2-5-运算符"><a href="#2-5-运算符" class="headerlink" title="2.5 运算符"></a>2.5 运算符</h3><p>运算符优先级：<br>​括号&gt;点运算符&gt;一元运算符&gt; 算数运算符 &gt;关系运算符&gt;逻辑运算符 &gt;赋值运算符</p><h2 id="2-流程控制"><a href="#2-流程控制" class="headerlink" title="2. 流程控制"></a>2. 流程控制</h2><h3 id="2-0-顺序结构"><a href="#2-0-顺序结构" class="headerlink" title="2.0 顺序结构"></a>2.0 顺序结构</h3><p>默认从上而下顺序执行</p><h3 id="2-1-分支结构"><a href="#2-1-分支结构" class="headerlink" title="2.1 分支结构"></a>2.1 分支结构</h3><ul><li>if判断<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">200</span> &gt;= age &gt;= <span class="number">65</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;老年&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;青年&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (age &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;输入有误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>If语句会把后面的值隐式转换成布尔类型</li></ul><p>转换为true的有 ： 非空字符串 非0数字 true 任何对象<br>转换成false的有 ： 空字符串 0 false null undefined</p><ul><li>三元运算符 表达式1 ? 表达式2 : 表达式3;  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 满足条件执行第一条，不满足条件执行第二条</span></span><br><span class="line">age &gt;= <span class="number">18</span> ? <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;青年&quot;</span>) : <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未成年&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>switch…case判断  </li></ul><p>使用严格比较，数据类型和数值都要相同;<br>switch里的值默认为字符串，有需要时应使用强制类型转换</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="title class_">Number</span>(day)) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;周一&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;周二&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;输入有误&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-循环结构"><a href="#2-2-循环结构" class="headerlink" title="2.2 循环结构"></a>2.2 循环结构</h3><ul><li>while循环<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (a &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    a++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>do…while循环<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    b++;</span><br><span class="line">&#125; <span class="keyword">while</span> (b &lt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li><li>for循环<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">1</span>; c &lt; <span class="number">10</span>; c++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>continue和break</li></ul><p>break:立即跳出整个循环，即循环结束<br>continue:立即跳出当前循环，继续下一次循环</p><h3 id="2-3-调试"><a href="#2-3-调试" class="headerlink" title="2.3 调试"></a>2.3 调试</h3><p>弹窗 <code>alert()</code><br>断点 <code>debugger</code><br>控制台打印 <code>console log()</code></p><h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3. 数组"></a>3. 数组</h2><p>定义：多个元素的有序集合。<br>数组的数据类型为 Object<br>数组元素可以为任意数据类型</p><h3 id="3-1-创建"><a href="#3-1-创建" class="headerlink" title="3.1 创建"></a>3.1 创建</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><h3 id="3-2-取值"><a href="#3-2-取值" class="headerlink" title="3.2 取值"></a>3.2 取值</h3><p>按下标取值，下标从0开始; 下标越界时，值为undifined;</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">5</span>]); <span class="comment">//此时取值超出数组长度，返回undifined</span></span><br><span class="line"><span class="comment">// for循环取值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr2.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-修改"><a href="#3-3-修改" class="headerlink" title="3.3 修改"></a>3.3 修改</h3><ol><li>直接赋值<code>arr2[3] = 7;</code></li><li>数组方法: </li></ol><ul><li>push: 从最后添加一个或多个值(返回值为数组的长度);</li><li>pop: 从最后删除一个值(返回值为删除的值);</li><li>unshift: 从开始添加一个或多个值(返回值为数组的长度)</li><li>shift: 从开头删除一个值(返回值为删除的值);<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr2.<span class="title function_">push</span>(<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>);</span><br><span class="line">arr2.<span class="title function_">pop</span>();</span><br><span class="line">arr2.<span class="title function_">unshift</span>(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>);</span><br><span class="line">arr2.<span class="title function_">shift</span>();</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-4-数组去重"><a href="#3-4-数组去重" class="headerlink" title="3.4 数组去重"></a>3.4 数组去重</h3><p>indexOf()返回数组中指定元素的第一个值的索引，不存在返回-1</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [];</span><br><span class="line"><span class="comment">// 第一种方法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr1.<span class="title function_">indexOf</span>(arr1[i]) == i) &#123;</span><br><span class="line">        arr2.<span class="title function_">push</span>(arr1[i]);</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="comment">// 第二种方法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr2.<span class="title function_">indexOf</span>(arr1[i]) == -<span class="number">1</span>) &#123;</span><br><span class="line">        arr2.<span class="title function_">push</span>(arr1[i]);</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-冒泡排序"><a href="#3-5-冒泡排序" class="headerlink" title="3.5 冒泡排序"></a>3.5 冒泡排序</h3><p>i控制轮数,j控制每轮比较次数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr3.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr3.<span class="property">length</span> - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr3[j] &gt; arr3[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = arr3[j];</span><br><span class="line">            arr3[j] = arr3[j + <span class="number">1</span>];</span><br><span class="line">            arr3[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h2><p>为了把一段特定功能的代码块封装起来，减少代码冗余</p><h3 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 具名函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">name1</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>); &#125;</span><br><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line"><span class="keyword">var</span> k = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>); &#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-调用"><a href="#4-2-调用" class="headerlink" title="4.2 调用"></a>4.2 调用</h3><p><code>name1();</code></p><h3 id="4-3-参数"><a href="#4-3-参数" class="headerlink" title="4.3 参数"></a>4.3 参数</h3><p>形参(定义时); 实参(调用时)<br>需要传递参数的函数在调用时没有传递实参,返回值为undifined</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">plus</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">plus</span>(<span class="number">2</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="4-4-返回值"><a href="#4-4-返回值" class="headerlink" title="4.4 返回值"></a>4.4 返回值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">rate</span>(<span class="params">money</span>) &#123;</span><br><span class="line">    <span class="comment">//调用函数时不会显示,不写返回值默认返undifined,return只能有一个</span></span><br><span class="line">    <span class="keyword">return</span> money * <span class="number">3</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">rate</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>注意事项：定义在函数里的局部变量每次调用函数都会重新初始化；函数里使用外部全局变量，重复调用不会初始化</p><h3 id="4-5-函数补充"><a href="#4-5-函数补充" class="headerlink" title="4.5 函数补充"></a>4.5 函数补充</h3><h4 id="4-5-1-函数的覆盖问题"><a href="#4-5-1-函数的覆盖问题" class="headerlink" title="4.5.1 函数的覆盖问题"></a>4.5.1 函数的覆盖问题</h4><ul><li>两个同名的函数声明，后面覆盖前面的  </li><li>两个同名的函数表达式，调用时执行紧挨着<strong>调用语句</strong>的上一条函数表达式<h4 id="4-5-2-函数的内置对象"><a href="#4-5-2-函数的内置对象" class="headerlink" title="4.5.2 函数的内置对象"></a>4.5.2 函数的内置对象</h4>arguments对象是比较特别的一个对象，实际上是函数的一个内置属性。<br>arguments对象是一个伪数组; arguments数组中前几个元素是函数的参数</li><li>arguments.callee：函数的本身</li><li>arguments.callee.name:函数的名字</li><li>arguments.callee.length:形参的个数</li><li>arguments.length：实参的个数<h4 id="4-5-3-自执行函数"><a href="#4-5-3-自执行函数" class="headerlink" title="4.5.3 自执行函数"></a>4.5.3 自执行函数</h4>可以通过给匿名函数本身加括号的方式来一次性调用匿名函数，称为自执行函数<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">123</span>);  </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h4 id="4-5-4-函数的数据类型"><a href="#4-5-4-函数的数据类型" class="headerlink" title="4.5.4 函数的数据类型"></a>4.5.4 函数的数据类型</h4>函数是一种数据类型 名为function;可以被用作参数使用<h2 id="5-对象"><a href="#5-对象" class="headerlink" title="5. 对象"></a>5. 对象</h2>任何事物都可以是对象，可以使用对象简化多参数的函数<h4 id="5-1-创建对象的方法"><a href="#5-1-创建对象的方法" class="headerlink" title="5.1 创建对象的方法"></a>5.1 创建对象的方法</h4></li></ul><ol><li>字面量<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,<span class="attr">age</span>: <span class="number">18</span> &#125;</span><br></pre></td></tr></table></figure></li><li>new Object ()方法<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span> ();</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;zs&quot;</span>;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">19</span>;</span><br></pre></td></tr></table></figure></li><li>工厂函数<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">age, name</span>) &#123;</span><br><span class="line"><span class="comment">//注意规范：函数名首字母大写</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    obj.<span class="property">name</span> = name;</span><br><span class="line">    obj.<span class="property">age</span> = age;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>自定义构造函数<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">22</span>);</span><br></pre></td></tr></table></figure>this：构造函数在被调用，用来创建对象时，this指向该对象<h4 id="5-2-操作对象的属性"><a href="#5-2-操作对象的属性" class="headerlink" title="5.2 操作对象的属性"></a>5.2 操作对象的属性</h4></li></ol><ul><li>取得对象的属性<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,<span class="attr">age</span>: <span class="number">18</span>, <span class="number">1</span>: <span class="string">&quot;shuzi&quot;</span>&#125;</span><br><span class="line"><span class="comment">// 取得单个属性时</span></span><br><span class="line">obj[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">obj.<span class="property">age</span></span><br><span class="line"><span class="comment">// 给对象增加属性</span></span><br><span class="line">obj[variable] = <span class="string">&quot;value&quot;</span>;</span><br><span class="line">obj.<span class="property">string</span> = <span class="string">&quot;value&quot;</span>;</span><br><span class="line"><span class="comment">// 通过遍历的方式</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除对象属性  delete 属性名.属性值  </span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span>;</span><br></pre></td></tr></table></figure><h4 id="5-3-数组去重-利用对象属性"><a href="#5-3-数组去重-利用对象属性" class="headerlink" title="5.3 数组去重:利用对象属性"></a>5.3 数组去重:利用对象属性</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!obj[arr1[i]]) &#123;</span><br><span class="line">    arr2.<span class="title function_">push</span>(arr1[i])</span><br><span class="line">    obj[arr1[i]] = <span class="number">1</span>;</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br></pre></td></tr></table></figure><h2 id="6-预解析-作用域-报错"><a href="#6-预解析-作用域-报错" class="headerlink" title="6. 预解析/作用域/报错"></a>6. 预解析/作用域/报错</h2><h3 id="6-1-预解析"><a href="#6-1-预解析" class="headerlink" title="6.1 预解析"></a>6.1 预解析</h3>JavaScript引擎在对JavaScript代码进行解释执行之前，会对JavaScript代码进行预解析，将以关键字var和function开头的语句块提前进行处理<br>注意事项：var 仅预处理变量的声明，不包括赋值。<h4 id="6-1-1-特殊情况"><a href="#6-1-1-特殊情况" class="headerlink" title="6.1.1 特殊情况"></a>6.1.1 特殊情况</h4>当变量和函数同名时,只会对函数声明进行预解析，变量会被忽略<br>但是同名的变量和函数，变量会覆盖函数，导致函数无法调用<br>通俗来讲就是只要出现同名的函数和变量，优先对函数进行预解析。但没用，变量会覆盖函数，最终只有变量声明语句生效<h3 id="6-2-作用域"><a href="#6-2-作用域" class="headerlink" title="6.2 作用域"></a>6.2 作用域</h3><h4 id="6-2-1-全局作用域"><a href="#6-2-1-全局作用域" class="headerlink" title="6.2.1 全局作用域"></a>6.2.1 全局作用域</h4>直接写在 script 标签或 js 文件中的JS代码，都是全局作用域<br>全局对象 window  代表浏览器窗口<br>所有创建的变量、函数都是window对象的属性<h4 id="6-2-2-局部作用域（函数作用域）"><a href="#6-2-2-局部作用域（函数作用域）" class="headerlink" title="6.2.2 局部作用域（函数作用域）"></a>6.2.2 局部作用域（函数作用域）</h4>在函数内部的是局部作用域，代码只在函数的内部起作用<br>函数执行完毕，局部作用域销毁<h3 id="6-5-javaScript报错"><a href="#6-5-javaScript报错" class="headerlink" title="6.5 javaScript报错"></a>6.5 javaScript报错</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>();<span class="comment">//错误信息</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">warn</span>();<span class="comment">//警告信息</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>();<span class="comment">//普通信息</span></span><br><span class="line"><span class="comment">// throw用于自定义错误信息,后接抛出自定义的错误信息</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x=<span class="title class_">NaN</span>) <span class="keyword">throw</span> <span class="string">&quot;错误&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css3基础</title>
      <link href="/posts/3a395d0a/"/>
      <url>/posts/3a395d0a/</url>
      
        <content type="html"><![CDATA[<h2 id="1-新增选择器"><a href="#1-新增选择器" class="headerlink" title="1. 新增选择器"></a>1. 新增选择器</h2><h3 id="1-1-属性选择器"><a href="#1-1-属性选择器" class="headerlink" title="1.1 属性选择器"></a>1.1 属性选择器</h3><p>可以自定义属性</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选择所有带有class属性元素 */</span></span><br><span class="line"><span class="selector-attr">[class]</span> &#123;&#125;</span><br><span class="line"><span class="comment">/* 选择所有使用class=box的元素 */</span></span><br><span class="line"><span class="selector-attr">[class=<span class="string">&quot;box&quot;</span>]</span> &#123;&#125;</span><br><span class="line"><span class="comment">/* 选择name属性以zh-为开头的所有元素 */</span></span><br><span class="line"><span class="selector-attr">[name|=<span class="string">&quot;zh&quot;</span>]</span> &#123;&#125;</span><br><span class="line"><span class="comment">/* 选择每一个href属性的值以http开头的元素 */</span></span><br><span class="line"><span class="selector-attr">[href^=<span class="string">&quot;http&quot;</span>]</span> &#123;&#125;</span><br><span class="line"><span class="comment">/* 选择每一个href属性的值以com结尾的元素 */</span></span><br><span class="line"><span class="selector-attr">[href$=<span class="string">&quot;com&quot;</span>]</span> &#123;&#125;</span><br><span class="line"><span class="comment">/* 选择每一个href属性的值包含字符串www的元素 */</span></span><br><span class="line"><span class="selector-attr">[href*=<span class="string">&quot;www&quot;</span>]</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-伪元素选择器"><a href="#1-2-伪元素选择器" class="headerlink" title="1.2 伪元素选择器"></a>1.2 伪元素选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ::before在每个&lt;p&gt;元素之前插入内容 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;&#125;</span><br><span class="line"><span class="comment">/* ::after在每个&lt;p&gt;元素之后插入内容 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;&#125;</span><br><span class="line"><span class="comment">/* p::first-letter选择每一个&lt;P&gt;元素的第一个字母或者第一个汉字 */</span></span><br><span class="line"><span class="comment">/* p::first-line择每一个&lt;P&gt;元素的第一行 */</span></span><br></pre></td></tr></table></figure><h3 id="1-3-伪类选择器"><a href="#1-3-伪类选择器" class="headerlink" title="1.3 伪类选择器"></a>1.3 伪类选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选择p元素所属父元素第二个子元素,且第二个子元素也是p标签 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;&#125;</span><br><span class="line"><span class="comment">/* 选择p元素所属父元素的倒数第二个子元素,且第二个子元素也是p标签 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-last-child</span>(<span class="number">2</span>) &#123;&#125;</span><br><span class="line"><span class="comment">/* 选择p元素所属父元素的第一个子元素,且第一个子元素也是p标签 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child &#123;&#125;</span><br><span class="line"><span class="comment">/* 选择p元素所属父元素的最后一个子元素,且第一个子元素也是p标签 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:last-child</span> &#123;&#125;</span><br><span class="line"><span class="comment">/* 选择p元素的兄弟元素 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="2-新增样式"><a href="#2-新增样式" class="headerlink" title="2. 新增样式"></a>2. 新增样式</h2><h3 id="2-1-颜色标识"><a href="#2-1-颜色标识" class="headerlink" title="2.1 颜色标识"></a>2.1 颜色标识</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* hsl(色调(0-360)，饱和度(0-100%)，明度(0-100%)) */</span></span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">281</span>, <span class="number">100%</span>, <span class="number">50%</span>);</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">10</span>, <span class="number">100</span>, <span class="number">200</span>,<span class="number">0.5</span>);<span class="comment">/* 红、绿、蓝、透明度 */</span></span><br></pre></td></tr></table></figure><h3 id="2-2-文本效果"><a href="#2-2-文本效果" class="headerlink" title="2.2 文本效果"></a>2.2 文本效果</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 强制文本同一行显示 */</span></span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="comment">/* 溢出内容隐藏 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="comment">/* 隐藏的内容显示为省略号 */</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="comment">/* 水平阴影尺寸、垂直阴影属性、阴影的模糊程度、阴影的颜色 */</span></span><br><span class="line"><span class="attribute">text-shadow</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">5px</span> <span class="built_in">hsl</span>(<span class="number">120</span>, <span class="number">100%</span>, <span class="number">80%</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 滚动条 */</span></span><br><span class="line"><span class="attribute">overflow</span>: scroll; <span class="comment">/* 超出显示滚动条 */</span></span><br><span class="line"><span class="attribute">overflow</span>: auto; <span class="comment">/* 超出显示滚动条，不超出不显示 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 光标 默认default 拖动move 文本text */</span></span><br><span class="line"><span class="attribute">cursor</span>: pointer; <span class="comment">/* 小手 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 轮廓：获取焦点时，四周显示的线 */</span></span><br><span class="line"><span class="attribute">outline</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="2-3-盒子效果"><a href="#2-3-盒子效果" class="headerlink" title="2.3 盒子效果"></a>2.3 盒子效果</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 盒子阴影: 水平阴影尺寸、垂直阴影尺寸、阴影的模糊程度、颜色 */</span></span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> violet;</span><br><span class="line"><span class="comment">/* 怪异盒模型：边框，内边距不影响元素尺寸*/</span></span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="comment">/* 边框图片 80为边框尺寸 */</span></span><br><span class="line"><span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">images/violet.jpg</span>) <span class="number">80</span> round;</span><br><span class="line"><span class="comment">/* 边框透明 */</span></span><br><span class="line"><span class="attribute">border-color</span>: transparent;</span><br><span class="line"><span class="comment">/* 按钮禁用 */</span></span><br><span class="line">&lt;<span class="selector-tag">button</span> disabled&gt;&lt;/<span class="selector-tag">button</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="3-渐变过渡"><a href="#3-渐变过渡" class="headerlink" title="3. 渐变过渡"></a>3. 渐变过渡</h2><h3 id="3-1-渐变"><a href="#3-1-渐变" class="headerlink" title="3.1 渐变"></a>3.1 渐变</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 渐变：两个及以上的颜色之间的平稳过渡 */</span></span><br><span class="line"><span class="comment">/* 线性渐变: 默认从上到下 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to top,violet,blue);</span><br><span class="line"><span class="comment">/* 径向渐变：由内向外 默认circle、椭圆 ellipse*/</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(ellipse,violet,blue);</span><br><span class="line"><span class="comment">/* 背景图占内边距和边框 */</span></span><br><span class="line"><span class="attribute">background-origin</span>: padding-box;</span><br><span class="line"><span class="attribute">background-origin</span>: border-box;</span><br><span class="line"><span class="comment">/* 背景色占内边距和边框 */</span></span><br><span class="line"><span class="attribute">background-clip</span>: padding-box;</span><br><span class="line"><span class="attribute">background-clip</span>: border-box;</span><br></pre></td></tr></table></figure><h3 id="3-2-过渡"><a href="#3-2-过渡" class="headerlink" title="3.2 过渡"></a>3.2 过渡</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 过渡属性名 */</span></span><br><span class="line"><span class="attribute">transition-property</span>: background-color;</span><br><span class="line"><span class="comment">/* 过渡周期 */</span></span><br><span class="line"><span class="attribute">transition-duration</span>: <span class="number">0.5s</span>;</span><br><span class="line"><span class="comment">/* 过度延迟 */</span></span><br><span class="line"><span class="attribute">transition-delay</span>: <span class="number">1ms</span>;</span><br><span class="line"><span class="comment">/* 过渡时间曲线 */</span></span><br><span class="line"><span class="attribute">transition-timing-function</span>: linear;</span><br><span class="line"><span class="comment">/* 过渡总写：属性、周期、延迟、时间曲线 */</span></span><br><span class="line"><span class="attribute">transition</span>: background-color <span class="number">0.5s</span> <span class="number">1ms</span> linear;</span><br><span class="line"><span class="comment">/* 兼容浏览器写法 */</span></span><br><span class="line">-webkit-<span class="attribute">transition</span>: ;<span class="comment">/* webkit内核浏览器 */</span></span><br><span class="line">-moz-<span class="attribute">transition</span>: ;<span class="comment">/* 火狐 */</span></span><br><span class="line">-o-<span class="attribute">transition</span>: ;<span class="comment">/* 欧朋 */</span></span><br><span class="line">-ms-<span class="attribute">transition</span>: ;<span class="comment">/* IE */</span></span><br></pre></td></tr></table></figure><h2 id="4-转换"><a href="#4-转换" class="headerlink" title="4. 转换"></a>4. 转换</h2><h3 id="4-1-旋转"><a href="#4-1-旋转" class="headerlink" title="4.1 旋转"></a>4.1 旋转</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设置中心 */</span></span><br><span class="line"><span class="attribute">transform-origin</span>: left top;</span><br><span class="line"><span class="comment">/* 旋转 rotate(度数deg): 默认顺时针，负逆时针、盒子正中心旋转  */</span><span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">30deg</span>);</span><br></pre></td></tr></table></figure><h3 id="4-2-平移"><a href="#4-2-平移" class="headerlink" title="4.2 平移"></a>4.2 平移</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 平移：水平，垂直 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">80px</span>,-<span class="number">30px</span>);</span><br></pre></td></tr></table></figure><h3 id="4-3-缩放和拉伸"><a href="#4-3-缩放和拉伸" class="headerlink" title="4.3 缩放和拉伸"></a>4.3 缩放和拉伸</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 缩放拉伸: 倍数*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.8</span>,<span class="number">0.7</span>);</span><br></pre></td></tr></table></figure><h3 id="4-4-扭曲"><a href="#4-4-扭曲" class="headerlink" title="4.4 扭曲"></a>4.4 扭曲</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 扭曲:水平、垂直 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">30deg</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="5-动画"><a href="#5-动画" class="headerlink" title="5. 动画"></a>5. 动画</h2><p>动画属性需要先创建再使用</p><h3 id="5-1-创建"><a href="#5-1-创建" class="headerlink" title="5.1 创建"></a>5.1 创建</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建 */</span></span><br><span class="line"><span class="comment">/* 动画名属性 */</span></span><br><span class="line"><span class="attribute">animation-name</span>: firstAnimation;</span><br><span class="line"><span class="comment">/* 动画周期 */</span></span><br><span class="line"><span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line"><span class="comment">/* 动画延迟 */</span></span><br><span class="line"><span class="attribute">animation-delay</span>: <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* 动画时间曲线 匀速 linner、默认 慢快慢过渡 ease*/</span><span class="attribute">animation-timing-function</span>: linear;</span><br><span class="line"><span class="comment">/* 动画次数  无穷 infinite*/</span></span><br><span class="line"><span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line"><span class="comment">/* 动画暂停  默认running*/</span></span><br><span class="line"><span class="attribute">animation-play-state</span>: paused;</span><br><span class="line"><span class="comment">/* 综合设置 */</span></span><br><span class="line"><span class="attribute">animation</span>: firstAnimation <span class="number">4s</span> linear infinite;</span><br></pre></td></tr></table></figure><h3 id="5-2-设置"><a href="#5-2-设置" class="headerlink" title="5.2 设置"></a>5.2 设置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> firstAnimation &#123;</span><br><span class="line"><span class="comment">/* 开始 */</span></span><br><span class="line"><span class="selector-tag">from</span> &#123;<span class="attribute">background-color</span>: violet;&#125;</span><br><span class="line"><span class="comment">/* 结束 */</span></span><br><span class="line"><span class="selector-tag">to</span> &#123;<span class="attribute">background-color</span>: blue;&#125;</span><br><span class="line"><span class="comment">/* 百分比 */</span></span><br><span class="line"><span class="number">0%</span> &#123;<span class="attribute">background-color</span>: violet;&#125;</span><br><span class="line"><span class="number">100%</span> &#123;<span class="attribute">background-color</span>: hotpink;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动画属性有需求的话也需要浏览器兼容写法</p><h2 id="6-弹性容器"><a href="#6-弹性容器" class="headerlink" title="6. 弹性容器"></a>6. 弹性容器</h2><p>当子元素宽度和大于父元素时，不会超出父元素，子元素宽度弹性变小</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="comment">/* 容器主轴排列方向 从左到右row、从右到左row-reverse、从上到下column、从下到上column-reverse*/</span></span><br><span class="line"><span class="attribute">flex-direction</span>: row;</span><br><span class="line"><span class="comment">/* 设置主轴是否换行 换行wrap、不换行nowrap*/</span></span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line"><span class="comment">/* flex-direction、flex-wrap的简写*/</span></span><br><span class="line"><span class="attribute">flex-flow</span>: row wrap;</span><br><span class="line"><span class="comment">/* 主轴对齐方式 flex-start 左对齐、flex-end 右对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-between;</span><br><span class="line"><span class="comment">/* 在交叉轴(主轴的垂直方向)上对齐方式 */</span></span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br></pre></td></tr></table></figure><h2 id="7-响应式布局"><a href="#7-响应式布局" class="headerlink" title="7. 响应式布局"></a>7. 响应式布局</h2><h3 id="7-1-viewport"><a href="#7-1-viewport" class="headerlink" title="7.1 viewport"></a>7.1 viewport</h3><p>响应式布局：根据不同的设备展示不一样的网页布局</p><h3 id="7-2-媒体查询"><a href="#7-2-媒体查询" class="headerlink" title="7.2 媒体查询"></a>7.2 媒体查询</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 使用 @media 查询来制作响应式设计 */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">700px</span>) <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">400px</span>)&#123;</span><br><span class="line"><span class="comment">/* 屏幕的宽度400px到700px的样式 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-less"><a href="#8-less" class="headerlink" title="8. less"></a>8. less</h2><p>Less 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。<br>使用less前需要先安装node.js，然后通过cnpm安装less。<code>cnpm install -g less</code></p><h3 id="在本地node环境下实现"><a href="#在本地node环境下实现" class="headerlink" title="在本地node环境下实现"></a>在本地node环境下实现</h3><ol><li>创建一个less文件，类似于这样<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@size:</span> <span class="number">200px</span>;</span><br><span class="line"><span class="variable">@sizeHeight:</span> <span class="number">100px</span>;</span><br><span class="line"><span class="variable">@bgcolor1:</span> red;</span><br><span class="line"><span class="variable">@fontsize:</span> <span class="number">30px</span>;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="variable">@size</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="variable">@sizeHeight</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="variable">@bgcolor1</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="variable">@fontsize</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>将预处理less文件编译成css文件<code>lessc style.less style.css</code></li><li>引入style.css</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css基础</title>
      <link href="/posts/eda1a9a9/"/>
      <url>/posts/eda1a9a9/</url>
      
        <content type="html"><![CDATA[<h2 id="1-CSS"><a href="#1-CSS" class="headerlink" title="1. CSS"></a>1. CSS</h2><h3 id="1-1-引用CSS"><a href="#1-1-引用CSS" class="headerlink" title="1.1 引用CSS"></a>1.1 引用CSS</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">行内样式表</span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>网页头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">内部样式表</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123; <span class="attribute">width</span>:<span class="number">100px</span>; &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">外部样式表</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-CSS字体属性"><a href="#1-2-CSS字体属性" class="headerlink" title="1.2 CSS字体属性"></a>1.2 CSS字体属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">        <span class="attribute">font-family</span>: SimSun;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">28px</span>;<span class="comment">/* 默认大小 16px */</span></span><br><span class="line">        <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">        <span class="attribute">font-style</span>: oblique;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">header</span> &#123; <span class="attribute">font</span>: oblique bolder <span class="number">40px</span> SimSun; &#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-CSS外观属性"><a href="#1-4-CSS外观属性" class="headerlink" title="1.4 CSS外观属性"></a>1.4 CSS外观属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">10</span>, <span class="number">100</span>, <span class="number">200</span>);<span class="comment">/* 红、绿、蓝 */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fedfe1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/* 首行缩进 */</span></span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="comment">/* 文本水平居中 */</span></span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="comment">/* 文本行高属性：属性值等于高度，垂直居中 */</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">/* 文本描述:上划线等 */</span></span><br><span class="line">    <span class="attribute">text-decoration</span>: overline;</span><br><span class="line">    <span class="comment">/* 去掉li小点 */</span></span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="comment">/* 多行文本框取消拖拽 */</span></span><br><span class="line">    <span class="attribute">resize</span>: none;</span><br><span class="line">    <span class="comment">/* 圆角 */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-CSS选择器"><a href="#2-CSS选择器" class="headerlink" title="2. CSS选择器"></a>2. CSS选择器</h2><p>选择器：通过特定的符号去选择指定的元素</p><ul><li><p>基础选择器：标签选择器、类名选择器、ID选择器、多类名选择器、通配符选择器</p></li><li><p>复合选择器：交集选择器、并集选择器、后代选择器、子代选择器</p></li><li><p>伪类选择器</p><h3 id="2-1-基础选择器"><a href="#2-1-基础选择器" class="headerlink" title="2.1 基础选择器"></a>2.1 基础选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 标签选择器：通过标签的名获取指定元素 */</span></span><br><span class="line"><span class="selector-tag">header</span> &#123; <span class="attribute">color</span>: antiquewhite; &#125;</span><br><span class="line"><span class="comment">/* 类名选择器：通过标签的类名获取指定元素，多类名选择器：多个类名之间用空格隔开 */</span></span><br><span class="line"><span class="selector-class">.box1</span> &#123; <span class="attribute">color</span>: aqua; &#125;</span><br><span class="line"><span class="comment">/* ID选择器：通过ID名获取指定元素，ID不可重复 */</span></span><br><span class="line"><span class="selector-id">#box2</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br><span class="line"><span class="comment">/* 通配符选择器：选择所有元素 */</span></span><br><span class="line">* &#123; <span class="attribute">margin</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-复合选择器"><a href="#2-2-复合选择器" class="headerlink" title="2.2 复合选择器"></a>2.2 复合选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 交集选择器：既是...，又是... 不能加空格 同时拥有box1和box2被选 */</span></span><br><span class="line"><span class="selector-class">.box1</span><span class="selector-class">.box2</span> &#123; <span class="attribute">font-size</span>: <span class="number">40px</span>; &#125;</span><br><span class="line"><span class="comment">/* 并集选择器:多个选择器之间用逗号隔开 拥有box1和box2的都被选 */</span></span><br><span class="line"><span class="selector-class">.box1</span>,<span class="selector-class">.box2</span> &#123; <span class="attribute">font-weight</span>: bolder; &#125;</span><br><span class="line"><span class="comment">/* 子代选择器：必须是一级父子关系才被选 .list的一级子代是li的被选*/</span></span><br><span class="line"><span class="selector-class">.list1</span>&gt;<span class="selector-tag">li</span> &#123; <span class="attribute">color</span>: purple; &#125;</span><br><span class="line"><span class="comment">/* 后代选择器：后代都可以 .list后代是div的都被选 */</span></span><br><span class="line"><span class="selector-class">.list1</span> <span class="selector-tag">div</span> &#123; <span class="attribute">font-size</span>: <span class="number">70px</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-伪类选择器"><a href="#2-3-伪类选择器" class="headerlink" title="2.3 伪类选择器"></a>2.3 伪类选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 单击前的样式 (a标签)*/</span></span><br><span class="line"><span class="selector-class">.link1</span><span class="selector-pseudo">:link</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="comment">/* 鼠标移上去的样式 (通用)*/</span></span><br><span class="line"><span class="selector-class">.link1</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: pink; &#125;</span><br><span class="line"><span class="comment">/* 单击时的样式 (通用)*/</span></span><br><span class="line"><span class="selector-class">.link1</span><span class="selector-pseudo">:active</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br><span class="line"><span class="comment">/* 单击后的样式 (a标签)*/</span></span><br><span class="line"><span class="selector-class">.link1</span><span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: brown; &#125;</span><br></pre></td></tr></table></figure><h2 id="3-标签的显示模式"><a href="#3-标签的显示模式" class="headerlink" title="3. 标签的显示模式"></a>3. 标签的显示模式</h2><h3 id="3-1-块状元素"><a href="#3-1-块状元素" class="headerlink" title="3.1 块状元素"></a>3.1 块状元素</h3><p>hn、p、div、ul、ol、li、dl、dd、dt、table、caption、thead、tbody、tr、td、th、header、footer、section、artical、aside等</p></li><li><p>始终独占一行可以包含任何元素(h标签不能包含h标签,p标签不能包含p标签)</p></li><li><p>有默认宽高，是父元素的100%，高度是内容高度</p></li><li><p>宽高、外边框，内边距，边框可以设置</p><h3 id="3-2-行内元素"><a href="#3-2-行内元素" class="headerlink" title="3.2 行内元素"></a>3.2 行内元素</h3><p>span、a、label、b/shrong、i/em、u/ins、s/del</p></li><li><p>有默认宽高，宽高是内容所撑起的宽高</p></li><li><p>宽高设置无效</p></li><li><p>不能包含块状元素，可以包含行内元素和文本内容</p></li><li><p>相邻的行内元素在同一行显示</p></li><li><p>边框可以设置，内外边距水平方向可以设置，垂直不行</p><h3 id="3-3-行内块元素"><a href="#3-3-行内块元素" class="headerlink" title="3.3 行内块元素"></a>3.3 行内块元素</h3><p>img、input、select、option、datalist、textarea、button</p></li><li><p>相邻的行内块元素在同一行显示</p></li><li><p>有默认宽高</p></li><li><p>宽高、外边框，内边距，边框可以设置</p></li><li><p>一般不包含其他元素</p><h3 id="3-4-显示模式的转化："><a href="#3-4-显示模式的转化：" class="headerlink" title="3.4 显示模式的转化："></a>3.4 显示模式的转化：</h3></li><li><p>转化为块状元素：display：block</p></li><li><p>转化为行内元素：display：inline</p></li><li><p>转化为行内块元素：display：inline-block</p><h2 id="4-背景"><a href="#4-背景" class="headerlink" title="4. 背景"></a>4. 背景</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: violet;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">images/02.png</span>);</span><br><span class="line">    <span class="comment">/* 平铺属性 */</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="comment">/* 位置属性：水平、垂直方向 */</span></span><br><span class="line">    <span class="attribute">background-position</span>: right bottom;</span><br><span class="line">    <span class="comment">/* 尺寸属性 */</span></span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">80%</span> <span class="number">80%</span>;</span><br><span class="line">    <span class="comment">/* 总写：背景色 地址 平铺属性 位置 */</span></span><br><span class="line">    <span class="attribute">background</span>: red <span class="built_in">url</span>(<span class="string">images/02.png</span>) no-repeat <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">60%</span>; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-CSS三大特性"><a href="#5-CSS三大特性" class="headerlink" title="5. CSS三大特性"></a>5. CSS三大特性</h2><h3 id="5-1-CSS特性"><a href="#5-1-CSS特性" class="headerlink" title="5.1 CSS特性"></a>5.1 CSS特性</h3></li><li><p>层叠性：后者覆盖前者</p></li><li><p>继承性：子(后代)承父业</p></li><li><p>优先级：style &gt; !import &gt; ID选择器 &gt; 类名选择器 &gt; 标签选择器 &gt; 通配符选择器</p><h3 id="5-2-优先级比较"><a href="#5-2-优先级比较" class="headerlink" title="5.2 优先级比较"></a>5.2 优先级比较</h3></li><li><p>0 0 0 1  标签</p></li><li><p>0 0 1 0  类名</p></li><li><p>0 1 0 0  ID</p></li><li><p>1 0 0 0  style</p></li></ul><p>所有选择器加在一起数字较大的优先级高</p><h2 id="6-盒子模型"><a href="#6-盒子模型" class="headerlink" title="6. 盒子模型"></a>6. 盒子模型</h2><p>盒子模型包含：内容、宽高、边框、内边距、外边距</p><h3 id="6-1-边框"><a href="#6-1-边框" class="headerlink" title="6.1 边框"></a>6.1 边框</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 边框会影响盒子尺寸 上、下、左、右 */</span></span><br><span class="line"><span class="comment">/* 实线 solid、虚线 dashed、双实线 double、点线 dotted*/</span></span><br><span class="line"><span class="selector-class">.box1</span> &#123; <span class="attribute">border</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> solid black; &#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-内边距"><a href="#6-2-内边距" class="headerlink" title="6.2 内边距"></a>6.2 内边距</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 内边距会影响盒子尺寸、上右下左 */</span></span><br><span class="line"><span class="selector-class">.box1</span> &#123; <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">40px</span> <span class="number">40px</span> <span class="number">10px</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-外边距"><a href="#6-3-外边距" class="headerlink" title="6.3 外边距"></a>6.3 外边距</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123; <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">30px</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li>元素与其他元素，或与浏览器的距离</li><li>任何元素都有默认的外边距</li><li>外边距不会影响盒子尺寸</li></ul><ol><li>相邻元素的垂直外边距塌陷：两元素垂直相邻，外边距取较大值;</li><li>嵌套外边距合并：父元素没有上边框和上内边距，子元素的上外边距就是父元素的;</li><li>消除嵌套外边距合并：父元素加上边框或内边距，父元素添加<code>overflow:hidden</code>;</li><li><code>margin: auto;</code>实现盒子水平居中:盒子必须是块级元素，且指定了宽度;<h2 id="7-浮动与定位"><a href="#7-浮动与定位" class="headerlink" title="7.  浮动与定位"></a>7.  浮动与定位</h2><h3 id="7-1-浮动"><a href="#7-1-浮动" class="headerlink" title="7.1 浮动"></a>7.1 浮动</h3></li></ol><ul><li><p>标准流：元素按照本身特性进行排列</p></li><li><p>浮动：元素脱离标准流，漂浮在其它元素之上</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123; <span class="attribute">float</span>: left; <span class="attribute">float</span>: right; &#125;</span><br></pre></td></tr></table></figure></li><li><p>浮动的元素漂浮在其他元素之上</p></li><li><p>浮动不占位置</p></li><li><p>同时浮动的元素在同一行上显示</p></li><li><p>浮动后的元素不会超出父元素范围，包括内边距和边框</p></li><li><p>浮动后的元素自动转化为行内块元素</p><h3 id="7-2-清除浮动"><a href="#7-2-清除浮动" class="headerlink" title="7.2 清除浮动"></a>7.2 清除浮动</h3><p>浮动的影响: 浮动后的元素不占位置，不能撑开父元素的高度<br>清除浮动的影响</p></li><li><p>额外标签法：在父元素里边的最后添加额外的标签<code>clear:both</code></p></li><li><p>给父元素添加 overflow:hidden</p></li><li><p>伪元素清除 两个冒号是伪元素</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123; <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;<span class="attribute">display</span>: block;<span class="attribute">clear</span>: both; &#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-定位"><a href="#7-3-定位" class="headerlink" title="7.3 定位"></a>7.3 定位</h3><p>分类：静态定位、相对定位、绝对定位、固定定位<br>tips: 元素添加了绝对定位和固定定位之后，元素转换为行内块模式  </p><table><thead><tr><th align="center">类型</th><th align="center">参考系</th><th align="center">脱离标准流</th><th align="center">占位置</th></tr></thead><tbody><tr><td align="center">相对定位</td><td align="center">相对于元素本身</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">绝对定位</td><td align="center">相对于视口;若父元素相对定位则相对于父元素</td><td align="center">是</td><td align="center">否</td></tr><tr><td align="center">固定定位</td><td align="center">相对于浏览器</td><td align="center">是</td><td align="center">否</td></tr></tbody></table></li></ul><p>静态定位 static 标准流布局</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定位属性：position、边偏移量：left、right、top、bottom */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123; <span class="attribute">position</span>: absolute;<span class="attribute">top</span>: <span class="number">400px</span>;<span class="attribute">left</span>: <span class="number">400px</span>; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html基础</title>
      <link href="/posts/1a147173/"/>
      <url>/posts/1a147173/</url>
      
        <content type="html"><![CDATA[<h2 id="1-常用编辑器"><a href="#1-常用编辑器" class="headerlink" title="1. 常用编辑器"></a>1. 常用编辑器</h2><p>dreamweaver、sublime、webstorm、Hbuilder、vscode</p><h2 id="2-浏览器内核"><a href="#2-浏览器内核" class="headerlink" title="2. 浏览器内核"></a>2. 浏览器内核</h2><p>分为渲染引擎和JS引擎<br>渲染引擎：它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机<br>JS引擎：JS引擎则是解析Javascript语言，执行javascript语言来实现网页的动态效果</p><ul><li>IE: Trident</li><li>Firefox: Gecko</li><li>Chrome: Webkit 到 Blink</li><li>Safari: Webkit</li><li>Opera: Presto 到 Webkit 到 Blink<h2 id="3-标签"><a href="#3-标签" class="headerlink" title="3. 标签"></a>3. 标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体<span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">s</span>&gt;</span> <span class="tag">&lt;<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划<span class="tag">&lt;/<span class="name">u</span>&gt;</span> <span class="tag">&lt;<span class="name">ins</span>&gt;</span><span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片路径&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;出错显示信息&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转链接&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>_blank在新窗口中打开<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 锚点定位 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="comment">&lt;!-- 有序列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="comment">&lt;!-- 无序列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span><span class="comment">&lt;!-- 自定义列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img.hitagi.site/202211142245421.jpg" alt="特殊字符"><h2 id="4-表格"><a href="#4-表格" class="headerlink" title="4. 表格"></a>4. 表格</h2>align对齐方式、border边框宽度、cellspacing单元格间距、cellpadding单元格内边距  </li></ul><p>合并单元格的步骤</p><ol><li>先判断是跨行(rowspan)还是跨列(colspan)</li><li>把属性名和合并的行数写在第一个要合并的单元格上</li><li>把多余的单元格注释掉<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>年中工资报表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;td&gt;跨列注释掉&lt;/td&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;td&gt;跨行注释掉&lt;/td&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-表单"><a href="#5-表单" class="headerlink" title="5. 表单"></a>5. 表单</h2>action提交的地址、method提交的方式、name表单名字<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span> <span class="attr">name</span>=<span class="string">&quot;form1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;user&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;默认值&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;提示信息&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">size</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单选框，选中checked --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>男<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多选框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 下拉框，选中selected --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>石家庄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>迁安<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多行文本框 row长 cols宽 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重新设置&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-HTML5"><a href="#6-HTML5" class="headerlink" title="6. HTML5"></a>6. HTML5</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>头部标签<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 导航标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航标签链接1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航标签链接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>小节标签<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 侧边栏标签aside --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>文章标签<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>尾部标签<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 进度条标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">max</span>=<span class="string">&quot;600&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="7-HTML5-form"><a href="#7-HTML5-form" class="headerlink" title="7. HTML5-form"></a>7. HTML5-form</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span> <span class="attr">name</span>=<span class="string">&quot;form-1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- h5选择框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">list</span>=<span class="string">&quot;l1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;l1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;op3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;op4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;op5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>h5普通按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span>小节标签，类div<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;user&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- placeholder：占位符、required：不能为空、autofocus：自动获取焦点、autocomplete：自动完成 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;占位符&quot;</span> <span class="attr">required</span> <span class="attr">autofocus</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- maxlength最大长度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;占位符&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span> <span class="attr">minlength</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 新增table属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 颜色选择器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>搜索框<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入搜索内容&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>时间<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>月份<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;month&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>周<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;week&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-HTML5-media"><a href="#8-HTML5-media" class="headerlink" title="8. HTML5-media"></a>8. HTML5-media</h2><p>控件controls、循环loop、静音muted</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;音频地址&quot;</span> <span class="attr">controls</span> <span class="attr">loop</span> <span class="attr">muted</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">controls</span> <span class="attr">loop</span> <span class="attr">muted</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
